{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=8,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/faster_rcnn_r50_fpn'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1511621296, "exp_name": "faster_rcnn_r50_fpn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 9925, "data_time": 0.0602, "loss_rpn_cls": 0.07753, "loss_rpn_bbox": 0.03018, "loss_cls": 0.58392, "acc": 86.43066, "loss_bbox": 0.15034, "loss": 0.84197, "time": 0.60213}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 9925, "data_time": 0.01692, "loss_rpn_cls": 0.01468, "loss_rpn_bbox": 0.02886, "loss_cls": 0.21978, "acc": 94.21875, "loss_bbox": 0.21625, "loss": 0.47957, "time": 0.5484}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 9925, "data_time": 0.01833, "loss_rpn_cls": 0.01823, "loss_rpn_bbox": 0.02557, "loss_cls": 0.18518, "acc": 94.53125, "loss_bbox": 0.19761, "loss": 0.4266, "time": 0.55606}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 9925, "data_time": 0.01934, "loss_rpn_cls": 0.01503, "loss_rpn_bbox": 0.02601, "loss_cls": 0.16312, "acc": 94.67578, "loss_bbox": 0.17926, "loss": 0.38342, "time": 0.55851}
{"mode": "val", "epoch": 1, "iter": 288, "lr": 0.00921, "bbox_mAP": 0.181, "bbox_mAP_50": 0.36, "bbox_mAP_75": 0.145, "bbox_mAP_s": 0.108, "bbox_mAP_m": 0.077, "bbox_mAP_l": 0.171, "bbox_mAP_copypaste": "0.181 0.360 0.145 0.108 0.077 0.171"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01121, "memory": 9925, "data_time": 0.06145, "loss_rpn_cls": 0.0101, "loss_rpn_bbox": 0.02871, "loss_cls": 0.16765, "acc": 94.53613, "loss_bbox": 0.17003, "loss": 0.37649, "time": 0.6024}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01321, "memory": 9925, "data_time": 0.01605, "loss_rpn_cls": 0.01037, "loss_rpn_bbox": 0.03061, "loss_cls": 0.15239, "acc": 95.00391, "loss_bbox": 0.15276, "loss": 0.34613, "time": 0.56203}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0152, "memory": 9925, "data_time": 0.01609, "loss_rpn_cls": 0.01164, "loss_rpn_bbox": 0.02827, "loss_cls": 0.14216, "acc": 95.35352, "loss_bbox": 0.14954, "loss": 0.33161, "time": 0.55335}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0172, "memory": 9925, "data_time": 0.01596, "loss_rpn_cls": 0.01228, "loss_rpn_bbox": 0.0249, "loss_cls": 0.12821, "acc": 95.61035, "loss_bbox": 0.1414, "loss": 0.30678, "time": 0.55969}
{"mode": "val", "epoch": 2, "iter": 288, "lr": 0.01844, "bbox_mAP": 0.199, "bbox_mAP_50": 0.447, "bbox_mAP_75": 0.149, "bbox_mAP_s": 0.127, "bbox_mAP_m": 0.1, "bbox_mAP_l": 0.19, "bbox_mAP_copypaste": "0.199 0.447 0.149 0.127 0.100 0.190"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02, "memory": 9925, "data_time": 0.06209, "loss_rpn_cls": 0.0122, "loss_rpn_bbox": 0.02651, "loss_cls": 0.12538, "acc": 95.92188, "loss_bbox": 0.13595, "loss": 0.30004, "time": 0.60209}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.02, "memory": 9925, "data_time": 0.01632, "loss_rpn_cls": 0.01458, "loss_rpn_bbox": 0.0297, "loss_cls": 0.12617, "acc": 95.61523, "loss_bbox": 0.14318, "loss": 0.31363, "time": 0.55847}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 9925, "data_time": 0.01501, "loss_rpn_cls": 0.01273, "loss_rpn_bbox": 0.02781, "loss_cls": 0.14297, "acc": 95.48145, "loss_bbox": 0.13452, "loss": 0.31802, "time": 0.55746}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.02, "memory": 9925, "data_time": 0.01608, "loss_rpn_cls": 0.01271, "loss_rpn_bbox": 0.02947, "loss_cls": 0.13331, "acc": 95.49219, "loss_bbox": 0.14697, "loss": 0.32245, "time": 0.55002}
{"mode": "val", "epoch": 3, "iter": 288, "lr": 0.02, "bbox_mAP": 0.188, "bbox_mAP_50": 0.398, "bbox_mAP_75": 0.159, "bbox_mAP_s": 0.142, "bbox_mAP_m": 0.118, "bbox_mAP_l": 0.2, "bbox_mAP_copypaste": "0.188 0.398 0.159 0.142 0.118 0.200"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 9925, "data_time": 0.0599, "loss_rpn_cls": 0.00914, "loss_rpn_bbox": 0.02469, "loss_cls": 0.10947, "acc": 96.11035, "loss_bbox": 0.13071, "loss": 0.27402, "time": 0.60099}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 9925, "data_time": 0.01433, "loss_rpn_cls": 0.00611, "loss_rpn_bbox": 0.02573, "loss_cls": 0.12491, "acc": 95.45117, "loss_bbox": 0.14445, "loss": 0.3012, "time": 0.55006}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 9925, "data_time": 0.01493, "loss_rpn_cls": 0.01406, "loss_rpn_bbox": 0.02594, "loss_cls": 0.12772, "acc": 95.70898, "loss_bbox": 0.14219, "loss": 0.30991, "time": 0.55522}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.02, "memory": 9925, "data_time": 0.01569, "loss_rpn_cls": 0.00977, "loss_rpn_bbox": 0.029, "loss_cls": 0.13462, "acc": 95.42773, "loss_bbox": 0.1557, "loss": 0.32909, "time": 0.56054}
{"mode": "val", "epoch": 4, "iter": 288, "lr": 0.02, "bbox_mAP": 0.254, "bbox_mAP_50": 0.482, "bbox_mAP_75": 0.229, "bbox_mAP_s": 0.165, "bbox_mAP_m": 0.124, "bbox_mAP_l": 0.235, "bbox_mAP_copypaste": "0.254 0.482 0.229 0.165 0.124 0.235"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 9925, "data_time": 0.06009, "loss_rpn_cls": 0.00777, "loss_rpn_bbox": 0.02688, "loss_cls": 0.11193, "acc": 95.8252, "loss_bbox": 0.13846, "loss": 0.28503, "time": 0.60322}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 9925, "data_time": 0.01422, "loss_rpn_cls": 0.0058, "loss_rpn_bbox": 0.02687, "loss_cls": 0.12085, "acc": 95.64258, "loss_bbox": 0.14749, "loss": 0.30101, "time": 0.55629}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.02, "memory": 9925, "data_time": 0.0136, "loss_rpn_cls": 0.00836, "loss_rpn_bbox": 0.02089, "loss_cls": 0.13047, "acc": 95.35449, "loss_bbox": 0.14232, "loss": 0.30204, "time": 0.55513}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.02, "memory": 9925, "data_time": 0.01421, "loss_rpn_cls": 0.00675, "loss_rpn_bbox": 0.02479, "loss_cls": 0.12068, "acc": 95.54297, "loss_bbox": 0.15081, "loss": 0.30303, "time": 0.55966}
{"mode": "val", "epoch": 5, "iter": 288, "lr": 0.02, "bbox_mAP": 0.239, "bbox_mAP_50": 0.479, "bbox_mAP_75": 0.19, "bbox_mAP_s": 0.291, "bbox_mAP_m": 0.126, "bbox_mAP_l": 0.246, "bbox_mAP_copypaste": "0.239 0.479 0.190 0.291 0.126 0.246"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 9925, "data_time": 0.05886, "loss_rpn_cls": 0.01231, "loss_rpn_bbox": 0.02453, "loss_cls": 0.11954, "acc": 95.71582, "loss_bbox": 0.1406, "loss": 0.29698, "time": 0.60611}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 9925, "data_time": 0.01513, "loss_rpn_cls": 0.00518, "loss_rpn_bbox": 0.02158, "loss_cls": 0.09875, "acc": 96.34668, "loss_bbox": 0.13115, "loss": 0.25666, "time": 0.56503}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.02, "memory": 9925, "data_time": 0.01535, "loss_rpn_cls": 0.00737, "loss_rpn_bbox": 0.02757, "loss_cls": 0.10935, "acc": 95.73242, "loss_bbox": 0.14817, "loss": 0.29246, "time": 0.56508}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.02, "memory": 9925, "data_time": 0.01559, "loss_rpn_cls": 0.00766, "loss_rpn_bbox": 0.02456, "loss_cls": 0.12086, "acc": 95.52148, "loss_bbox": 0.14705, "loss": 0.30013, "time": 0.57081}
{"mode": "val", "epoch": 6, "iter": 288, "lr": 0.02, "bbox_mAP": 0.287, "bbox_mAP_50": 0.557, "bbox_mAP_75": 0.268, "bbox_mAP_s": 0.328, "bbox_mAP_m": 0.201, "bbox_mAP_l": 0.3, "bbox_mAP_copypaste": "0.287 0.557 0.268 0.328 0.201 0.300"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 9925, "data_time": 0.06122, "loss_rpn_cls": 0.00432, "loss_rpn_bbox": 0.02242, "loss_cls": 0.10154, "acc": 95.97754, "loss_bbox": 0.13941, "loss": 0.26769, "time": 0.61158}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 9925, "data_time": 0.0171, "loss_rpn_cls": 0.00639, "loss_rpn_bbox": 0.0232, "loss_cls": 0.11627, "acc": 95.52441, "loss_bbox": 0.15225, "loss": 0.29811, "time": 0.572}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.02, "memory": 9925, "data_time": 0.01762, "loss_rpn_cls": 0.00778, "loss_rpn_bbox": 0.02336, "loss_cls": 0.10549, "acc": 95.95801, "loss_bbox": 0.14103, "loss": 0.27766, "time": 0.57449}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.02, "memory": 9925, "data_time": 0.01695, "loss_rpn_cls": 0.00496, "loss_rpn_bbox": 0.02497, "loss_cls": 0.10395, "acc": 96.02051, "loss_bbox": 0.13846, "loss": 0.27234, "time": 0.56868}
{"mode": "val", "epoch": 7, "iter": 288, "lr": 0.02, "bbox_mAP": 0.293, "bbox_mAP_50": 0.553, "bbox_mAP_75": 0.246, "bbox_mAP_s": 0.355, "bbox_mAP_m": 0.186, "bbox_mAP_l": 0.298, "bbox_mAP_copypaste": "0.293 0.553 0.246 0.355 0.186 0.298"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 9925, "data_time": 0.06168, "loss_rpn_cls": 0.00421, "loss_rpn_bbox": 0.02187, "loss_cls": 0.09951, "acc": 96.20703, "loss_bbox": 0.13913, "loss": 0.26472, "time": 0.61576}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 9925, "data_time": 0.0158, "loss_rpn_cls": 0.00577, "loss_rpn_bbox": 0.02403, "loss_cls": 0.10087, "acc": 96.03711, "loss_bbox": 0.14959, "loss": 0.28026, "time": 0.56585}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.02, "memory": 9925, "data_time": 0.01682, "loss_rpn_cls": 0.00484, "loss_rpn_bbox": 0.02138, "loss_cls": 0.09518, "acc": 96.3457, "loss_bbox": 0.13017, "loss": 0.25158, "time": 0.56843}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.02, "memory": 9925, "data_time": 0.01588, "loss_rpn_cls": 0.0058, "loss_rpn_bbox": 0.02307, "loss_cls": 0.10055, "acc": 96.02051, "loss_bbox": 0.14236, "loss": 0.27179, "time": 0.56464}
{"mode": "val", "epoch": 8, "iter": 288, "lr": 0.02, "bbox_mAP": 0.298, "bbox_mAP_50": 0.567, "bbox_mAP_75": 0.271, "bbox_mAP_s": 0.357, "bbox_mAP_m": 0.146, "bbox_mAP_l": 0.338, "bbox_mAP_copypaste": "0.298 0.567 0.271 0.357 0.146 0.338"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 9925, "data_time": 0.06402, "loss_rpn_cls": 0.00363, "loss_rpn_bbox": 0.023, "loss_cls": 0.09624, "acc": 96.15234, "loss_bbox": 0.14369, "loss": 0.26656, "time": 0.61853}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.002, "memory": 9925, "data_time": 0.01615, "loss_rpn_cls": 0.00377, "loss_rpn_bbox": 0.01812, "loss_cls": 0.08155, "acc": 96.78613, "loss_bbox": 0.12044, "loss": 0.22387, "time": 0.56919}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.002, "memory": 9925, "data_time": 0.01697, "loss_rpn_cls": 0.00259, "loss_rpn_bbox": 0.01821, "loss_cls": 0.07053, "acc": 97.17578, "loss_bbox": 0.11804, "loss": 0.20937, "time": 0.56968}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.002, "memory": 9925, "data_time": 0.01771, "loss_rpn_cls": 0.00308, "loss_rpn_bbox": 0.01861, "loss_cls": 0.07947, "acc": 96.80078, "loss_bbox": 0.12576, "loss": 0.22692, "time": 0.57402}
{"mode": "val", "epoch": 9, "iter": 288, "lr": 0.002, "bbox_mAP": 0.352, "bbox_mAP_50": 0.637, "bbox_mAP_75": 0.328, "bbox_mAP_s": 0.352, "bbox_mAP_m": 0.177, "bbox_mAP_l": 0.386, "bbox_mAP_copypaste": "0.352 0.637 0.328 0.352 0.177 0.386"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 9925, "data_time": 0.06251, "loss_rpn_cls": 0.00272, "loss_rpn_bbox": 0.01485, "loss_cls": 0.06558, "acc": 97.32422, "loss_bbox": 0.10681, "loss": 0.18996, "time": 0.61591}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.002, "memory": 9925, "data_time": 0.01625, "loss_rpn_cls": 0.00311, "loss_rpn_bbox": 0.01878, "loss_cls": 0.07972, "acc": 96.78027, "loss_bbox": 0.13118, "loss": 0.23278, "time": 0.57168}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.002, "memory": 9925, "data_time": 0.01659, "loss_rpn_cls": 0.00285, "loss_rpn_bbox": 0.01739, "loss_cls": 0.07392, "acc": 97.0127, "loss_bbox": 0.1159, "loss": 0.21006, "time": 0.5665}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.002, "memory": 9925, "data_time": 0.01719, "loss_rpn_cls": 0.00293, "loss_rpn_bbox": 0.01823, "loss_cls": 0.07595, "acc": 96.95703, "loss_bbox": 0.12464, "loss": 0.22175, "time": 0.5717}
{"mode": "val", "epoch": 10, "iter": 288, "lr": 0.002, "bbox_mAP": 0.379, "bbox_mAP_50": 0.644, "bbox_mAP_75": 0.355, "bbox_mAP_s": 0.379, "bbox_mAP_m": 0.201, "bbox_mAP_l": 0.415, "bbox_mAP_copypaste": "0.379 0.644 0.355 0.379 0.201 0.415"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 9925, "data_time": 0.06278, "loss_rpn_cls": 0.00289, "loss_rpn_bbox": 0.01621, "loss_cls": 0.0726, "acc": 97.19336, "loss_bbox": 0.11054, "loss": 0.20225, "time": 0.62024}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.002, "memory": 9925, "data_time": 0.01649, "loss_rpn_cls": 0.00308, "loss_rpn_bbox": 0.0165, "loss_cls": 0.06673, "acc": 97.25391, "loss_bbox": 0.11074, "loss": 0.19706, "time": 0.57557}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.002, "memory": 9925, "data_time": 0.01669, "loss_rpn_cls": 0.00282, "loss_rpn_bbox": 0.01723, "loss_cls": 0.07145, "acc": 97.06934, "loss_bbox": 0.11915, "loss": 0.21065, "time": 0.57196}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.002, "memory": 9925, "data_time": 0.01653, "loss_rpn_cls": 0.00247, "loss_rpn_bbox": 0.02005, "loss_cls": 0.06868, "acc": 97.19531, "loss_bbox": 0.11993, "loss": 0.21112, "time": 0.57294}
{"mode": "val", "epoch": 11, "iter": 288, "lr": 0.002, "bbox_mAP": 0.371, "bbox_mAP_50": 0.638, "bbox_mAP_75": 0.357, "bbox_mAP_s": 0.384, "bbox_mAP_m": 0.197, "bbox_mAP_l": 0.413, "bbox_mAP_copypaste": "0.371 0.638 0.357 0.384 0.197 0.413"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 9925, "data_time": 0.0626, "loss_rpn_cls": 0.00255, "loss_rpn_bbox": 0.01758, "loss_cls": 0.07241, "acc": 97.13574, "loss_bbox": 0.11827, "loss": 0.21082, "time": 0.6212}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0002, "memory": 9925, "data_time": 0.01694, "loss_rpn_cls": 0.00217, "loss_rpn_bbox": 0.01942, "loss_cls": 0.06873, "acc": 97.11035, "loss_bbox": 0.12221, "loss": 0.21253, "time": 0.57492}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0002, "memory": 9925, "data_time": 0.01639, "loss_rpn_cls": 0.00303, "loss_rpn_bbox": 0.01591, "loss_cls": 0.06425, "acc": 97.35156, "loss_bbox": 0.1083, "loss": 0.19149, "time": 0.57349}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.0002, "memory": 9925, "data_time": 0.01775, "loss_rpn_cls": 0.00236, "loss_rpn_bbox": 0.01677, "loss_cls": 0.06404, "acc": 97.32422, "loss_bbox": 0.10939, "loss": 0.19256, "time": 0.57176}
{"mode": "val", "epoch": 12, "iter": 288, "lr": 0.0002, "bbox_mAP": 0.376, "bbox_mAP_50": 0.643, "bbox_mAP_75": 0.364, "bbox_mAP_s": 0.398, "bbox_mAP_m": 0.203, "bbox_mAP_l": 0.416, "bbox_mAP_copypaste": "0.376 0.643 0.364 0.398 0.203 0.416"}
