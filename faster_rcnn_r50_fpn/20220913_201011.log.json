{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train5.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val5.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val5.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=8,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/faster_rcnn_r50_fpn'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1123762167, "exp_name": "faster_rcnn_r50_fpn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 9927, "data_time": 0.06202, "loss_rpn_cls": 0.07644, "loss_rpn_bbox": 0.02771, "loss_cls": 0.50184, "acc": 94.42871, "loss_bbox": 0.13308, "loss": 0.73907, "time": 0.61857}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 9927, "data_time": 0.01583, "loss_rpn_cls": 0.02012, "loss_rpn_bbox": 0.02996, "loss_cls": 0.20446, "acc": 94.56445, "loss_bbox": 0.2061, "loss": 0.46064, "time": 0.56791}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 9927, "data_time": 0.01652, "loss_rpn_cls": 0.01004, "loss_rpn_bbox": 0.02149, "loss_cls": 0.17382, "acc": 94.49707, "loss_bbox": 0.19636, "loss": 0.40171, "time": 0.57401}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 9927, "data_time": 0.01589, "loss_rpn_cls": 0.01272, "loss_rpn_bbox": 0.02876, "loss_cls": 0.16207, "acc": 94.85059, "loss_bbox": 0.17766, "loss": 0.38121, "time": 0.56645}
{"mode": "val", "epoch": 1, "iter": 288, "lr": 0.00933, "bbox_mAP": 0.143, "bbox_mAP_50": 0.296, "bbox_mAP_75": 0.127, "bbox_mAP_s": 0.129, "bbox_mAP_m": 0.121, "bbox_mAP_l": 0.141, "bbox_mAP_copypaste": "0.143 0.296 0.127 0.129 0.121 0.141"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01133, "memory": 9927, "data_time": 0.06326, "loss_rpn_cls": 0.01523, "loss_rpn_bbox": 0.02756, "loss_cls": 0.14522, "acc": 95.25879, "loss_bbox": 0.15143, "loss": 0.33944, "time": 0.62383}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01333, "memory": 9927, "data_time": 0.01736, "loss_rpn_cls": 0.01119, "loss_rpn_bbox": 0.02525, "loss_cls": 0.15105, "acc": 95.15527, "loss_bbox": 0.15212, "loss": 0.33961, "time": 0.57093}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01532, "memory": 9927, "data_time": 0.01678, "loss_rpn_cls": 0.01028, "loss_rpn_bbox": 0.02948, "loss_cls": 0.15417, "acc": 95.24805, "loss_bbox": 0.14715, "loss": 0.34108, "time": 0.56852}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.01732, "memory": 9927, "data_time": 0.01704, "loss_rpn_cls": 0.01532, "loss_rpn_bbox": 0.03066, "loss_cls": 0.12744, "acc": 95.85352, "loss_bbox": 0.13742, "loss": 0.31084, "time": 0.57771}
{"mode": "val", "epoch": 2, "iter": 288, "lr": 0.01868, "bbox_mAP": 0.152, "bbox_mAP_50": 0.326, "bbox_mAP_75": 0.149, "bbox_mAP_s": 0.093, "bbox_mAP_m": 0.105, "bbox_mAP_l": 0.18, "bbox_mAP_copypaste": "0.152 0.326 0.149 0.093 0.105 0.180"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06348, "loss_rpn_cls": 0.01251, "loss_rpn_bbox": 0.02852, "loss_cls": 0.13964, "acc": 95.14355, "loss_bbox": 0.14411, "loss": 0.32478, "time": 0.61918}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01694, "loss_rpn_cls": 0.00876, "loss_rpn_bbox": 0.02714, "loss_cls": 0.14241, "acc": 95.28223, "loss_bbox": 0.14823, "loss": 0.32654, "time": 0.5743}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01656, "loss_rpn_cls": 0.01269, "loss_rpn_bbox": 0.02649, "loss_cls": 0.12711, "acc": 95.84082, "loss_bbox": 0.13197, "loss": 0.29826, "time": 0.56848}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01767, "loss_rpn_cls": 0.00944, "loss_rpn_bbox": 0.02315, "loss_cls": 0.1302, "acc": 95.7832, "loss_bbox": 0.13578, "loss": 0.29857, "time": 0.5765}
{"mode": "val", "epoch": 3, "iter": 288, "lr": 0.02, "bbox_mAP": 0.163, "bbox_mAP_50": 0.337, "bbox_mAP_75": 0.141, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.113, "bbox_mAP_l": 0.179, "bbox_mAP_copypaste": "0.163 0.337 0.141 0.101 0.113 0.179"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.0639, "loss_rpn_cls": 0.01256, "loss_rpn_bbox": 0.02995, "loss_cls": 0.126, "acc": 95.53125, "loss_bbox": 0.14388, "loss": 0.31239, "time": 0.62481}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01666, "loss_rpn_cls": 0.0066, "loss_rpn_bbox": 0.02574, "loss_cls": 0.12002, "acc": 95.60254, "loss_bbox": 0.14205, "loss": 0.29442, "time": 0.57345}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01697, "loss_rpn_cls": 0.01742, "loss_rpn_bbox": 0.02389, "loss_cls": 0.12223, "acc": 96.08984, "loss_bbox": 0.12943, "loss": 0.29297, "time": 0.57655}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01677, "loss_rpn_cls": 0.01479, "loss_rpn_bbox": 0.02817, "loss_cls": 0.11994, "acc": 96.0332, "loss_bbox": 0.13132, "loss": 0.29421, "time": 0.57943}
{"mode": "val", "epoch": 4, "iter": 288, "lr": 0.02, "bbox_mAP": 0.172, "bbox_mAP_50": 0.393, "bbox_mAP_75": 0.117, "bbox_mAP_s": 0.212, "bbox_mAP_m": 0.172, "bbox_mAP_l": 0.185, "bbox_mAP_copypaste": "0.172 0.393 0.117 0.212 0.172 0.185"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06341, "loss_rpn_cls": 0.00634, "loss_rpn_bbox": 0.02576, "loss_cls": 0.11442, "acc": 95.87207, "loss_bbox": 0.13883, "loss": 0.28534, "time": 0.61865}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01759, "loss_rpn_cls": 0.0071, "loss_rpn_bbox": 0.0206, "loss_cls": 0.1167, "acc": 95.88477, "loss_bbox": 0.1295, "loss": 0.2739, "time": 0.56991}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01599, "loss_rpn_cls": 0.00699, "loss_rpn_bbox": 0.02547, "loss_cls": 0.13213, "acc": 95.09668, "loss_bbox": 0.15934, "loss": 0.32393, "time": 0.56661}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01681, "loss_rpn_cls": 0.00639, "loss_rpn_bbox": 0.02525, "loss_cls": 0.11279, "acc": 95.66504, "loss_bbox": 0.13762, "loss": 0.28205, "time": 0.57076}
{"mode": "val", "epoch": 5, "iter": 288, "lr": 0.02, "bbox_mAP": 0.197, "bbox_mAP_50": 0.388, "bbox_mAP_75": 0.175, "bbox_mAP_s": 0.235, "bbox_mAP_m": 0.127, "bbox_mAP_l": 0.22, "bbox_mAP_copypaste": "0.197 0.388 0.175 0.235 0.127 0.220"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06356, "loss_rpn_cls": 0.00589, "loss_rpn_bbox": 0.02102, "loss_cls": 0.12268, "acc": 95.4873, "loss_bbox": 0.14215, "loss": 0.29173, "time": 0.61758}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01783, "loss_rpn_cls": 0.00629, "loss_rpn_bbox": 0.02939, "loss_cls": 0.11257, "acc": 95.68457, "loss_bbox": 0.15297, "loss": 0.30122, "time": 0.57457}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01731, "loss_rpn_cls": 0.00623, "loss_rpn_bbox": 0.02329, "loss_cls": 0.10259, "acc": 96.25781, "loss_bbox": 0.1241, "loss": 0.25621, "time": 0.56749}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01699, "loss_rpn_cls": 0.00547, "loss_rpn_bbox": 0.02216, "loss_cls": 0.10736, "acc": 96.00684, "loss_bbox": 0.12954, "loss": 0.26453, "time": 0.57273}
{"mode": "val", "epoch": 6, "iter": 288, "lr": 0.02, "bbox_mAP": 0.234, "bbox_mAP_50": 0.424, "bbox_mAP_75": 0.222, "bbox_mAP_s": 0.259, "bbox_mAP_m": 0.162, "bbox_mAP_l": 0.275, "bbox_mAP_copypaste": "0.234 0.424 0.222 0.259 0.162 0.275"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06286, "loss_rpn_cls": 0.00509, "loss_rpn_bbox": 0.02068, "loss_cls": 0.10618, "acc": 95.98242, "loss_bbox": 0.14101, "loss": 0.27294, "time": 0.61357}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01633, "loss_rpn_cls": 0.00595, "loss_rpn_bbox": 0.02257, "loss_cls": 0.11261, "acc": 95.81445, "loss_bbox": 0.13843, "loss": 0.27956, "time": 0.56667}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.0173, "loss_rpn_cls": 0.00596, "loss_rpn_bbox": 0.02446, "loss_cls": 0.092, "acc": 96.40137, "loss_bbox": 0.11997, "loss": 0.24238, "time": 0.56914}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01706, "loss_rpn_cls": 0.006, "loss_rpn_bbox": 0.0249, "loss_cls": 0.10747, "acc": 95.99023, "loss_bbox": 0.14322, "loss": 0.28159, "time": 0.57339}
{"mode": "val", "epoch": 7, "iter": 288, "lr": 0.02, "bbox_mAP": 0.225, "bbox_mAP_50": 0.438, "bbox_mAP_75": 0.204, "bbox_mAP_s": 0.183, "bbox_mAP_m": 0.142, "bbox_mAP_l": 0.291, "bbox_mAP_copypaste": "0.225 0.438 0.204 0.183 0.142 0.291"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06391, "loss_rpn_cls": 0.0045, "loss_rpn_bbox": 0.02076, "loss_cls": 0.08703, "acc": 96.61914, "loss_bbox": 0.12133, "loss": 0.23362, "time": 0.61493}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01758, "loss_rpn_cls": 0.00451, "loss_rpn_bbox": 0.02113, "loss_cls": 0.09286, "acc": 96.46094, "loss_bbox": 0.13467, "loss": 0.25317, "time": 0.5697}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01845, "loss_rpn_cls": 0.00493, "loss_rpn_bbox": 0.02487, "loss_cls": 0.09842, "acc": 96.27051, "loss_bbox": 0.14165, "loss": 0.26988, "time": 0.57268}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01786, "loss_rpn_cls": 0.00461, "loss_rpn_bbox": 0.02173, "loss_cls": 0.1029, "acc": 96.13281, "loss_bbox": 0.13809, "loss": 0.26733, "time": 0.5682}
{"mode": "val", "epoch": 8, "iter": 288, "lr": 0.02, "bbox_mAP": 0.232, "bbox_mAP_50": 0.456, "bbox_mAP_75": 0.185, "bbox_mAP_s": 0.154, "bbox_mAP_m": 0.221, "bbox_mAP_l": 0.269, "bbox_mAP_copypaste": "0.232 0.456 0.185 0.154 0.221 0.269"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 9927, "data_time": 0.06336, "loss_rpn_cls": 0.00368, "loss_rpn_bbox": 0.01971, "loss_cls": 0.08638, "acc": 96.60449, "loss_bbox": 0.12632, "loss": 0.23609, "time": 0.61156}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.002, "memory": 9927, "data_time": 0.01891, "loss_rpn_cls": 0.00298, "loss_rpn_bbox": 0.01916, "loss_cls": 0.07231, "acc": 97.12695, "loss_bbox": 0.1115, "loss": 0.20594, "time": 0.57189}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.002, "memory": 9927, "data_time": 0.01773, "loss_rpn_cls": 0.00216, "loss_rpn_bbox": 0.01607, "loss_cls": 0.07388, "acc": 97.02734, "loss_bbox": 0.11496, "loss": 0.20707, "time": 0.56961}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.002, "memory": 9927, "data_time": 0.01846, "loss_rpn_cls": 0.00272, "loss_rpn_bbox": 0.01726, "loss_cls": 0.07784, "acc": 96.92773, "loss_bbox": 0.11811, "loss": 0.21593, "time": 0.57264}
{"mode": "val", "epoch": 9, "iter": 288, "lr": 0.002, "bbox_mAP": 0.273, "bbox_mAP_50": 0.499, "bbox_mAP_75": 0.245, "bbox_mAP_s": 0.249, "bbox_mAP_m": 0.21, "bbox_mAP_l": 0.37, "bbox_mAP_copypaste": "0.273 0.499 0.245 0.249 0.210 0.370"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 9927, "data_time": 0.06497, "loss_rpn_cls": 0.0026, "loss_rpn_bbox": 0.01706, "loss_cls": 0.06885, "acc": 97.22656, "loss_bbox": 0.1101, "loss": 0.19862, "time": 0.61292}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.002, "memory": 9927, "data_time": 0.01878, "loss_rpn_cls": 0.00285, "loss_rpn_bbox": 0.01645, "loss_cls": 0.07159, "acc": 97.15039, "loss_bbox": 0.11455, "loss": 0.20544, "time": 0.57009}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.002, "memory": 9927, "data_time": 0.01747, "loss_rpn_cls": 0.00396, "loss_rpn_bbox": 0.02012, "loss_cls": 0.07869, "acc": 96.85938, "loss_bbox": 0.12167, "loss": 0.22443, "time": 0.56562}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.002, "memory": 9927, "data_time": 0.01836, "loss_rpn_cls": 0.00272, "loss_rpn_bbox": 0.01696, "loss_cls": 0.08006, "acc": 96.71387, "loss_bbox": 0.13022, "loss": 0.22995, "time": 0.5638}
{"mode": "val", "epoch": 10, "iter": 288, "lr": 0.002, "bbox_mAP": 0.293, "bbox_mAP_50": 0.532, "bbox_mAP_75": 0.263, "bbox_mAP_s": 0.255, "bbox_mAP_m": 0.23, "bbox_mAP_l": 0.39, "bbox_mAP_copypaste": "0.293 0.532 0.263 0.255 0.230 0.390"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 9927, "data_time": 0.06411, "loss_rpn_cls": 0.00266, "loss_rpn_bbox": 0.01925, "loss_cls": 0.07529, "acc": 96.9707, "loss_bbox": 0.12041, "loss": 0.21761, "time": 0.61585}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.002, "memory": 9927, "data_time": 0.01751, "loss_rpn_cls": 0.00251, "loss_rpn_bbox": 0.02065, "loss_cls": 0.07285, "acc": 97.00977, "loss_bbox": 0.12155, "loss": 0.21757, "time": 0.57232}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.002, "memory": 9927, "data_time": 0.0176, "loss_rpn_cls": 0.00172, "loss_rpn_bbox": 0.01286, "loss_cls": 0.05715, "acc": 97.63379, "loss_bbox": 0.09759, "loss": 0.16932, "time": 0.56862}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.002, "memory": 9927, "data_time": 0.01738, "loss_rpn_cls": 0.00225, "loss_rpn_bbox": 0.01565, "loss_cls": 0.06806, "acc": 97.21973, "loss_bbox": 0.10614, "loss": 0.19211, "time": 0.56779}
{"mode": "val", "epoch": 11, "iter": 288, "lr": 0.002, "bbox_mAP": 0.284, "bbox_mAP_50": 0.52, "bbox_mAP_75": 0.265, "bbox_mAP_s": 0.241, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.368, "bbox_mAP_copypaste": "0.284 0.520 0.265 0.241 0.217 0.368"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 9927, "data_time": 0.0647, "loss_rpn_cls": 0.00195, "loss_rpn_bbox": 0.01673, "loss_cls": 0.07141, "acc": 97.1582, "loss_bbox": 0.1164, "loss": 0.2065, "time": 0.6158}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0002, "memory": 9927, "data_time": 0.01727, "loss_rpn_cls": 0.00192, "loss_rpn_bbox": 0.014, "loss_cls": 0.05592, "acc": 97.7666, "loss_bbox": 0.09722, "loss": 0.16905, "time": 0.56801}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0002, "memory": 9927, "data_time": 0.01803, "loss_rpn_cls": 0.0023, "loss_rpn_bbox": 0.01754, "loss_cls": 0.0672, "acc": 97.33496, "loss_bbox": 0.10872, "loss": 0.19577, "time": 0.57015}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.0002, "memory": 9927, "data_time": 0.01697, "loss_rpn_cls": 0.00284, "loss_rpn_bbox": 0.01687, "loss_cls": 0.066, "acc": 97.27246, "loss_bbox": 0.1138, "loss": 0.19952, "time": 0.56716}
{"mode": "val", "epoch": 12, "iter": 288, "lr": 0.0002, "bbox_mAP": 0.276, "bbox_mAP_50": 0.507, "bbox_mAP_75": 0.245, "bbox_mAP_s": 0.246, "bbox_mAP_m": 0.229, "bbox_mAP_l": 0.38, "bbox_mAP_copypaste": "0.276 0.507 0.245 0.246 0.229 0.380"}
