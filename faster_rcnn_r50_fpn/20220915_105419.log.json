{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb401/train4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb401/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb401/val4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb401/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb401/val4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb401/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=6,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/faster_rcnn_r50_fpn'\nauto_resume = False\ngpu_ids = range(0, 4)\n", "seed": 0, "exp_name": "faster_rcnn_r50_fpn.py"}
{"mode": "val", "epoch": 1, "iter": 35, "lr": 0.00098, "bbox_mAP": 0.001, "bbox_mAP_50": 0.004, "bbox_mAP_75": 0.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.002, "bbox_mAP_copypaste": "0.001 0.004 0.000 -1.000 0.000 0.002"}
{"mode": "val", "epoch": 2, "iter": 35, "lr": 0.00198, "bbox_mAP": 0.018, "bbox_mAP_50": 0.047, "bbox_mAP_75": 0.01, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.037, "bbox_mAP_l": 0.019, "bbox_mAP_copypaste": "0.018 0.047 0.010 -1.000 0.037 0.019"}
{"mode": "val", "epoch": 3, "iter": 35, "lr": 0.00298, "bbox_mAP": 0.062, "bbox_mAP_50": 0.134, "bbox_mAP_75": 0.05, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.081, "bbox_mAP_l": 0.066, "bbox_mAP_copypaste": "0.062 0.134 0.050 -1.000 0.081 0.066"}
{"mode": "val", "epoch": 4, "iter": 35, "lr": 0.00398, "bbox_mAP": 0.099, "bbox_mAP_50": 0.236, "bbox_mAP_75": 0.057, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.145, "bbox_mAP_l": 0.111, "bbox_mAP_copypaste": "0.099 0.236 0.057 -1.000 0.145 0.111"}
{"mode": "val", "epoch": 5, "iter": 35, "lr": 0.00498, "bbox_mAP": 0.144, "bbox_mAP_50": 0.304, "bbox_mAP_75": 0.124, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.163, "bbox_mAP_l": 0.174, "bbox_mAP_copypaste": "0.144 0.304 0.124 -1.000 0.163 0.174"}
{"mode": "val", "epoch": 6, "iter": 35, "lr": 0.00597, "bbox_mAP": 0.177, "bbox_mAP_50": 0.366, "bbox_mAP_75": 0.189, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.271, "bbox_mAP_l": 0.189, "bbox_mAP_copypaste": "0.177 0.366 0.189 -1.000 0.271 0.189"}
{"mode": "val", "epoch": 7, "iter": 35, "lr": 0.00697, "bbox_mAP": 0.217, "bbox_mAP_50": 0.383, "bbox_mAP_75": 0.224, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.278, "bbox_mAP_l": 0.234, "bbox_mAP_copypaste": "0.217 0.383 0.224 -1.000 0.278 0.234"}
{"mode": "val", "epoch": 8, "iter": 35, "lr": 0.00797, "bbox_mAP": 0.214, "bbox_mAP_50": 0.399, "bbox_mAP_75": 0.234, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.276, "bbox_mAP_l": 0.24, "bbox_mAP_copypaste": "0.214 0.399 0.234 -1.000 0.276 0.240"}
{"mode": "val", "epoch": 9, "iter": 35, "lr": 0.0009, "bbox_mAP": 0.225, "bbox_mAP_50": 0.407, "bbox_mAP_75": 0.234, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.287, "bbox_mAP_l": 0.25, "bbox_mAP_copypaste": "0.225 0.407 0.234 -1.000 0.287 0.250"}
{"mode": "val", "epoch": 10, "iter": 35, "lr": 0.001, "bbox_mAP": 0.239, "bbox_mAP_50": 0.417, "bbox_mAP_75": 0.296, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.28, "bbox_mAP_l": 0.263, "bbox_mAP_copypaste": "0.239 0.417 0.296 -1.000 0.280 0.263"}
{"mode": "val", "epoch": 11, "iter": 35, "lr": 0.0011, "bbox_mAP": 0.238, "bbox_mAP_50": 0.422, "bbox_mAP_75": 0.287, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.3, "bbox_mAP_l": 0.255, "bbox_mAP_copypaste": "0.238 0.422 0.287 -1.000 0.300 0.255"}
{"mode": "val", "epoch": 12, "iter": 35, "lr": 0.00012, "bbox_mAP": 0.239, "bbox_mAP_50": 0.423, "bbox_mAP_75": 0.29, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.298, "bbox_mAP_l": 0.257, "bbox_mAP_copypaste": "0.239 0.423 0.290 -1.000 0.298 0.257"}
