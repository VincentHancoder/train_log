{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=8,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/faster_rcnn_r50_fpn'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 148463061, "exp_name": "faster_rcnn_r50_fpn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 9926, "data_time": 0.05956, "loss_rpn_cls": 0.07963, "loss_rpn_bbox": 0.03181, "loss_cls": 0.55622, "acc": 87.46191, "loss_bbox": 0.1406, "loss": 0.80826, "time": 0.61968}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 9927, "data_time": 0.01546, "loss_rpn_cls": 0.01412, "loss_rpn_bbox": 0.02843, "loss_cls": 0.21544, "acc": 94.20801, "loss_bbox": 0.2202, "loss": 0.47819, "time": 0.57759}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 9927, "data_time": 0.01673, "loss_rpn_cls": 0.00986, "loss_rpn_bbox": 0.0299, "loss_cls": 0.19078, "acc": 94.05273, "loss_bbox": 0.20744, "loss": 0.43798, "time": 0.57713}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 9927, "data_time": 0.01768, "loss_rpn_cls": 0.01326, "loss_rpn_bbox": 0.02455, "loss_cls": 0.15188, "acc": 95.10449, "loss_bbox": 0.15693, "loss": 0.34662, "time": 0.57521}
{"mode": "val", "epoch": 1, "iter": 288, "lr": 0.00925, "bbox_mAP": 0.146, "bbox_mAP_50": 0.345, "bbox_mAP_75": 0.105, "bbox_mAP_s": 0.081, "bbox_mAP_m": 0.125, "bbox_mAP_l": 0.119, "bbox_mAP_copypaste": "0.146 0.345 0.105 0.081 0.125 0.119"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01125, "memory": 9927, "data_time": 0.06142, "loss_rpn_cls": 0.01151, "loss_rpn_bbox": 0.02854, "loss_cls": 0.14847, "acc": 95.1543, "loss_bbox": 0.16224, "loss": 0.35075, "time": 0.61594}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01325, "memory": 9927, "data_time": 0.01605, "loss_rpn_cls": 0.0096, "loss_rpn_bbox": 0.02668, "loss_cls": 0.16769, "acc": 94.57422, "loss_bbox": 0.1628, "loss": 0.36677, "time": 0.57611}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01524, "memory": 9927, "data_time": 0.0178, "loss_rpn_cls": 0.02451, "loss_rpn_bbox": 0.02669, "loss_cls": 0.12807, "acc": 96.00293, "loss_bbox": 0.13147, "loss": 0.31074, "time": 0.57541}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.01724, "memory": 9927, "data_time": 0.01831, "loss_rpn_cls": 0.02024, "loss_rpn_bbox": 0.0277, "loss_cls": 0.12955, "acc": 95.67871, "loss_bbox": 0.13774, "loss": 0.31522, "time": 0.58359}
{"mode": "val", "epoch": 2, "iter": 288, "lr": 0.01852, "bbox_mAP": 0.151, "bbox_mAP_50": 0.319, "bbox_mAP_75": 0.127, "bbox_mAP_s": 0.129, "bbox_mAP_m": 0.138, "bbox_mAP_l": 0.111, "bbox_mAP_copypaste": "0.151 0.319 0.127 0.129 0.138 0.111"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06278, "loss_rpn_cls": 0.01351, "loss_rpn_bbox": 0.02969, "loss_cls": 0.12197, "acc": 95.90723, "loss_bbox": 0.15175, "loss": 0.31691, "time": 0.62073}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01819, "loss_rpn_cls": 0.01086, "loss_rpn_bbox": 0.03067, "loss_cls": 0.13319, "acc": 95.55176, "loss_bbox": 0.14484, "loss": 0.31956, "time": 0.58177}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01842, "loss_rpn_cls": 0.01187, "loss_rpn_bbox": 0.02788, "loss_cls": 0.14262, "acc": 95.31055, "loss_bbox": 0.14075, "loss": 0.32312, "time": 0.58929}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01788, "loss_rpn_cls": 0.01344, "loss_rpn_bbox": 0.02588, "loss_cls": 0.14099, "acc": 95.28613, "loss_bbox": 0.14826, "loss": 0.32856, "time": 0.5754}
{"mode": "val", "epoch": 3, "iter": 288, "lr": 0.02, "bbox_mAP": 0.252, "bbox_mAP_50": 0.475, "bbox_mAP_75": 0.257, "bbox_mAP_s": 0.15, "bbox_mAP_m": 0.182, "bbox_mAP_l": 0.233, "bbox_mAP_copypaste": "0.252 0.475 0.257 0.150 0.182 0.233"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.0634, "loss_rpn_cls": 0.00828, "loss_rpn_bbox": 0.02831, "loss_cls": 0.13098, "acc": 95.36523, "loss_bbox": 0.14927, "loss": 0.31683, "time": 0.62475}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01859, "loss_rpn_cls": 0.0086, "loss_rpn_bbox": 0.02491, "loss_cls": 0.11792, "acc": 95.88184, "loss_bbox": 0.13697, "loss": 0.28841, "time": 0.57229}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01922, "loss_rpn_cls": 0.00782, "loss_rpn_bbox": 0.02714, "loss_cls": 0.12763, "acc": 95.27832, "loss_bbox": 0.14797, "loss": 0.31055, "time": 0.57457}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01875, "loss_rpn_cls": 0.0083, "loss_rpn_bbox": 0.02243, "loss_cls": 0.11901, "acc": 95.91504, "loss_bbox": 0.13646, "loss": 0.28621, "time": 0.57433}
{"mode": "val", "epoch": 4, "iter": 288, "lr": 0.02, "bbox_mAP": 0.233, "bbox_mAP_50": 0.505, "bbox_mAP_75": 0.215, "bbox_mAP_s": 0.18, "bbox_mAP_m": 0.226, "bbox_mAP_l": 0.224, "bbox_mAP_copypaste": "0.233 0.505 0.215 0.180 0.226 0.224"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06283, "loss_rpn_cls": 0.0057, "loss_rpn_bbox": 0.02698, "loss_cls": 0.11563, "acc": 95.79395, "loss_bbox": 0.14184, "loss": 0.29014, "time": 0.61543}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01803, "loss_rpn_cls": 0.00991, "loss_rpn_bbox": 0.02705, "loss_cls": 0.12285, "acc": 95.59375, "loss_bbox": 0.14714, "loss": 0.30695, "time": 0.56669}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01805, "loss_rpn_cls": 0.00608, "loss_rpn_bbox": 0.02539, "loss_cls": 0.10592, "acc": 96.12305, "loss_bbox": 0.12834, "loss": 0.26572, "time": 0.56744}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01861, "loss_rpn_cls": 0.00872, "loss_rpn_bbox": 0.02387, "loss_cls": 0.12586, "acc": 95.6416, "loss_bbox": 0.14308, "loss": 0.30152, "time": 0.57181}
{"mode": "val", "epoch": 5, "iter": 288, "lr": 0.02, "bbox_mAP": 0.27, "bbox_mAP_50": 0.499, "bbox_mAP_75": 0.239, "bbox_mAP_s": 0.265, "bbox_mAP_m": 0.223, "bbox_mAP_l": 0.235, "bbox_mAP_copypaste": "0.270 0.499 0.239 0.265 0.223 0.235"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06155, "loss_rpn_cls": 0.00529, "loss_rpn_bbox": 0.02395, "loss_cls": 0.11547, "acc": 95.60645, "loss_bbox": 0.15248, "loss": 0.29719, "time": 0.61341}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01771, "loss_rpn_cls": 0.00495, "loss_rpn_bbox": 0.02431, "loss_cls": 0.10738, "acc": 96.05762, "loss_bbox": 0.13891, "loss": 0.27555, "time": 0.57189}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.018, "loss_rpn_cls": 0.00481, "loss_rpn_bbox": 0.02263, "loss_cls": 0.10944, "acc": 95.87598, "loss_bbox": 0.1434, "loss": 0.28028, "time": 0.57065}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01802, "loss_rpn_cls": 0.00498, "loss_rpn_bbox": 0.02567, "loss_cls": 0.11151, "acc": 95.92285, "loss_bbox": 0.13985, "loss": 0.28201, "time": 0.56912}
{"mode": "val", "epoch": 6, "iter": 288, "lr": 0.02, "bbox_mAP": 0.267, "bbox_mAP_50": 0.542, "bbox_mAP_75": 0.228, "bbox_mAP_s": 0.204, "bbox_mAP_m": 0.241, "bbox_mAP_l": 0.277, "bbox_mAP_copypaste": "0.267 0.542 0.228 0.204 0.241 0.277"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06303, "loss_rpn_cls": 0.00557, "loss_rpn_bbox": 0.02213, "loss_cls": 0.10168, "acc": 96.01172, "loss_bbox": 0.13807, "loss": 0.26745, "time": 0.61464}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01737, "loss_rpn_cls": 0.00467, "loss_rpn_bbox": 0.024, "loss_cls": 0.1105, "acc": 95.76172, "loss_bbox": 0.14886, "loss": 0.28802, "time": 0.56318}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.0177, "loss_rpn_cls": 0.00493, "loss_rpn_bbox": 0.02649, "loss_cls": 0.10758, "acc": 95.89062, "loss_bbox": 0.13885, "loss": 0.27785, "time": 0.56738}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01696, "loss_rpn_cls": 0.00485, "loss_rpn_bbox": 0.01996, "loss_cls": 0.09685, "acc": 96.29199, "loss_bbox": 0.13682, "loss": 0.25848, "time": 0.56799}
{"mode": "val", "epoch": 7, "iter": 288, "lr": 0.02, "bbox_mAP": 0.238, "bbox_mAP_50": 0.455, "bbox_mAP_75": 0.213, "bbox_mAP_s": 0.333, "bbox_mAP_m": 0.243, "bbox_mAP_l": 0.21, "bbox_mAP_copypaste": "0.238 0.455 0.213 0.333 0.243 0.210"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06156, "loss_rpn_cls": 0.00457, "loss_rpn_bbox": 0.02092, "loss_cls": 0.08512, "acc": 96.63086, "loss_bbox": 0.13104, "loss": 0.24165, "time": 0.61643}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01745, "loss_rpn_cls": 0.00468, "loss_rpn_bbox": 0.02223, "loss_cls": 0.09078, "acc": 96.41895, "loss_bbox": 0.14028, "loss": 0.25797, "time": 0.57359}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01811, "loss_rpn_cls": 0.0043, "loss_rpn_bbox": 0.02304, "loss_cls": 0.09964, "acc": 96.12695, "loss_bbox": 0.13933, "loss": 0.26631, "time": 0.56985}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01777, "loss_rpn_cls": 0.00414, "loss_rpn_bbox": 0.02237, "loss_cls": 0.09593, "acc": 96.1582, "loss_bbox": 0.14607, "loss": 0.26852, "time": 0.56303}
{"mode": "val", "epoch": 8, "iter": 288, "lr": 0.02, "bbox_mAP": 0.308, "bbox_mAP_50": 0.602, "bbox_mAP_75": 0.289, "bbox_mAP_s": 0.262, "bbox_mAP_m": 0.25, "bbox_mAP_l": 0.308, "bbox_mAP_copypaste": "0.308 0.602 0.289 0.262 0.250 0.308"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 9927, "data_time": 0.06027, "loss_rpn_cls": 0.00366, "loss_rpn_bbox": 0.0205, "loss_cls": 0.08743, "acc": 96.59277, "loss_bbox": 0.13449, "loss": 0.24608, "time": 0.61753}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.002, "memory": 9927, "data_time": 0.0166, "loss_rpn_cls": 0.00326, "loss_rpn_bbox": 0.01965, "loss_cls": 0.08067, "acc": 96.69922, "loss_bbox": 0.12439, "loss": 0.22797, "time": 0.56969}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.002, "memory": 9927, "data_time": 0.01691, "loss_rpn_cls": 0.00373, "loss_rpn_bbox": 0.01886, "loss_cls": 0.08089, "acc": 96.64844, "loss_bbox": 0.12444, "loss": 0.22792, "time": 0.56727}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.002, "memory": 9927, "data_time": 0.01756, "loss_rpn_cls": 0.00345, "loss_rpn_bbox": 0.01924, "loss_cls": 0.08298, "acc": 96.63574, "loss_bbox": 0.13122, "loss": 0.2369, "time": 0.57635}
{"mode": "val", "epoch": 9, "iter": 288, "lr": 0.002, "bbox_mAP": 0.382, "bbox_mAP_50": 0.651, "bbox_mAP_75": 0.369, "bbox_mAP_s": 0.298, "bbox_mAP_m": 0.294, "bbox_mAP_l": 0.344, "bbox_mAP_copypaste": "0.382 0.651 0.369 0.298 0.294 0.344"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 9927, "data_time": 0.06254, "loss_rpn_cls": 0.0026, "loss_rpn_bbox": 0.01908, "loss_cls": 0.08095, "acc": 96.68652, "loss_bbox": 0.13363, "loss": 0.23626, "time": 0.61682}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.002, "memory": 9927, "data_time": 0.01782, "loss_rpn_cls": 0.0022, "loss_rpn_bbox": 0.01895, "loss_cls": 0.07139, "acc": 97.11621, "loss_bbox": 0.1193, "loss": 0.21183, "time": 0.57018}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.002, "memory": 9927, "data_time": 0.01784, "loss_rpn_cls": 0.00253, "loss_rpn_bbox": 0.01547, "loss_cls": 0.06938, "acc": 97.2168, "loss_bbox": 0.11172, "loss": 0.1991, "time": 0.56952}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.002, "memory": 9927, "data_time": 0.01899, "loss_rpn_cls": 0.00238, "loss_rpn_bbox": 0.01841, "loss_cls": 0.0737, "acc": 97.02539, "loss_bbox": 0.11918, "loss": 0.21367, "time": 0.57335}
{"mode": "val", "epoch": 10, "iter": 288, "lr": 0.002, "bbox_mAP": 0.38, "bbox_mAP_50": 0.654, "bbox_mAP_75": 0.364, "bbox_mAP_s": 0.383, "bbox_mAP_m": 0.294, "bbox_mAP_l": 0.341, "bbox_mAP_copypaste": "0.380 0.654 0.364 0.383 0.294 0.341"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 9927, "data_time": 0.06309, "loss_rpn_cls": 0.00203, "loss_rpn_bbox": 0.01734, "loss_cls": 0.06986, "acc": 97.14551, "loss_bbox": 0.11511, "loss": 0.20434, "time": 0.61982}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.002, "memory": 9927, "data_time": 0.01829, "loss_rpn_cls": 0.00301, "loss_rpn_bbox": 0.01924, "loss_cls": 0.07457, "acc": 96.94434, "loss_bbox": 0.12657, "loss": 0.2234, "time": 0.57367}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.002, "memory": 9927, "data_time": 0.01863, "loss_rpn_cls": 0.00192, "loss_rpn_bbox": 0.01703, "loss_cls": 0.0686, "acc": 97.18164, "loss_bbox": 0.12017, "loss": 0.20772, "time": 0.57434}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.002, "memory": 9927, "data_time": 0.01777, "loss_rpn_cls": 0.00245, "loss_rpn_bbox": 0.01657, "loss_cls": 0.0748, "acc": 96.92676, "loss_bbox": 0.1199, "loss": 0.21373, "time": 0.57032}
{"mode": "val", "epoch": 11, "iter": 288, "lr": 0.002, "bbox_mAP": 0.38, "bbox_mAP_50": 0.662, "bbox_mAP_75": 0.371, "bbox_mAP_s": 0.34, "bbox_mAP_m": 0.295, "bbox_mAP_l": 0.338, "bbox_mAP_copypaste": "0.380 0.662 0.371 0.340 0.295 0.338"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 9927, "data_time": 0.06389, "loss_rpn_cls": 0.00201, "loss_rpn_bbox": 0.01727, "loss_cls": 0.06882, "acc": 97.16699, "loss_bbox": 0.1171, "loss": 0.2052, "time": 0.61538}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0002, "memory": 9927, "data_time": 0.01727, "loss_rpn_cls": 0.00301, "loss_rpn_bbox": 0.01852, "loss_cls": 0.06746, "acc": 97.11426, "loss_bbox": 0.11651, "loss": 0.2055, "time": 0.56856}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0002, "memory": 9927, "data_time": 0.01757, "loss_rpn_cls": 0.00189, "loss_rpn_bbox": 0.01736, "loss_cls": 0.07243, "acc": 97.03711, "loss_bbox": 0.12003, "loss": 0.21171, "time": 0.57077}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.0002, "memory": 9927, "data_time": 0.01802, "loss_rpn_cls": 0.0021, "loss_rpn_bbox": 0.01555, "loss_cls": 0.0637, "acc": 97.37402, "loss_bbox": 0.10833, "loss": 0.18968, "time": 0.57135}
{"mode": "val", "epoch": 12, "iter": 288, "lr": 0.0002, "bbox_mAP": 0.384, "bbox_mAP_50": 0.665, "bbox_mAP_75": 0.366, "bbox_mAP_s": 0.378, "bbox_mAP_m": 0.298, "bbox_mAP_l": 0.344, "bbox_mAP_copypaste": "0.384 0.665 0.366 0.378 0.298 0.344"}
