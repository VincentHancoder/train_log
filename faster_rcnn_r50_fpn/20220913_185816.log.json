{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train3.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val3.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val3.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=8,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/faster_rcnn_r50_fpn'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 2086416907, "exp_name": "faster_rcnn_r50_fpn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 9927, "data_time": 0.06296, "loss_rpn_cls": 0.07757, "loss_rpn_bbox": 0.02652, "loss_cls": 0.5492, "acc": 87.98242, "loss_bbox": 0.15286, "loss": 0.80615, "time": 0.61906}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 9927, "data_time": 0.0209, "loss_rpn_cls": 0.02144, "loss_rpn_bbox": 0.02928, "loss_cls": 0.20192, "acc": 94.53906, "loss_bbox": 0.20918, "loss": 0.46181, "time": 0.57617}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 9927, "data_time": 0.01993, "loss_rpn_cls": 0.01297, "loss_rpn_bbox": 0.02754, "loss_cls": 0.17805, "acc": 94.40625, "loss_bbox": 0.19183, "loss": 0.41038, "time": 0.57396}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 9927, "data_time": 0.02133, "loss_rpn_cls": 0.01142, "loss_rpn_bbox": 0.0268, "loss_cls": 0.15838, "acc": 95.08887, "loss_bbox": 0.16022, "loss": 0.35682, "time": 0.57776}
{"mode": "val", "epoch": 1, "iter": 288, "lr": 0.00921, "bbox_mAP": 0.159, "bbox_mAP_50": 0.289, "bbox_mAP_75": 0.158, "bbox_mAP_s": 0.109, "bbox_mAP_m": 0.061, "bbox_mAP_l": 0.194, "bbox_mAP_copypaste": "0.159 0.289 0.158 0.109 0.061 0.194"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01121, "memory": 9927, "data_time": 0.06357, "loss_rpn_cls": 0.01543, "loss_rpn_bbox": 0.02795, "loss_cls": 0.14392, "acc": 95.42969, "loss_bbox": 0.15066, "loss": 0.33797, "time": 0.61503}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01321, "memory": 9927, "data_time": 0.01879, "loss_rpn_cls": 0.01776, "loss_rpn_bbox": 0.02572, "loss_cls": 0.14879, "acc": 95.25488, "loss_bbox": 0.14657, "loss": 0.33884, "time": 0.57931}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0152, "memory": 9927, "data_time": 0.01813, "loss_rpn_cls": 0.01282, "loss_rpn_bbox": 0.02894, "loss_cls": 0.15053, "acc": 95.20117, "loss_bbox": 0.15481, "loss": 0.34709, "time": 0.58019}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0172, "memory": 9927, "data_time": 0.01809, "loss_rpn_cls": 0.00986, "loss_rpn_bbox": 0.02909, "loss_cls": 0.13548, "acc": 95.53223, "loss_bbox": 0.13863, "loss": 0.31306, "time": 0.57439}
{"mode": "val", "epoch": 2, "iter": 288, "lr": 0.01844, "bbox_mAP": 0.166, "bbox_mAP_50": 0.354, "bbox_mAP_75": 0.152, "bbox_mAP_s": 0.065, "bbox_mAP_m": 0.098, "bbox_mAP_l": 0.203, "bbox_mAP_copypaste": "0.166 0.354 0.152 0.065 0.098 0.203"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06381, "loss_rpn_cls": 0.01313, "loss_rpn_bbox": 0.02964, "loss_cls": 0.14017, "acc": 95.38965, "loss_bbox": 0.1443, "loss": 0.32724, "time": 0.62264}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01805, "loss_rpn_cls": 0.01964, "loss_rpn_bbox": 0.02943, "loss_cls": 0.13064, "acc": 95.81445, "loss_bbox": 0.13517, "loss": 0.31487, "time": 0.57381}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01784, "loss_rpn_cls": 0.01241, "loss_rpn_bbox": 0.02781, "loss_cls": 0.13533, "acc": 95.37012, "loss_bbox": 0.14957, "loss": 0.32513, "time": 0.57629}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01754, "loss_rpn_cls": 0.01861, "loss_rpn_bbox": 0.02658, "loss_cls": 0.12306, "acc": 96.08105, "loss_bbox": 0.12798, "loss": 0.29624, "time": 0.58011}
{"mode": "val", "epoch": 3, "iter": 288, "lr": 0.02, "bbox_mAP": 0.177, "bbox_mAP_50": 0.355, "bbox_mAP_75": 0.15, "bbox_mAP_s": 0.199, "bbox_mAP_m": 0.122, "bbox_mAP_l": 0.192, "bbox_mAP_copypaste": "0.177 0.355 0.150 0.199 0.122 0.192"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06335, "loss_rpn_cls": 0.01348, "loss_rpn_bbox": 0.02906, "loss_cls": 0.12905, "acc": 95.37109, "loss_bbox": 0.14989, "loss": 0.32147, "time": 0.62232}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01754, "loss_rpn_cls": 0.01005, "loss_rpn_bbox": 0.02641, "loss_cls": 0.12799, "acc": 95.57715, "loss_bbox": 0.13645, "loss": 0.3009, "time": 0.58303}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01769, "loss_rpn_cls": 0.01386, "loss_rpn_bbox": 0.02211, "loss_cls": 0.11033, "acc": 96.2959, "loss_bbox": 0.11905, "loss": 0.26535, "time": 0.57505}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01825, "loss_rpn_cls": 0.01237, "loss_rpn_bbox": 0.02848, "loss_cls": 0.11856, "acc": 95.87598, "loss_bbox": 0.13334, "loss": 0.29275, "time": 0.57862}
{"mode": "val", "epoch": 4, "iter": 288, "lr": 0.02, "bbox_mAP": 0.185, "bbox_mAP_50": 0.414, "bbox_mAP_75": 0.131, "bbox_mAP_s": 0.188, "bbox_mAP_m": 0.136, "bbox_mAP_l": 0.186, "bbox_mAP_copypaste": "0.185 0.414 0.131 0.188 0.136 0.186"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.065, "loss_rpn_cls": 0.007, "loss_rpn_bbox": 0.02412, "loss_cls": 0.12246, "acc": 95.5791, "loss_bbox": 0.14717, "loss": 0.30075, "time": 0.62035}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01915, "loss_rpn_cls": 0.0067, "loss_rpn_bbox": 0.0249, "loss_cls": 0.11189, "acc": 95.87207, "loss_bbox": 0.14085, "loss": 0.28434, "time": 0.58129}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01858, "loss_rpn_cls": 0.0084, "loss_rpn_bbox": 0.02472, "loss_cls": 0.11859, "acc": 95.67188, "loss_bbox": 0.14739, "loss": 0.2991, "time": 0.57115}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01889, "loss_rpn_cls": 0.00877, "loss_rpn_bbox": 0.02469, "loss_cls": 0.1161, "acc": 95.95117, "loss_bbox": 0.13177, "loss": 0.28134, "time": 0.57375}
{"mode": "val", "epoch": 5, "iter": 288, "lr": 0.02, "bbox_mAP": 0.204, "bbox_mAP_50": 0.414, "bbox_mAP_75": 0.17, "bbox_mAP_s": 0.146, "bbox_mAP_m": 0.132, "bbox_mAP_l": 0.21, "bbox_mAP_copypaste": "0.204 0.414 0.170 0.146 0.132 0.210"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.0637, "loss_rpn_cls": 0.00866, "loss_rpn_bbox": 0.02693, "loss_cls": 0.11386, "acc": 95.66602, "loss_bbox": 0.14613, "loss": 0.29559, "time": 0.61747}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01747, "loss_rpn_cls": 0.00594, "loss_rpn_bbox": 0.02389, "loss_cls": 0.10424, "acc": 96.12207, "loss_bbox": 0.12553, "loss": 0.2596, "time": 0.56749}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01748, "loss_rpn_cls": 0.00892, "loss_rpn_bbox": 0.02118, "loss_cls": 0.10936, "acc": 95.85645, "loss_bbox": 0.14306, "loss": 0.28252, "time": 0.57295}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01698, "loss_rpn_cls": 0.00861, "loss_rpn_bbox": 0.02602, "loss_cls": 0.13571, "acc": 95.51855, "loss_bbox": 0.13947, "loss": 0.30981, "time": 0.5707}
{"mode": "val", "epoch": 6, "iter": 288, "lr": 0.02, "bbox_mAP": 0.221, "bbox_mAP_50": 0.468, "bbox_mAP_75": 0.182, "bbox_mAP_s": 0.236, "bbox_mAP_m": 0.143, "bbox_mAP_l": 0.236, "bbox_mAP_copypaste": "0.221 0.468 0.182 0.236 0.143 0.236"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06696, "loss_rpn_cls": 0.00514, "loss_rpn_bbox": 0.02533, "loss_cls": 0.10977, "acc": 95.9209, "loss_bbox": 0.14058, "loss": 0.28081, "time": 0.61629}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.02049, "loss_rpn_cls": 0.00624, "loss_rpn_bbox": 0.02463, "loss_cls": 0.11594, "acc": 95.72559, "loss_bbox": 0.14703, "loss": 0.29384, "time": 0.57587}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01991, "loss_rpn_cls": 0.00535, "loss_rpn_bbox": 0.02284, "loss_cls": 0.09848, "acc": 96.23438, "loss_bbox": 0.13078, "loss": 0.25744, "time": 0.57344}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.02351, "loss_rpn_cls": 0.00603, "loss_rpn_bbox": 0.02385, "loss_cls": 0.11025, "acc": 95.80176, "loss_bbox": 0.1408, "loss": 0.28093, "time": 0.58324}
{"mode": "val", "epoch": 7, "iter": 288, "lr": 0.02, "bbox_mAP": 0.228, "bbox_mAP_50": 0.458, "bbox_mAP_75": 0.193, "bbox_mAP_s": 0.208, "bbox_mAP_m": 0.156, "bbox_mAP_l": 0.266, "bbox_mAP_copypaste": "0.228 0.458 0.193 0.208 0.156 0.266"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.06271, "loss_rpn_cls": 0.00447, "loss_rpn_bbox": 0.0233, "loss_cls": 0.09873, "acc": 96.22168, "loss_bbox": 0.13739, "loss": 0.26389, "time": 0.61275}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01738, "loss_rpn_cls": 0.00496, "loss_rpn_bbox": 0.01851, "loss_cls": 0.09602, "acc": 96.50391, "loss_bbox": 0.12942, "loss": 0.24892, "time": 0.56944}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01721, "loss_rpn_cls": 0.00547, "loss_rpn_bbox": 0.02695, "loss_cls": 0.10507, "acc": 95.89453, "loss_bbox": 0.14802, "loss": 0.28552, "time": 0.56877}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01744, "loss_rpn_cls": 0.00491, "loss_rpn_bbox": 0.02221, "loss_cls": 0.10613, "acc": 96.02441, "loss_bbox": 0.13713, "loss": 0.27037, "time": 0.57294}
{"mode": "val", "epoch": 8, "iter": 288, "lr": 0.02, "bbox_mAP": 0.273, "bbox_mAP_50": 0.506, "bbox_mAP_75": 0.254, "bbox_mAP_s": 0.195, "bbox_mAP_m": 0.222, "bbox_mAP_l": 0.275, "bbox_mAP_copypaste": "0.273 0.506 0.254 0.195 0.222 0.275"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 9927, "data_time": 0.06593, "loss_rpn_cls": 0.0035, "loss_rpn_bbox": 0.02029, "loss_cls": 0.08711, "acc": 96.53906, "loss_bbox": 0.12584, "loss": 0.23675, "time": 0.62025}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.002, "memory": 9927, "data_time": 0.0209, "loss_rpn_cls": 0.00327, "loss_rpn_bbox": 0.02195, "loss_cls": 0.0786, "acc": 96.89258, "loss_bbox": 0.12588, "loss": 0.2297, "time": 0.5738}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.002, "memory": 9927, "data_time": 0.02111, "loss_rpn_cls": 0.00372, "loss_rpn_bbox": 0.01588, "loss_cls": 0.07616, "acc": 96.97949, "loss_bbox": 0.11884, "loss": 0.21459, "time": 0.57186}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.002, "memory": 9927, "data_time": 0.02072, "loss_rpn_cls": 0.0036, "loss_rpn_bbox": 0.02157, "loss_cls": 0.07965, "acc": 96.71973, "loss_bbox": 0.1244, "loss": 0.22921, "time": 0.5706}
{"mode": "val", "epoch": 9, "iter": 288, "lr": 0.002, "bbox_mAP": 0.277, "bbox_mAP_50": 0.515, "bbox_mAP_75": 0.248, "bbox_mAP_s": 0.215, "bbox_mAP_m": 0.212, "bbox_mAP_l": 0.309, "bbox_mAP_copypaste": "0.277 0.515 0.248 0.215 0.212 0.309"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 9927, "data_time": 0.06683, "loss_rpn_cls": 0.00291, "loss_rpn_bbox": 0.01542, "loss_cls": 0.06676, "acc": 97.29395, "loss_bbox": 0.11406, "loss": 0.19914, "time": 0.62535}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.002, "memory": 9927, "data_time": 0.01949, "loss_rpn_cls": 0.00292, "loss_rpn_bbox": 0.0178, "loss_cls": 0.08124, "acc": 96.75586, "loss_bbox": 0.12549, "loss": 0.22745, "time": 0.58021}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.002, "memory": 9927, "data_time": 0.01916, "loss_rpn_cls": 0.00324, "loss_rpn_bbox": 0.01727, "loss_cls": 0.08085, "acc": 96.81152, "loss_bbox": 0.13034, "loss": 0.23169, "time": 0.57418}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.002, "memory": 9927, "data_time": 0.01917, "loss_rpn_cls": 0.00328, "loss_rpn_bbox": 0.01879, "loss_cls": 0.07185, "acc": 97.05762, "loss_bbox": 0.11467, "loss": 0.20858, "time": 0.57017}
{"mode": "val", "epoch": 10, "iter": 288, "lr": 0.002, "bbox_mAP": 0.275, "bbox_mAP_50": 0.522, "bbox_mAP_75": 0.249, "bbox_mAP_s": 0.207, "bbox_mAP_m": 0.204, "bbox_mAP_l": 0.314, "bbox_mAP_copypaste": "0.275 0.522 0.249 0.207 0.204 0.314"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 9927, "data_time": 0.06377, "loss_rpn_cls": 0.0028, "loss_rpn_bbox": 0.01786, "loss_cls": 0.06797, "acc": 97.21484, "loss_bbox": 0.11271, "loss": 0.20133, "time": 0.61895}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.002, "memory": 9927, "data_time": 0.01759, "loss_rpn_cls": 0.00186, "loss_rpn_bbox": 0.01608, "loss_cls": 0.07062, "acc": 97.17871, "loss_bbox": 0.11152, "loss": 0.20007, "time": 0.5728}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.002, "memory": 9927, "data_time": 0.01805, "loss_rpn_cls": 0.00251, "loss_rpn_bbox": 0.01725, "loss_cls": 0.07141, "acc": 97.02148, "loss_bbox": 0.11572, "loss": 0.20689, "time": 0.57682}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.002, "memory": 9927, "data_time": 0.01858, "loss_rpn_cls": 0.00221, "loss_rpn_bbox": 0.01836, "loss_cls": 0.0768, "acc": 96.93555, "loss_bbox": 0.12583, "loss": 0.2232, "time": 0.57358}
{"mode": "val", "epoch": 11, "iter": 288, "lr": 0.002, "bbox_mAP": 0.296, "bbox_mAP_50": 0.555, "bbox_mAP_75": 0.268, "bbox_mAP_s": 0.216, "bbox_mAP_m": 0.222, "bbox_mAP_l": 0.316, "bbox_mAP_copypaste": "0.296 0.555 0.268 0.216 0.222 0.316"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 9927, "data_time": 0.06489, "loss_rpn_cls": 0.00287, "loss_rpn_bbox": 0.02024, "loss_cls": 0.07115, "acc": 97.02832, "loss_bbox": 0.12047, "loss": 0.21473, "time": 0.61816}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0002, "memory": 9927, "data_time": 0.01681, "loss_rpn_cls": 0.00274, "loss_rpn_bbox": 0.01517, "loss_cls": 0.06456, "acc": 97.42773, "loss_bbox": 0.10884, "loss": 0.19131, "time": 0.57253}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0002, "memory": 9927, "data_time": 0.01584, "loss_rpn_cls": 0.00244, "loss_rpn_bbox": 0.01685, "loss_cls": 0.07271, "acc": 97.19043, "loss_bbox": 0.11294, "loss": 0.20494, "time": 0.57369}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.0002, "memory": 9927, "data_time": 0.01568, "loss_rpn_cls": 0.00233, "loss_rpn_bbox": 0.0166, "loss_cls": 0.07037, "acc": 97.08496, "loss_bbox": 0.11312, "loss": 0.20243, "time": 0.57148}
{"mode": "val", "epoch": 12, "iter": 288, "lr": 0.0002, "bbox_mAP": 0.295, "bbox_mAP_50": 0.554, "bbox_mAP_75": 0.26, "bbox_mAP_s": 0.21, "bbox_mAP_m": 0.221, "bbox_mAP_l": 0.312, "bbox_mAP_copypaste": "0.295 0.554 0.260 0.210 0.221 0.312"}
