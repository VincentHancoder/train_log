{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/train1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/val1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/val1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=8,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/faster_rcnn_r50_fpn'\nauto_resume = False\ngpu_ids = range(0, 4)\n", "seed": 0, "exp_name": "faster_rcnn_r50_fpn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 10086, "data_time": 0.06144, "loss_rpn_cls": 0.08877, "loss_rpn_bbox": 0.02697, "loss_cls": 0.52022, "acc": 91.50342, "loss_bbox": 0.1323, "loss": 0.76826, "time": 0.64771}
{"mode": "val", "epoch": 1, "iter": 77, "lr": 0.00214, "bbox_mAP": 0.078, "bbox_mAP_50": 0.123, "bbox_mAP_75": 0.097, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.019, "bbox_mAP_l": 0.091, "bbox_mAP_copypaste": "0.078 0.123 0.097 0.000 0.019 0.091"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00414, "memory": 10086, "data_time": 0.06101, "loss_rpn_cls": 0.01385, "loss_rpn_bbox": 0.02302, "loss_cls": 0.1743, "acc": 95.29663, "loss_bbox": 0.17792, "loss": 0.38909, "time": 0.64483}
{"mode": "val", "epoch": 2, "iter": 77, "lr": 0.0043, "bbox_mAP": 0.126, "bbox_mAP_50": 0.231, "bbox_mAP_75": 0.123, "bbox_mAP_s": 0.011, "bbox_mAP_m": 0.055, "bbox_mAP_l": 0.134, "bbox_mAP_copypaste": "0.126 0.231 0.123 0.011 0.055 0.134"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00629, "memory": 10086, "data_time": 0.06173, "loss_rpn_cls": 0.01034, "loss_rpn_bbox": 0.02204, "loss_cls": 0.132, "acc": 95.95142, "loss_bbox": 0.14822, "loss": 0.31261, "time": 0.64551}
{"mode": "val", "epoch": 3, "iter": 77, "lr": 0.00645, "bbox_mAP": 0.185, "bbox_mAP_50": 0.312, "bbox_mAP_75": 0.195, "bbox_mAP_s": 0.025, "bbox_mAP_m": 0.08, "bbox_mAP_l": 0.237, "bbox_mAP_copypaste": "0.185 0.312 0.195 0.025 0.080 0.237"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00845, "memory": 10086, "data_time": 0.06073, "loss_rpn_cls": 0.0069, "loss_rpn_bbox": 0.02125, "loss_cls": 0.11455, "acc": 96.19019, "loss_bbox": 0.12843, "loss": 0.27113, "time": 0.64579}
{"mode": "val", "epoch": 4, "iter": 77, "lr": 0.00861, "bbox_mAP": 0.203, "bbox_mAP_50": 0.349, "bbox_mAP_75": 0.206, "bbox_mAP_s": 0.043, "bbox_mAP_m": 0.121, "bbox_mAP_l": 0.252, "bbox_mAP_copypaste": "0.203 0.349 0.206 0.043 0.121 0.252"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.01061, "memory": 10086, "data_time": 0.06159, "loss_rpn_cls": 0.00637, "loss_rpn_bbox": 0.01997, "loss_cls": 0.10715, "acc": 96.28516, "loss_bbox": 0.12346, "loss": 0.25694, "time": 0.64585}
{"mode": "val", "epoch": 5, "iter": 77, "lr": 0.01077, "bbox_mAP": 0.209, "bbox_mAP_50": 0.389, "bbox_mAP_75": 0.189, "bbox_mAP_s": 0.051, "bbox_mAP_m": 0.113, "bbox_mAP_l": 0.269, "bbox_mAP_copypaste": "0.209 0.389 0.189 0.051 0.113 0.269"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01277, "memory": 10086, "data_time": 0.06175, "loss_rpn_cls": 0.0065, "loss_rpn_bbox": 0.02055, "loss_cls": 0.09649, "acc": 96.55957, "loss_bbox": 0.11508, "loss": 0.23863, "time": 0.64562}
{"mode": "val", "epoch": 6, "iter": 77, "lr": 0.01293, "bbox_mAP": 0.238, "bbox_mAP_50": 0.45, "bbox_mAP_75": 0.21, "bbox_mAP_s": 0.096, "bbox_mAP_m": 0.124, "bbox_mAP_l": 0.324, "bbox_mAP_copypaste": "0.238 0.450 0.210 0.096 0.124 0.324"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01493, "memory": 10086, "data_time": 0.06294, "loss_rpn_cls": 0.00498, "loss_rpn_bbox": 0.01892, "loss_cls": 0.08895, "acc": 96.65723, "loss_bbox": 0.11261, "loss": 0.22546, "time": 0.64631}
{"mode": "val", "epoch": 7, "iter": 77, "lr": 0.01508, "bbox_mAP": 0.239, "bbox_mAP_50": 0.448, "bbox_mAP_75": 0.203, "bbox_mAP_s": 0.091, "bbox_mAP_m": 0.113, "bbox_mAP_l": 0.311, "bbox_mAP_copypaste": "0.239 0.448 0.203 0.091 0.113 0.311"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01708, "memory": 10086, "data_time": 0.06073, "loss_rpn_cls": 0.00346, "loss_rpn_bbox": 0.01888, "loss_cls": 0.08591, "acc": 96.71777, "loss_bbox": 0.11124, "loss": 0.2195, "time": 0.64805}
{"mode": "val", "epoch": 8, "iter": 77, "lr": 0.01724, "bbox_mAP": 0.249, "bbox_mAP_50": 0.455, "bbox_mAP_75": 0.227, "bbox_mAP_s": 0.103, "bbox_mAP_m": 0.122, "bbox_mAP_l": 0.353, "bbox_mAP_copypaste": "0.249 0.455 0.227 0.103 0.122 0.353"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.00192, "memory": 10086, "data_time": 0.06203, "loss_rpn_cls": 0.00334, "loss_rpn_bbox": 0.01659, "loss_cls": 0.07255, "acc": 97.13721, "loss_bbox": 0.1026, "loss": 0.19508, "time": 0.6467}
{"mode": "val", "epoch": 9, "iter": 77, "lr": 0.00194, "bbox_mAP": 0.267, "bbox_mAP_50": 0.51, "bbox_mAP_75": 0.236, "bbox_mAP_s": 0.109, "bbox_mAP_m": 0.138, "bbox_mAP_l": 0.379, "bbox_mAP_copypaste": "0.267 0.510 0.236 0.109 0.138 0.379"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 10086, "data_time": 0.06224, "loss_rpn_cls": 0.00259, "loss_rpn_bbox": 0.01465, "loss_cls": 0.06616, "acc": 97.41138, "loss_bbox": 0.09708, "loss": 0.18048, "time": 0.64563}
{"mode": "val", "epoch": 10, "iter": 77, "lr": 0.002, "bbox_mAP": 0.263, "bbox_mAP_50": 0.497, "bbox_mAP_75": 0.229, "bbox_mAP_s": 0.103, "bbox_mAP_m": 0.141, "bbox_mAP_l": 0.362, "bbox_mAP_copypaste": "0.263 0.497 0.229 0.103 0.141 0.362"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 10086, "data_time": 0.06214, "loss_rpn_cls": 0.0026, "loss_rpn_bbox": 0.01409, "loss_cls": 0.06154, "acc": 97.56641, "loss_bbox": 0.09426, "loss": 0.17248, "time": 0.64521}
{"mode": "val", "epoch": 11, "iter": 77, "lr": 0.002, "bbox_mAP": 0.266, "bbox_mAP_50": 0.485, "bbox_mAP_75": 0.245, "bbox_mAP_s": 0.116, "bbox_mAP_m": 0.145, "bbox_mAP_l": 0.373, "bbox_mAP_copypaste": "0.266 0.485 0.245 0.116 0.145 0.373"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 10086, "data_time": 0.06096, "loss_rpn_cls": 0.00223, "loss_rpn_bbox": 0.01391, "loss_cls": 0.06014, "acc": 97.63721, "loss_bbox": 0.09104, "loss": 0.16732, "time": 0.64507}
{"mode": "val", "epoch": 12, "iter": 77, "lr": 0.0002, "bbox_mAP": 0.27, "bbox_mAP_50": 0.501, "bbox_mAP_75": 0.242, "bbox_mAP_s": 0.117, "bbox_mAP_m": 0.151, "bbox_mAP_l": 0.371, "bbox_mAP_copypaste": "0.270 0.501 0.242 0.117 0.151 0.371"}
