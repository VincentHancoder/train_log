{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=8,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/faster_rcnn_r50_fpn'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1684443155, "exp_name": "faster_rcnn_r50_fpn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 9927, "data_time": 0.05795, "loss_rpn_cls": 0.09952, "loss_rpn_bbox": 0.03001, "loss_cls": 0.59087, "acc": 86.4248, "loss_bbox": 0.14121, "loss": 0.86161, "time": 0.59579}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 9927, "data_time": 0.01291, "loss_rpn_cls": 0.01428, "loss_rpn_bbox": 0.02808, "loss_cls": 0.21629, "acc": 94.34277, "loss_bbox": 0.21728, "loss": 0.47592, "time": 0.54785}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 9927, "data_time": 0.01362, "loss_rpn_cls": 0.01092, "loss_rpn_bbox": 0.02561, "loss_cls": 0.18498, "acc": 94.13086, "loss_bbox": 0.21065, "loss": 0.43215, "time": 0.55246}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 9927, "data_time": 0.01308, "loss_rpn_cls": 0.0117, "loss_rpn_bbox": 0.02531, "loss_cls": 0.16044, "acc": 94.75781, "loss_bbox": 0.17735, "loss": 0.37479, "time": 0.55162}
{"mode": "val", "epoch": 1, "iter": 288, "lr": 0.00937, "bbox_mAP": 0.153, "bbox_mAP_50": 0.3, "bbox_mAP_75": 0.145, "bbox_mAP_s": 0.08, "bbox_mAP_m": 0.065, "bbox_mAP_l": 0.122, "bbox_mAP_copypaste": "0.153 0.300 0.145 0.080 0.065 0.122"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01137, "memory": 9927, "data_time": 0.05851, "loss_rpn_cls": 0.01807, "loss_rpn_bbox": 0.02629, "loss_cls": 0.13351, "acc": 95.55859, "loss_bbox": 0.14668, "loss": 0.32454, "time": 0.59914}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01337, "memory": 9927, "data_time": 0.01354, "loss_rpn_cls": 0.01099, "loss_rpn_bbox": 0.02867, "loss_cls": 0.13887, "acc": 95.43945, "loss_bbox": 0.14536, "loss": 0.32389, "time": 0.55323}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01536, "memory": 9927, "data_time": 0.01334, "loss_rpn_cls": 0.00972, "loss_rpn_bbox": 0.02221, "loss_cls": 0.14565, "acc": 95.20801, "loss_bbox": 0.1565, "loss": 0.33408, "time": 0.55027}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.01736, "memory": 9927, "data_time": 0.01329, "loss_rpn_cls": 0.00861, "loss_rpn_bbox": 0.02553, "loss_cls": 0.14951, "acc": 95.01172, "loss_bbox": 0.1591, "loss": 0.34275, "time": 0.55148}
{"mode": "val", "epoch": 2, "iter": 288, "lr": 0.01876, "bbox_mAP": 0.178, "bbox_mAP_50": 0.338, "bbox_mAP_75": 0.175, "bbox_mAP_s": 0.096, "bbox_mAP_m": 0.093, "bbox_mAP_l": 0.146, "bbox_mAP_copypaste": "0.178 0.338 0.175 0.096 0.093 0.146"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.05915, "loss_rpn_cls": 0.01041, "loss_rpn_bbox": 0.02685, "loss_cls": 0.14181, "acc": 95.22754, "loss_bbox": 0.15495, "loss": 0.33402, "time": 0.59901}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01448, "loss_rpn_cls": 0.01332, "loss_rpn_bbox": 0.02651, "loss_cls": 0.15842, "acc": 94.97559, "loss_bbox": 0.15235, "loss": 0.3506, "time": 0.55501}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01388, "loss_rpn_cls": 0.01972, "loss_rpn_bbox": 0.03199, "loss_cls": 0.13148, "acc": 95.55762, "loss_bbox": 0.14484, "loss": 0.32803, "time": 0.54988}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01432, "loss_rpn_cls": 0.0123, "loss_rpn_bbox": 0.02304, "loss_cls": 0.1246, "acc": 95.8457, "loss_bbox": 0.13365, "loss": 0.29357, "time": 0.54966}
{"mode": "val", "epoch": 3, "iter": 288, "lr": 0.02, "bbox_mAP": 0.213, "bbox_mAP_50": 0.394, "bbox_mAP_75": 0.202, "bbox_mAP_s": 0.16, "bbox_mAP_m": 0.117, "bbox_mAP_l": 0.179, "bbox_mAP_copypaste": "0.213 0.394 0.202 0.160 0.117 0.179"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.05918, "loss_rpn_cls": 0.00709, "loss_rpn_bbox": 0.02676, "loss_cls": 0.12198, "acc": 95.63965, "loss_bbox": 0.14856, "loss": 0.30439, "time": 0.59743}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01419, "loss_rpn_cls": 0.00755, "loss_rpn_bbox": 0.02716, "loss_cls": 0.12353, "acc": 95.42578, "loss_bbox": 0.15072, "loss": 0.30896, "time": 0.5495}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01455, "loss_rpn_cls": 0.00754, "loss_rpn_bbox": 0.0228, "loss_cls": 0.12092, "acc": 95.62695, "loss_bbox": 0.1388, "loss": 0.29006, "time": 0.55395}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01423, "loss_rpn_cls": 0.00725, "loss_rpn_bbox": 0.02547, "loss_cls": 0.1198, "acc": 95.58984, "loss_bbox": 0.14996, "loss": 0.30248, "time": 0.55186}
{"mode": "val", "epoch": 4, "iter": 288, "lr": 0.02, "bbox_mAP": 0.231, "bbox_mAP_50": 0.427, "bbox_mAP_75": 0.22, "bbox_mAP_s": 0.138, "bbox_mAP_m": 0.113, "bbox_mAP_l": 0.2, "bbox_mAP_copypaste": "0.231 0.427 0.220 0.138 0.113 0.200"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.05845, "loss_rpn_cls": 0.00663, "loss_rpn_bbox": 0.0229, "loss_cls": 0.10975, "acc": 96.0, "loss_bbox": 0.1363, "loss": 0.27559, "time": 0.59622}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01449, "loss_rpn_cls": 0.00545, "loss_rpn_bbox": 0.02227, "loss_cls": 0.10255, "acc": 96.16406, "loss_bbox": 0.13499, "loss": 0.26525, "time": 0.55355}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.0147, "loss_rpn_cls": 0.00458, "loss_rpn_bbox": 0.02293, "loss_cls": 0.10551, "acc": 96.00879, "loss_bbox": 0.14423, "loss": 0.27726, "time": 0.55103}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01475, "loss_rpn_cls": 0.00493, "loss_rpn_bbox": 0.02796, "loss_cls": 0.12565, "acc": 95.53613, "loss_bbox": 0.15442, "loss": 0.31296, "time": 0.55214}
{"mode": "val", "epoch": 5, "iter": 288, "lr": 0.02, "bbox_mAP": 0.231, "bbox_mAP_50": 0.427, "bbox_mAP_75": 0.22, "bbox_mAP_s": 0.169, "bbox_mAP_m": 0.12, "bbox_mAP_l": 0.216, "bbox_mAP_copypaste": "0.231 0.427 0.220 0.169 0.120 0.216"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.05865, "loss_rpn_cls": 0.00417, "loss_rpn_bbox": 0.02067, "loss_cls": 0.1064, "acc": 96.02344, "loss_bbox": 0.14028, "loss": 0.27152, "time": 0.59212}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01404, "loss_rpn_cls": 0.00566, "loss_rpn_bbox": 0.02143, "loss_cls": 0.11186, "acc": 95.69434, "loss_bbox": 0.14171, "loss": 0.28067, "time": 0.54636}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.0144, "loss_rpn_cls": 0.00389, "loss_rpn_bbox": 0.02323, "loss_cls": 0.0995, "acc": 96.12598, "loss_bbox": 0.13875, "loss": 0.26537, "time": 0.54631}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01492, "loss_rpn_cls": 0.00501, "loss_rpn_bbox": 0.02399, "loss_cls": 0.11841, "acc": 95.48828, "loss_bbox": 0.15672, "loss": 0.30413, "time": 0.5505}
{"mode": "val", "epoch": 6, "iter": 288, "lr": 0.02, "bbox_mAP": 0.259, "bbox_mAP_50": 0.449, "bbox_mAP_75": 0.259, "bbox_mAP_s": 0.228, "bbox_mAP_m": 0.14, "bbox_mAP_l": 0.228, "bbox_mAP_copypaste": "0.259 0.449 0.259 0.228 0.140 0.228"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.05879, "loss_rpn_cls": 0.00803, "loss_rpn_bbox": 0.02299, "loss_cls": 0.09505, "acc": 96.37402, "loss_bbox": 0.13125, "loss": 0.25731, "time": 0.59362}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01398, "loss_rpn_cls": 0.00586, "loss_rpn_bbox": 0.01976, "loss_cls": 0.09009, "acc": 96.56152, "loss_bbox": 0.12783, "loss": 0.24354, "time": 0.54724}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01407, "loss_rpn_cls": 0.00579, "loss_rpn_bbox": 0.02625, "loss_cls": 0.10921, "acc": 95.71582, "loss_bbox": 0.15081, "loss": 0.29206, "time": 0.54476}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01434, "loss_rpn_cls": 0.00473, "loss_rpn_bbox": 0.0201, "loss_cls": 0.11342, "acc": 95.78809, "loss_bbox": 0.14191, "loss": 0.28016, "time": 0.5484}
{"mode": "val", "epoch": 7, "iter": 288, "lr": 0.02, "bbox_mAP": 0.265, "bbox_mAP_50": 0.461, "bbox_mAP_75": 0.257, "bbox_mAP_s": 0.207, "bbox_mAP_m": 0.151, "bbox_mAP_l": 0.251, "bbox_mAP_copypaste": "0.265 0.461 0.257 0.207 0.151 0.251"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 9927, "data_time": 0.05854, "loss_rpn_cls": 0.00397, "loss_rpn_bbox": 0.0241, "loss_cls": 0.0956, "acc": 96.19141, "loss_bbox": 0.13796, "loss": 0.26164, "time": 0.59806}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 9927, "data_time": 0.01384, "loss_rpn_cls": 0.00597, "loss_rpn_bbox": 0.02244, "loss_cls": 0.08862, "acc": 96.71582, "loss_bbox": 0.12016, "loss": 0.2372, "time": 0.55084}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.02, "memory": 9927, "data_time": 0.01356, "loss_rpn_cls": 0.00444, "loss_rpn_bbox": 0.01926, "loss_cls": 0.09848, "acc": 96.03223, "loss_bbox": 0.14759, "loss": 0.26976, "time": 0.55186}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.02, "memory": 9927, "data_time": 0.01365, "loss_rpn_cls": 0.00465, "loss_rpn_bbox": 0.02069, "loss_cls": 0.09397, "acc": 96.37891, "loss_bbox": 0.13038, "loss": 0.2497, "time": 0.5482}
{"mode": "val", "epoch": 8, "iter": 288, "lr": 0.02, "bbox_mAP": 0.244, "bbox_mAP_50": 0.444, "bbox_mAP_75": 0.231, "bbox_mAP_s": 0.151, "bbox_mAP_m": 0.127, "bbox_mAP_l": 0.219, "bbox_mAP_copypaste": "0.244 0.444 0.231 0.151 0.127 0.219"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 9927, "data_time": 0.06065, "loss_rpn_cls": 0.00414, "loss_rpn_bbox": 0.0206, "loss_cls": 0.09128, "acc": 96.4707, "loss_bbox": 0.13368, "loss": 0.24971, "time": 0.60001}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.002, "memory": 9927, "data_time": 0.01449, "loss_rpn_cls": 0.00327, "loss_rpn_bbox": 0.01776, "loss_cls": 0.08585, "acc": 96.5957, "loss_bbox": 0.13044, "loss": 0.23732, "time": 0.5469}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.002, "memory": 9927, "data_time": 0.0147, "loss_rpn_cls": 0.00341, "loss_rpn_bbox": 0.01678, "loss_cls": 0.0777, "acc": 96.91406, "loss_bbox": 0.12105, "loss": 0.21894, "time": 0.5464}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.002, "memory": 9927, "data_time": 0.01489, "loss_rpn_cls": 0.0033, "loss_rpn_bbox": 0.01876, "loss_cls": 0.0746, "acc": 97.02051, "loss_bbox": 0.1205, "loss": 0.21716, "time": 0.54581}
{"mode": "val", "epoch": 9, "iter": 288, "lr": 0.002, "bbox_mAP": 0.295, "bbox_mAP_50": 0.482, "bbox_mAP_75": 0.301, "bbox_mAP_s": 0.238, "bbox_mAP_m": 0.124, "bbox_mAP_l": 0.286, "bbox_mAP_copypaste": "0.295 0.482 0.301 0.238 0.124 0.286"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 9927, "data_time": 0.05835, "loss_rpn_cls": 0.00336, "loss_rpn_bbox": 0.01668, "loss_cls": 0.07713, "acc": 96.88281, "loss_bbox": 0.12668, "loss": 0.22385, "time": 0.59024}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.002, "memory": 9927, "data_time": 0.01377, "loss_rpn_cls": 0.0026, "loss_rpn_bbox": 0.0181, "loss_cls": 0.0766, "acc": 96.82812, "loss_bbox": 0.12434, "loss": 0.22164, "time": 0.55182}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.002, "memory": 9927, "data_time": 0.01422, "loss_rpn_cls": 0.00301, "loss_rpn_bbox": 0.01775, "loss_cls": 0.06931, "acc": 97.20117, "loss_bbox": 0.12336, "loss": 0.21343, "time": 0.55034}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.002, "memory": 9927, "data_time": 0.01371, "loss_rpn_cls": 0.0028, "loss_rpn_bbox": 0.01567, "loss_cls": 0.06953, "acc": 97.15625, "loss_bbox": 0.11213, "loss": 0.20014, "time": 0.54752}
{"mode": "val", "epoch": 10, "iter": 288, "lr": 0.002, "bbox_mAP": 0.3, "bbox_mAP_50": 0.503, "bbox_mAP_75": 0.301, "bbox_mAP_s": 0.232, "bbox_mAP_m": 0.166, "bbox_mAP_l": 0.29, "bbox_mAP_copypaste": "0.300 0.503 0.301 0.232 0.166 0.290"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 9927, "data_time": 0.05981, "loss_rpn_cls": 0.00227, "loss_rpn_bbox": 0.01642, "loss_cls": 0.06814, "acc": 97.20703, "loss_bbox": 0.11606, "loss": 0.2029, "time": 0.59221}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.002, "memory": 9927, "data_time": 0.01439, "loss_rpn_cls": 0.00221, "loss_rpn_bbox": 0.01403, "loss_cls": 0.0685, "acc": 97.17578, "loss_bbox": 0.11259, "loss": 0.19732, "time": 0.5438}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.002, "memory": 9927, "data_time": 0.01445, "loss_rpn_cls": 0.00261, "loss_rpn_bbox": 0.01826, "loss_cls": 0.07241, "acc": 97.02832, "loss_bbox": 0.12095, "loss": 0.21422, "time": 0.54515}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.002, "memory": 9927, "data_time": 0.01496, "loss_rpn_cls": 0.00293, "loss_rpn_bbox": 0.01801, "loss_cls": 0.07376, "acc": 96.92383, "loss_bbox": 0.12076, "loss": 0.21547, "time": 0.5607}
{"mode": "val", "epoch": 11, "iter": 288, "lr": 0.002, "bbox_mAP": 0.294, "bbox_mAP_50": 0.484, "bbox_mAP_75": 0.287, "bbox_mAP_s": 0.229, "bbox_mAP_m": 0.133, "bbox_mAP_l": 0.289, "bbox_mAP_copypaste": "0.294 0.484 0.287 0.229 0.133 0.289"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 9927, "data_time": 0.05826, "loss_rpn_cls": 0.00228, "loss_rpn_bbox": 0.01586, "loss_cls": 0.06711, "acc": 97.28906, "loss_bbox": 0.11397, "loss": 0.19922, "time": 0.59633}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0002, "memory": 9927, "data_time": 0.0141, "loss_rpn_cls": 0.0025, "loss_rpn_bbox": 0.01565, "loss_cls": 0.06468, "acc": 97.37012, "loss_bbox": 0.10526, "loss": 0.18809, "time": 0.55145}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0002, "memory": 9927, "data_time": 0.01373, "loss_rpn_cls": 0.00294, "loss_rpn_bbox": 0.01592, "loss_cls": 0.06792, "acc": 97.18164, "loss_bbox": 0.1195, "loss": 0.20628, "time": 0.55089}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.0002, "memory": 9927, "data_time": 0.01323, "loss_rpn_cls": 0.00253, "loss_rpn_bbox": 0.01544, "loss_cls": 0.06511, "acc": 97.34082, "loss_bbox": 0.11021, "loss": 0.19329, "time": 0.54913}
{"mode": "val", "epoch": 12, "iter": 288, "lr": 0.0002, "bbox_mAP": 0.29, "bbox_mAP_50": 0.483, "bbox_mAP_75": 0.298, "bbox_mAP_s": 0.225, "bbox_mAP_m": 0.128, "bbox_mAP_l": 0.285, "bbox_mAP_copypaste": "0.290 0.483 0.298 0.225 0.128 0.285"}
