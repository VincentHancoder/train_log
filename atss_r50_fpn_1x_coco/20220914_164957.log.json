{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/atss_r50_fpn_1x_coco_20200209-985f7bd0.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='ATSS',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5),\n    bbox_head=dict(\n        type='ATSSHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            octave_base_scale=8,\n            scales_per_octave=1,\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[0.1, 0.1, 0.2, 0.2]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(type='ATSSAssigner', topk=9),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.6),\n        max_per_img=100))\nwork_dir = './work_dirs/atss_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 3)\n", "seed": 0, "exp_name": "atss_r50_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 8473, "data_time": 0.06533, "loss_cls": 0.97464, "loss_bbox": 0.67392, "loss_centerness": 0.63941, "loss": 2.28797, "time": 0.67627}
{"mode": "val", "epoch": 1, "iter": 96, "lr": 0.00153, "bbox_mAP": 0.174, "bbox_mAP_50": 0.299, "bbox_mAP_75": 0.162, "bbox_mAP_s": 0.125, "bbox_mAP_m": 0.121, "bbox_mAP_l": 0.14, "bbox_mAP_copypaste": "0.174 0.299 0.162 0.125 0.121 0.140"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00253, "memory": 8473, "data_time": 0.0596, "loss_cls": 0.38846, "loss_bbox": 0.49713, "loss_centerness": 0.61851, "loss": 1.50409, "time": 0.67325}
{"mode": "val", "epoch": 2, "iter": 96, "lr": 0.00307, "bbox_mAP": 0.231, "bbox_mAP_50": 0.417, "bbox_mAP_75": 0.199, "bbox_mAP_s": 0.152, "bbox_mAP_m": 0.13, "bbox_mAP_l": 0.233, "bbox_mAP_copypaste": "0.231 0.417 0.199 0.152 0.130 0.233"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00407, "memory": 8473, "data_time": 0.06104, "loss_cls": 0.32366, "loss_bbox": 0.47899, "loss_centerness": 0.61697, "loss": 1.41961, "time": 0.67282}
{"mode": "val", "epoch": 3, "iter": 96, "lr": 0.00461, "bbox_mAP": 0.244, "bbox_mAP_50": 0.426, "bbox_mAP_75": 0.222, "bbox_mAP_s": 0.333, "bbox_mAP_m": 0.166, "bbox_mAP_l": 0.228, "bbox_mAP_copypaste": "0.244 0.426 0.222 0.333 0.166 0.228"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.0056, "memory": 8473, "data_time": 0.05977, "loss_cls": 0.30477, "loss_bbox": 0.4678, "loss_centerness": 0.61506, "loss": 1.38763, "time": 0.67613}
{"mode": "val", "epoch": 4, "iter": 96, "lr": 0.00614, "bbox_mAP": 0.269, "bbox_mAP_50": 0.496, "bbox_mAP_75": 0.247, "bbox_mAP_s": 0.173, "bbox_mAP_m": 0.143, "bbox_mAP_l": 0.267, "bbox_mAP_copypaste": "0.269 0.496 0.247 0.173 0.143 0.267"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00714, "memory": 8473, "data_time": 0.06059, "loss_cls": 0.26898, "loss_bbox": 0.44594, "loss_centerness": 0.61456, "loss": 1.32947, "time": 0.67665}
{"mode": "val", "epoch": 5, "iter": 96, "lr": 0.00768, "bbox_mAP": 0.259, "bbox_mAP_50": 0.478, "bbox_mAP_75": 0.238, "bbox_mAP_s": 0.144, "bbox_mAP_m": 0.151, "bbox_mAP_l": 0.264, "bbox_mAP_copypaste": "0.259 0.478 0.238 0.144 0.151 0.264"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.00868, "memory": 8473, "data_time": 0.05936, "loss_cls": 0.29156, "loss_bbox": 0.45202, "loss_centerness": 0.61332, "loss": 1.3569, "time": 0.67568}
{"mode": "val", "epoch": 6, "iter": 96, "lr": 0.00922, "bbox_mAP": 0.27, "bbox_mAP_50": 0.497, "bbox_mAP_75": 0.248, "bbox_mAP_s": 0.15, "bbox_mAP_m": 0.151, "bbox_mAP_l": 0.287, "bbox_mAP_copypaste": "0.270 0.497 0.248 0.150 0.151 0.287"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 8473, "data_time": 0.06053, "loss_cls": 0.27082, "loss_bbox": 0.4508, "loss_centerness": 0.61389, "loss": 1.33551, "time": 0.67438}
{"mode": "val", "epoch": 7, "iter": 96, "lr": 0.01, "bbox_mAP": 0.259, "bbox_mAP_50": 0.494, "bbox_mAP_75": 0.238, "bbox_mAP_s": 0.189, "bbox_mAP_m": 0.191, "bbox_mAP_l": 0.254, "bbox_mAP_copypaste": "0.259 0.494 0.238 0.189 0.191 0.254"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 8473, "data_time": 0.06105, "loss_cls": 0.26176, "loss_bbox": 0.44274, "loss_centerness": 0.61151, "loss": 1.31602, "time": 0.67455}
{"mode": "val", "epoch": 8, "iter": 96, "lr": 0.01, "bbox_mAP": 0.32, "bbox_mAP_50": 0.562, "bbox_mAP_75": 0.305, "bbox_mAP_s": 0.205, "bbox_mAP_m": 0.167, "bbox_mAP_l": 0.347, "bbox_mAP_copypaste": "0.320 0.562 0.305 0.205 0.167 0.347"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.001, "memory": 8473, "data_time": 0.06112, "loss_cls": 0.19259, "loss_bbox": 0.38476, "loss_centerness": 0.60946, "loss": 1.18681, "time": 0.67507}
{"mode": "val", "epoch": 9, "iter": 96, "lr": 0.001, "bbox_mAP": 0.345, "bbox_mAP_50": 0.589, "bbox_mAP_75": 0.333, "bbox_mAP_s": 0.377, "bbox_mAP_m": 0.18, "bbox_mAP_l": 0.383, "bbox_mAP_copypaste": "0.345 0.589 0.333 0.377 0.180 0.383"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.001, "memory": 8473, "data_time": 0.06138, "loss_cls": 0.17018, "loss_bbox": 0.33713, "loss_centerness": 0.60625, "loss": 1.11356, "time": 0.67384}
{"mode": "val", "epoch": 10, "iter": 96, "lr": 0.001, "bbox_mAP": 0.345, "bbox_mAP_50": 0.584, "bbox_mAP_75": 0.338, "bbox_mAP_s": 0.355, "bbox_mAP_m": 0.181, "bbox_mAP_l": 0.388, "bbox_mAP_copypaste": "0.345 0.584 0.338 0.355 0.181 0.388"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.001, "memory": 8473, "data_time": 0.05935, "loss_cls": 0.15961, "loss_bbox": 0.32228, "loss_centerness": 0.6045, "loss": 1.08638, "time": 0.66923}
{"mode": "val", "epoch": 11, "iter": 96, "lr": 0.001, "bbox_mAP": 0.346, "bbox_mAP_50": 0.585, "bbox_mAP_75": 0.329, "bbox_mAP_s": 0.364, "bbox_mAP_m": 0.184, "bbox_mAP_l": 0.385, "bbox_mAP_copypaste": "0.346 0.585 0.329 0.364 0.184 0.385"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0001, "memory": 8473, "data_time": 0.06339, "loss_cls": 0.14688, "loss_bbox": 0.3051, "loss_centerness": 0.60472, "loss": 1.05669, "time": 0.67592}
{"mode": "val", "epoch": 12, "iter": 96, "lr": 0.0001, "bbox_mAP": 0.351, "bbox_mAP_50": 0.59, "bbox_mAP_75": 0.341, "bbox_mAP_s": 0.387, "bbox_mAP_m": 0.177, "bbox_mAP_l": 0.392, "bbox_mAP_copypaste": "0.351 0.590 0.341 0.387 0.177 0.392"}
