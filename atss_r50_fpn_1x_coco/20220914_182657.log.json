{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train5.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val5.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val5.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/atss_r50_fpn_1x_coco_20200209-985f7bd0.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='ATSS',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5),\n    bbox_head=dict(\n        type='ATSSHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            octave_base_scale=8,\n            scales_per_octave=1,\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[0.1, 0.1, 0.2, 0.2]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(type='ATSSAssigner', topk=9),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.6),\n        max_per_img=100))\nwork_dir = './work_dirs/atss_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 3)\n", "seed": 0, "exp_name": "atss_r50_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 8476, "data_time": 0.0603, "loss_cls": 0.95407, "loss_bbox": 0.68234, "loss_centerness": 0.63881, "loss": 2.27521, "time": 1.00735}
{"mode": "val", "epoch": 1, "iter": 96, "lr": 0.00155, "bbox_mAP": 0.139, "bbox_mAP_50": 0.254, "bbox_mAP_75": 0.125, "bbox_mAP_s": 0.178, "bbox_mAP_m": 0.09, "bbox_mAP_l": 0.133, "bbox_mAP_copypaste": "0.139 0.254 0.125 0.178 0.090 0.133"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00255, "memory": 8476, "data_time": 0.06059, "loss_cls": 0.37783, "loss_bbox": 0.50027, "loss_centerness": 0.61989, "loss": 1.49799, "time": 0.99316}
{"mode": "val", "epoch": 2, "iter": 96, "lr": 0.00311, "bbox_mAP": 0.173, "bbox_mAP_50": 0.316, "bbox_mAP_75": 0.163, "bbox_mAP_s": 0.15, "bbox_mAP_m": 0.118, "bbox_mAP_l": 0.191, "bbox_mAP_copypaste": "0.173 0.316 0.163 0.150 0.118 0.191"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00411, "memory": 8476, "data_time": 0.06175, "loss_cls": 0.30229, "loss_bbox": 0.48916, "loss_centerness": 0.61638, "loss": 1.40783, "time": 0.993}
{"mode": "val", "epoch": 3, "iter": 96, "lr": 0.00467, "bbox_mAP": 0.205, "bbox_mAP_50": 0.375, "bbox_mAP_75": 0.185, "bbox_mAP_s": 0.175, "bbox_mAP_m": 0.19, "bbox_mAP_l": 0.209, "bbox_mAP_copypaste": "0.205 0.375 0.185 0.175 0.190 0.209"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00566, "memory": 8476, "data_time": 0.06075, "loss_cls": 0.30932, "loss_bbox": 0.46815, "loss_centerness": 0.6142, "loss": 1.39167, "time": 0.98849}
{"mode": "val", "epoch": 4, "iter": 96, "lr": 0.00622, "bbox_mAP": 0.205, "bbox_mAP_50": 0.37, "bbox_mAP_75": 0.193, "bbox_mAP_s": 0.319, "bbox_mAP_m": 0.21, "bbox_mAP_l": 0.216, "bbox_mAP_copypaste": "0.205 0.370 0.193 0.319 0.210 0.216"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00722, "memory": 8476, "data_time": 0.06101, "loss_cls": 0.30103, "loss_bbox": 0.45145, "loss_centerness": 0.61535, "loss": 1.36784, "time": 0.99389}
{"mode": "val", "epoch": 5, "iter": 96, "lr": 0.00778, "bbox_mAP": 0.216, "bbox_mAP_50": 0.393, "bbox_mAP_75": 0.196, "bbox_mAP_s": 0.205, "bbox_mAP_m": 0.191, "bbox_mAP_l": 0.23, "bbox_mAP_copypaste": "0.216 0.393 0.196 0.205 0.191 0.230"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.00878, "memory": 8476, "data_time": 0.06129, "loss_cls": 0.27893, "loss_bbox": 0.46354, "loss_centerness": 0.61568, "loss": 1.35815, "time": 0.99843}
{"mode": "val", "epoch": 6, "iter": 96, "lr": 0.00934, "bbox_mAP": 0.233, "bbox_mAP_50": 0.42, "bbox_mAP_75": 0.212, "bbox_mAP_s": 0.252, "bbox_mAP_m": 0.143, "bbox_mAP_l": 0.266, "bbox_mAP_copypaste": "0.233 0.420 0.212 0.252 0.143 0.266"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 8476, "data_time": 0.06226, "loss_cls": 0.28537, "loss_bbox": 0.45433, "loss_centerness": 0.61425, "loss": 1.35395, "time": 0.99361}
{"mode": "val", "epoch": 7, "iter": 96, "lr": 0.01, "bbox_mAP": 0.24, "bbox_mAP_50": 0.436, "bbox_mAP_75": 0.223, "bbox_mAP_s": 0.197, "bbox_mAP_m": 0.172, "bbox_mAP_l": 0.279, "bbox_mAP_copypaste": "0.240 0.436 0.223 0.197 0.172 0.279"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 8476, "data_time": 0.06072, "loss_cls": 0.2311, "loss_bbox": 0.43943, "loss_centerness": 0.61251, "loss": 1.28305, "time": 0.99093}
{"mode": "val", "epoch": 8, "iter": 96, "lr": 0.01, "bbox_mAP": 0.232, "bbox_mAP_50": 0.435, "bbox_mAP_75": 0.223, "bbox_mAP_s": 0.278, "bbox_mAP_m": 0.169, "bbox_mAP_l": 0.27, "bbox_mAP_copypaste": "0.232 0.435 0.223 0.278 0.169 0.270"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.001, "memory": 8476, "data_time": 0.06412, "loss_cls": 0.19626, "loss_bbox": 0.37971, "loss_centerness": 0.60876, "loss": 1.18473, "time": 0.98676}
{"mode": "val", "epoch": 9, "iter": 96, "lr": 0.001, "bbox_mAP": 0.268, "bbox_mAP_50": 0.484, "bbox_mAP_75": 0.228, "bbox_mAP_s": 0.263, "bbox_mAP_m": 0.227, "bbox_mAP_l": 0.315, "bbox_mAP_copypaste": "0.268 0.484 0.228 0.263 0.227 0.315"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.001, "memory": 8476, "data_time": 0.05917, "loss_cls": 0.16936, "loss_bbox": 0.3423, "loss_centerness": 0.60642, "loss": 1.11807, "time": 1.01151}
{"mode": "val", "epoch": 10, "iter": 96, "lr": 0.001, "bbox_mAP": 0.281, "bbox_mAP_50": 0.501, "bbox_mAP_75": 0.249, "bbox_mAP_s": 0.236, "bbox_mAP_m": 0.27, "bbox_mAP_l": 0.33, "bbox_mAP_copypaste": "0.281 0.501 0.249 0.236 0.270 0.330"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.001, "memory": 8476, "data_time": 0.06023, "loss_cls": 0.15982, "loss_bbox": 0.32822, "loss_centerness": 0.60479, "loss": 1.09283, "time": 0.99739}
{"mode": "val", "epoch": 11, "iter": 96, "lr": 0.001, "bbox_mAP": 0.286, "bbox_mAP_50": 0.503, "bbox_mAP_75": 0.256, "bbox_mAP_s": 0.258, "bbox_mAP_m": 0.226, "bbox_mAP_l": 0.34, "bbox_mAP_copypaste": "0.286 0.503 0.256 0.258 0.226 0.340"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0001, "memory": 8476, "data_time": 0.05986, "loss_cls": 0.14814, "loss_bbox": 0.31487, "loss_centerness": 0.60598, "loss": 1.06899, "time": 0.99708}
{"mode": "val", "epoch": 12, "iter": 96, "lr": 0.0001, "bbox_mAP": 0.289, "bbox_mAP_50": 0.507, "bbox_mAP_75": 0.261, "bbox_mAP_s": 0.255, "bbox_mAP_m": 0.228, "bbox_mAP_l": 0.343, "bbox_mAP_copypaste": "0.289 0.507 0.261 0.255 0.228 0.343"}
