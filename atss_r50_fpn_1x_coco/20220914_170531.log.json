{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/atss_r50_fpn_1x_coco_20200209-985f7bd0.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='ATSS',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5),\n    bbox_head=dict(\n        type='ATSSHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            octave_base_scale=8,\n            scales_per_octave=1,\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[0.1, 0.1, 0.2, 0.2]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(type='ATSSAssigner', topk=9),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.6),\n        max_per_img=100))\nwork_dir = './work_dirs/atss_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 3)\n", "seed": 0, "exp_name": "atss_r50_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 8473, "data_time": 0.061, "loss_cls": 0.96149, "loss_bbox": 0.68689, "loss_centerness": 0.64105, "loss": 2.28943, "time": 0.67205}
{"mode": "val", "epoch": 1, "iter": 96, "lr": 0.00157, "bbox_mAP": 0.146, "bbox_mAP_50": 0.25, "bbox_mAP_75": 0.131, "bbox_mAP_s": 0.14, "bbox_mAP_m": 0.08, "bbox_mAP_l": 0.099, "bbox_mAP_copypaste": "0.146 0.250 0.131 0.140 0.080 0.099"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00257, "memory": 8473, "data_time": 0.06121, "loss_cls": 0.37353, "loss_bbox": 0.50066, "loss_centerness": 0.61947, "loss": 1.49366, "time": 0.67287}
{"mode": "val", "epoch": 2, "iter": 96, "lr": 0.00315, "bbox_mAP": 0.17, "bbox_mAP_50": 0.3, "bbox_mAP_75": 0.152, "bbox_mAP_s": 0.136, "bbox_mAP_m": 0.106, "bbox_mAP_l": 0.134, "bbox_mAP_copypaste": "0.170 0.300 0.152 0.136 0.106 0.134"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00415, "memory": 8473, "data_time": 0.0592, "loss_cls": 0.33407, "loss_bbox": 0.47355, "loss_centerness": 0.61619, "loss": 1.4238, "time": 0.67173}
{"mode": "val", "epoch": 3, "iter": 96, "lr": 0.00473, "bbox_mAP": 0.227, "bbox_mAP_50": 0.379, "bbox_mAP_75": 0.206, "bbox_mAP_s": 0.134, "bbox_mAP_m": 0.131, "bbox_mAP_l": 0.189, "bbox_mAP_copypaste": "0.227 0.379 0.206 0.134 0.131 0.189"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00572, "memory": 8473, "data_time": 0.0602, "loss_cls": 0.29504, "loss_bbox": 0.45394, "loss_centerness": 0.61535, "loss": 1.36434, "time": 0.67191}
{"mode": "val", "epoch": 4, "iter": 96, "lr": 0.0063, "bbox_mAP": 0.237, "bbox_mAP_50": 0.41, "bbox_mAP_75": 0.223, "bbox_mAP_s": 0.224, "bbox_mAP_m": 0.124, "bbox_mAP_l": 0.198, "bbox_mAP_copypaste": "0.237 0.410 0.223 0.224 0.124 0.198"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.0073, "memory": 8473, "data_time": 0.06128, "loss_cls": 0.30679, "loss_bbox": 0.45114, "loss_centerness": 0.61527, "loss": 1.3732, "time": 0.6725}
{"mode": "val", "epoch": 5, "iter": 96, "lr": 0.00788, "bbox_mAP": 0.249, "bbox_mAP_50": 0.422, "bbox_mAP_75": 0.252, "bbox_mAP_s": 0.213, "bbox_mAP_m": 0.141, "bbox_mAP_l": 0.218, "bbox_mAP_copypaste": "0.249 0.422 0.252 0.213 0.141 0.218"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.00888, "memory": 8473, "data_time": 0.06023, "loss_cls": 0.25522, "loss_bbox": 0.46787, "loss_centerness": 0.6145, "loss": 1.33759, "time": 0.66977}
{"mode": "val", "epoch": 6, "iter": 96, "lr": 0.00946, "bbox_mAP": 0.258, "bbox_mAP_50": 0.443, "bbox_mAP_75": 0.265, "bbox_mAP_s": 0.243, "bbox_mAP_m": 0.163, "bbox_mAP_l": 0.196, "bbox_mAP_copypaste": "0.258 0.443 0.265 0.243 0.163 0.196"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 8473, "data_time": 0.06057, "loss_cls": 0.25101, "loss_bbox": 0.44183, "loss_centerness": 0.61263, "loss": 1.30547, "time": 0.673}
{"mode": "val", "epoch": 7, "iter": 96, "lr": 0.01, "bbox_mAP": 0.236, "bbox_mAP_50": 0.41, "bbox_mAP_75": 0.219, "bbox_mAP_s": 0.203, "bbox_mAP_m": 0.138, "bbox_mAP_l": 0.217, "bbox_mAP_copypaste": "0.236 0.410 0.219 0.203 0.138 0.217"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 8473, "data_time": 0.06029, "loss_cls": 0.23087, "loss_bbox": 0.4402, "loss_centerness": 0.61343, "loss": 1.28451, "time": 0.67286}
{"mode": "val", "epoch": 8, "iter": 96, "lr": 0.01, "bbox_mAP": 0.273, "bbox_mAP_50": 0.457, "bbox_mAP_75": 0.275, "bbox_mAP_s": 0.198, "bbox_mAP_m": 0.15, "bbox_mAP_l": 0.241, "bbox_mAP_copypaste": "0.273 0.457 0.275 0.198 0.150 0.241"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.001, "memory": 8473, "data_time": 0.0604, "loss_cls": 0.18321, "loss_bbox": 0.37539, "loss_centerness": 0.60967, "loss": 1.16826, "time": 0.67154}
{"mode": "val", "epoch": 9, "iter": 96, "lr": 0.001, "bbox_mAP": 0.297, "bbox_mAP_50": 0.482, "bbox_mAP_75": 0.291, "bbox_mAP_s": 0.217, "bbox_mAP_m": 0.159, "bbox_mAP_l": 0.263, "bbox_mAP_copypaste": "0.297 0.482 0.291 0.217 0.159 0.263"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.001, "memory": 8473, "data_time": 0.06, "loss_cls": 0.15572, "loss_bbox": 0.33569, "loss_centerness": 0.60767, "loss": 1.09909, "time": 0.67283}
{"mode": "val", "epoch": 10, "iter": 96, "lr": 0.001, "bbox_mAP": 0.301, "bbox_mAP_50": 0.485, "bbox_mAP_75": 0.295, "bbox_mAP_s": 0.214, "bbox_mAP_m": 0.158, "bbox_mAP_l": 0.266, "bbox_mAP_copypaste": "0.301 0.485 0.295 0.214 0.158 0.266"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.001, "memory": 8473, "data_time": 0.05937, "loss_cls": 0.15095, "loss_bbox": 0.31719, "loss_centerness": 0.60495, "loss": 1.07309, "time": 0.67139}
{"mode": "val", "epoch": 11, "iter": 96, "lr": 0.001, "bbox_mAP": 0.307, "bbox_mAP_50": 0.491, "bbox_mAP_75": 0.297, "bbox_mAP_s": 0.214, "bbox_mAP_m": 0.165, "bbox_mAP_l": 0.271, "bbox_mAP_copypaste": "0.307 0.491 0.297 0.214 0.165 0.271"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0001, "memory": 8473, "data_time": 0.05996, "loss_cls": 0.14691, "loss_bbox": 0.30885, "loss_centerness": 0.60408, "loss": 1.05984, "time": 0.67359}
{"mode": "val", "epoch": 12, "iter": 96, "lr": 0.0001, "bbox_mAP": 0.305, "bbox_mAP_50": 0.486, "bbox_mAP_75": 0.293, "bbox_mAP_s": 0.214, "bbox_mAP_m": 0.16, "bbox_mAP_l": 0.272, "bbox_mAP_copypaste": "0.305 0.486 0.293 0.214 0.160 0.272"}
