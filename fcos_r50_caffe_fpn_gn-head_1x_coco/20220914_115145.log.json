{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='SGD',\n    lr=0.01,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='constant',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/fcos_r50_caffe_fpn_gn-head_1x_coco-821213aa.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='FCOS',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='FCOSHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\nwork_dir = './work_dirs/fcos_r50_caffe_fpn_gn-head_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 4)\n", "seed": 0, "exp_name": "fcos_r50_caffe_fpn_gn-head_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00333, "memory": 7984, "data_time": 0.06562, "loss_cls": 0.54458, "loss_bbox": 0.40257, "loss_centerness": 0.61168, "loss": 1.55882, "grad_norm": 4.70524, "time": 1.069}
{"mode": "val", "epoch": 1, "iter": 72, "lr": 0.00333, "bbox_mAP": 0.168, "bbox_mAP_50": 0.297, "bbox_mAP_75": 0.149, "bbox_mAP_s": 0.154, "bbox_mAP_m": 0.079, "bbox_mAP_l": 0.129, "bbox_mAP_copypaste": "0.168 0.297 0.149 0.154 0.079 0.129"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00333, "memory": 7984, "data_time": 0.06213, "loss_cls": 0.29384, "loss_bbox": 0.32475, "loss_centerness": 0.59988, "loss": 1.21847, "grad_norm": 3.90215, "time": 1.12297}
{"mode": "val", "epoch": 2, "iter": 72, "lr": 0.00333, "bbox_mAP": 0.208, "bbox_mAP_50": 0.359, "bbox_mAP_75": 0.206, "bbox_mAP_s": 0.18, "bbox_mAP_m": 0.12, "bbox_mAP_l": 0.165, "bbox_mAP_copypaste": "0.208 0.359 0.206 0.180 0.120 0.165"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00333, "memory": 7984, "data_time": 0.06288, "loss_cls": 0.24954, "loss_bbox": 0.30251, "loss_centerness": 0.59513, "loss": 1.14718, "grad_norm": 3.70368, "time": 1.07697}
{"mode": "val", "epoch": 3, "iter": 72, "lr": 0.00333, "bbox_mAP": 0.239, "bbox_mAP_50": 0.411, "bbox_mAP_75": 0.231, "bbox_mAP_s": 0.225, "bbox_mAP_m": 0.133, "bbox_mAP_l": 0.196, "bbox_mAP_copypaste": "0.239 0.411 0.231 0.225 0.133 0.196"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00333, "memory": 7984, "data_time": 0.06327, "loss_cls": 0.22207, "loss_bbox": 0.28241, "loss_centerness": 0.5921, "loss": 1.09658, "grad_norm": 3.73568, "time": 1.05764}
{"mode": "val", "epoch": 4, "iter": 72, "lr": 0.00333, "bbox_mAP": 0.233, "bbox_mAP_50": 0.412, "bbox_mAP_75": 0.219, "bbox_mAP_s": 0.248, "bbox_mAP_m": 0.149, "bbox_mAP_l": 0.187, "bbox_mAP_copypaste": "0.233 0.412 0.219 0.248 0.149 0.187"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00333, "memory": 7984, "data_time": 0.06245, "loss_cls": 0.20132, "loss_bbox": 0.26038, "loss_centerness": 0.58862, "loss": 1.05032, "grad_norm": 3.56443, "time": 1.05175}
{"mode": "val", "epoch": 5, "iter": 72, "lr": 0.00333, "bbox_mAP": 0.266, "bbox_mAP_50": 0.435, "bbox_mAP_75": 0.27, "bbox_mAP_s": 0.171, "bbox_mAP_m": 0.14, "bbox_mAP_l": 0.235, "bbox_mAP_copypaste": "0.266 0.435 0.270 0.171 0.140 0.235"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.00333, "memory": 7984, "data_time": 0.06542, "loss_cls": 0.18456, "loss_bbox": 0.24349, "loss_centerness": 0.58592, "loss": 1.01396, "grad_norm": 3.56241, "time": 1.02214}
{"mode": "val", "epoch": 6, "iter": 72, "lr": 0.00333, "bbox_mAP": 0.263, "bbox_mAP_50": 0.451, "bbox_mAP_75": 0.273, "bbox_mAP_s": 0.156, "bbox_mAP_m": 0.146, "bbox_mAP_l": 0.219, "bbox_mAP_copypaste": "0.263 0.451 0.273 0.156 0.146 0.219"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.00333, "memory": 7984, "data_time": 0.06535, "loss_cls": 0.16461, "loss_bbox": 0.22841, "loss_centerness": 0.58298, "loss": 0.976, "grad_norm": 3.62016, "time": 1.0257}
{"mode": "val", "epoch": 7, "iter": 72, "lr": 0.00333, "bbox_mAP": 0.27, "bbox_mAP_50": 0.453, "bbox_mAP_75": 0.269, "bbox_mAP_s": 0.169, "bbox_mAP_m": 0.151, "bbox_mAP_l": 0.221, "bbox_mAP_copypaste": "0.270 0.453 0.269 0.169 0.151 0.221"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.00333, "memory": 7984, "data_time": 0.06867, "loss_cls": 0.14846, "loss_bbox": 0.21559, "loss_centerness": 0.58154, "loss": 0.94559, "grad_norm": 3.55826, "time": 1.13684}
{"mode": "val", "epoch": 8, "iter": 72, "lr": 0.00333, "bbox_mAP": 0.264, "bbox_mAP_50": 0.451, "bbox_mAP_75": 0.259, "bbox_mAP_s": 0.164, "bbox_mAP_m": 0.14, "bbox_mAP_l": 0.24, "bbox_mAP_copypaste": "0.264 0.451 0.259 0.164 0.140 0.240"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.001, "memory": 7984, "data_time": 0.0714, "loss_cls": 0.12737, "loss_bbox": 0.18899, "loss_centerness": 0.57752, "loss": 0.89388, "grad_norm": 3.12444, "time": 1.05537}
{"mode": "val", "epoch": 9, "iter": 72, "lr": 0.001, "bbox_mAP": 0.28, "bbox_mAP_50": 0.48, "bbox_mAP_75": 0.266, "bbox_mAP_s": 0.202, "bbox_mAP_m": 0.148, "bbox_mAP_l": 0.245, "bbox_mAP_copypaste": "0.280 0.480 0.266 0.202 0.148 0.245"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.001, "memory": 7984, "data_time": 0.06628, "loss_cls": 0.11141, "loss_bbox": 0.17599, "loss_centerness": 0.57676, "loss": 0.86416, "grad_norm": 2.97107, "time": 1.08616}
{"mode": "val", "epoch": 10, "iter": 72, "lr": 0.001, "bbox_mAP": 0.279, "bbox_mAP_50": 0.468, "bbox_mAP_75": 0.284, "bbox_mAP_s": 0.158, "bbox_mAP_m": 0.139, "bbox_mAP_l": 0.249, "bbox_mAP_copypaste": "0.279 0.468 0.284 0.158 0.139 0.249"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.001, "memory": 7984, "data_time": 0.06505, "loss_cls": 0.10494, "loss_bbox": 0.17053, "loss_centerness": 0.57573, "loss": 0.85121, "grad_norm": 2.89773, "time": 1.0286}
{"mode": "val", "epoch": 11, "iter": 72, "lr": 0.001, "bbox_mAP": 0.286, "bbox_mAP_50": 0.468, "bbox_mAP_75": 0.299, "bbox_mAP_s": 0.222, "bbox_mAP_m": 0.149, "bbox_mAP_l": 0.257, "bbox_mAP_copypaste": "0.286 0.468 0.299 0.222 0.149 0.257"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0001, "memory": 7984, "data_time": 0.06829, "loss_cls": 0.1005, "loss_bbox": 0.16051, "loss_centerness": 0.57431, "loss": 0.83532, "grad_norm": 2.68789, "time": 1.06021}
{"mode": "val", "epoch": 12, "iter": 72, "lr": 0.0001, "bbox_mAP": 0.284, "bbox_mAP_50": 0.466, "bbox_mAP_75": 0.29, "bbox_mAP_s": 0.179, "bbox_mAP_m": 0.149, "bbox_mAP_l": 0.253, "bbox_mAP_copypaste": "0.284 0.466 0.290 0.179 0.149 0.253"}
