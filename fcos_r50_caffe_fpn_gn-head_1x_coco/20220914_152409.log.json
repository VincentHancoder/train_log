{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train5.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val5.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val5.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='SGD',\n    lr=0.01,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='constant',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/fcos_r50_caffe_fpn_gn-head_1x_coco-821213aa.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='FCOS',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='FCOSHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\nwork_dir = './work_dirs/fcos_r50_caffe_fpn_gn-head_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 3)\n", "seed": 0, "exp_name": "fcos_r50_caffe_fpn_gn-head_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00333, "memory": 7986, "data_time": 0.06256, "loss_cls": 0.60939, "loss_bbox": 0.40768, "loss_centerness": 0.61288, "loss": 1.62995, "grad_norm": 5.79611, "time": 0.94361}
{"mode": "val", "epoch": 1, "iter": 96, "lr": 0.00333, "bbox_mAP": 0.162, "bbox_mAP_50": 0.314, "bbox_mAP_75": 0.152, "bbox_mAP_s": 0.152, "bbox_mAP_m": 0.11, "bbox_mAP_l": 0.184, "bbox_mAP_copypaste": "0.162 0.314 0.152 0.152 0.110 0.184"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00333, "memory": 7986, "data_time": 0.06138, "loss_cls": 0.29526, "loss_bbox": 0.32381, "loss_centerness": 0.59626, "loss": 1.21533, "grad_norm": 3.75126, "time": 0.94054}
{"mode": "val", "epoch": 2, "iter": 96, "lr": 0.00333, "bbox_mAP": 0.206, "bbox_mAP_50": 0.399, "bbox_mAP_75": 0.173, "bbox_mAP_s": 0.217, "bbox_mAP_m": 0.16, "bbox_mAP_l": 0.257, "bbox_mAP_copypaste": "0.206 0.399 0.173 0.217 0.160 0.257"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00333, "memory": 7986, "data_time": 0.06167, "loss_cls": 0.24566, "loss_bbox": 0.29211, "loss_centerness": 0.59141, "loss": 1.12918, "grad_norm": 3.81636, "time": 0.93834}
{"mode": "val", "epoch": 3, "iter": 96, "lr": 0.00333, "bbox_mAP": 0.223, "bbox_mAP_50": 0.418, "bbox_mAP_75": 0.202, "bbox_mAP_s": 0.265, "bbox_mAP_m": 0.17, "bbox_mAP_l": 0.249, "bbox_mAP_copypaste": "0.223 0.418 0.202 0.265 0.170 0.249"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00333, "memory": 7986, "data_time": 0.06231, "loss_cls": 0.22901, "loss_bbox": 0.2769, "loss_centerness": 0.59136, "loss": 1.09728, "grad_norm": 4.00837, "time": 0.93854}
{"mode": "val", "epoch": 4, "iter": 96, "lr": 0.00333, "bbox_mAP": 0.255, "bbox_mAP_50": 0.478, "bbox_mAP_75": 0.24, "bbox_mAP_s": 0.193, "bbox_mAP_m": 0.185, "bbox_mAP_l": 0.331, "bbox_mAP_copypaste": "0.255 0.478 0.240 0.193 0.185 0.331"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00333, "memory": 7986, "data_time": 0.06286, "loss_cls": 0.19359, "loss_bbox": 0.25719, "loss_centerness": 0.58821, "loss": 1.03899, "grad_norm": 3.87249, "time": 0.93974}
{"mode": "val", "epoch": 5, "iter": 96, "lr": 0.00333, "bbox_mAP": 0.26, "bbox_mAP_50": 0.498, "bbox_mAP_75": 0.214, "bbox_mAP_s": 0.246, "bbox_mAP_m": 0.201, "bbox_mAP_l": 0.313, "bbox_mAP_copypaste": "0.260 0.498 0.214 0.246 0.201 0.313"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.00333, "memory": 7986, "data_time": 0.06496, "loss_cls": 0.17024, "loss_bbox": 0.2376, "loss_centerness": 0.58402, "loss": 0.99187, "grad_norm": 3.73932, "time": 0.94654}
{"mode": "val", "epoch": 6, "iter": 96, "lr": 0.00333, "bbox_mAP": 0.259, "bbox_mAP_50": 0.487, "bbox_mAP_75": 0.2, "bbox_mAP_s": 0.198, "bbox_mAP_m": 0.194, "bbox_mAP_l": 0.331, "bbox_mAP_copypaste": "0.259 0.487 0.200 0.198 0.194 0.331"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 7986, "data_time": 0.06237, "loss_cls": 0.19083, "loss_bbox": 0.25306, "loss_centerness": 0.58529, "loss": 1.02918, "grad_norm": 4.44146, "time": 0.94276}
{"mode": "val", "epoch": 7, "iter": 96, "lr": 0.01, "bbox_mAP": 0.164, "bbox_mAP_50": 0.351, "bbox_mAP_75": 0.141, "bbox_mAP_s": 0.203, "bbox_mAP_m": 0.16, "bbox_mAP_l": 0.169, "bbox_mAP_copypaste": "0.164 0.351 0.141 0.203 0.160 0.169"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 7986, "data_time": 0.06114, "loss_cls": 0.25848, "loss_bbox": 0.34415, "loss_centerness": 0.59579, "loss": 1.19841, "grad_norm": 4.45359, "time": 0.93923}
{"mode": "val", "epoch": 8, "iter": 96, "lr": 0.01, "bbox_mAP": 0.195, "bbox_mAP_50": 0.412, "bbox_mAP_75": 0.16, "bbox_mAP_s": 0.189, "bbox_mAP_m": 0.189, "bbox_mAP_l": 0.203, "bbox_mAP_copypaste": "0.195 0.412 0.160 0.189 0.189 0.203"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.001, "memory": 7986, "data_time": 0.06107, "loss_cls": 0.1906, "loss_bbox": 0.26309, "loss_centerness": 0.59054, "loss": 1.04424, "grad_norm": 2.84167, "time": 0.93824}
{"mode": "val", "epoch": 9, "iter": 96, "lr": 0.001, "bbox_mAP": 0.26, "bbox_mAP_50": 0.518, "bbox_mAP_75": 0.206, "bbox_mAP_s": 0.211, "bbox_mAP_m": 0.268, "bbox_mAP_l": 0.29, "bbox_mAP_copypaste": "0.260 0.518 0.206 0.211 0.268 0.290"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.001, "memory": 7986, "data_time": 0.06071, "loss_cls": 0.15992, "loss_bbox": 0.22628, "loss_centerness": 0.58332, "loss": 0.96952, "grad_norm": 2.68971, "time": 0.94793}
{"mode": "val", "epoch": 10, "iter": 96, "lr": 0.001, "bbox_mAP": 0.282, "bbox_mAP_50": 0.544, "bbox_mAP_75": 0.226, "bbox_mAP_s": 0.211, "bbox_mAP_m": 0.277, "bbox_mAP_l": 0.324, "bbox_mAP_copypaste": "0.282 0.544 0.226 0.211 0.277 0.324"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.001, "memory": 7986, "data_time": 0.06596, "loss_cls": 0.14943, "loss_bbox": 0.21243, "loss_centerness": 0.58374, "loss": 0.9456, "grad_norm": 2.72698, "time": 0.94203}
{"mode": "val", "epoch": 11, "iter": 96, "lr": 0.001, "bbox_mAP": 0.284, "bbox_mAP_50": 0.557, "bbox_mAP_75": 0.223, "bbox_mAP_s": 0.227, "bbox_mAP_m": 0.293, "bbox_mAP_l": 0.325, "bbox_mAP_copypaste": "0.284 0.557 0.223 0.227 0.293 0.325"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0001, "memory": 7986, "data_time": 0.06318, "loss_cls": 0.13695, "loss_bbox": 0.2021, "loss_centerness": 0.58057, "loss": 0.91961, "grad_norm": 2.62498, "time": 0.93741}
{"mode": "val", "epoch": 12, "iter": 96, "lr": 0.0001, "bbox_mAP": 0.292, "bbox_mAP_50": 0.558, "bbox_mAP_75": 0.222, "bbox_mAP_s": 0.223, "bbox_mAP_m": 0.304, "bbox_mAP_l": 0.334, "bbox_mAP_copypaste": "0.292 0.558 0.222 0.223 0.304 0.334"}
