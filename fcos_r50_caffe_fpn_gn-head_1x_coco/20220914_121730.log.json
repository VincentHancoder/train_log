{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train3.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val3.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val3.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='SGD',\n    lr=0.01,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='constant',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/fcos_r50_caffe_fpn_gn-head_1x_coco-821213aa.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='FCOS',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='FCOSHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\nwork_dir = './work_dirs/fcos_r50_caffe_fpn_gn-head_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "fcos_r50_caffe_fpn_gn-head_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00333, "memory": 7984, "data_time": 0.06486, "loss_cls": 0.67567, "loss_bbox": 0.45311, "loss_centerness": 0.61575, "loss": 1.74453, "grad_norm": 8.0751, "time": 0.69345}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00333, "memory": 7984, "data_time": 0.0164, "loss_cls": 0.38381, "loss_bbox": 0.38665, "loss_centerness": 0.60821, "loss": 1.37867, "grad_norm": 5.00879, "time": 0.64297}
{"mode": "val", "epoch": 1, "iter": 144, "lr": 0.00333, "bbox_mAP": 0.173, "bbox_mAP_50": 0.345, "bbox_mAP_75": 0.153, "bbox_mAP_s": 0.129, "bbox_mAP_m": 0.092, "bbox_mAP_l": 0.198, "bbox_mAP_copypaste": "0.173 0.345 0.153 0.129 0.092 0.198"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00333, "memory": 7984, "data_time": 0.06414, "loss_cls": 0.29387, "loss_bbox": 0.33911, "loss_centerness": 0.59703, "loss": 1.23001, "grad_norm": 4.50248, "time": 0.69198}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00333, "memory": 7984, "data_time": 0.01484, "loss_cls": 0.31551, "loss_bbox": 0.34543, "loss_centerness": 0.59907, "loss": 1.26001, "grad_norm": 4.6346, "time": 0.63898}
{"mode": "val", "epoch": 2, "iter": 144, "lr": 0.00333, "bbox_mAP": 0.223, "bbox_mAP_50": 0.405, "bbox_mAP_75": 0.207, "bbox_mAP_s": 0.143, "bbox_mAP_m": 0.161, "bbox_mAP_l": 0.257, "bbox_mAP_copypaste": "0.223 0.405 0.207 0.143 0.161 0.257"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00333, "memory": 7984, "data_time": 0.06523, "loss_cls": 0.2539, "loss_bbox": 0.30522, "loss_centerness": 0.59535, "loss": 1.15448, "grad_norm": 4.05376, "time": 0.69455}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00333, "memory": 7984, "data_time": 0.01553, "loss_cls": 0.25064, "loss_bbox": 0.29052, "loss_centerness": 0.59074, "loss": 1.1319, "grad_norm": 4.33055, "time": 0.64124}
{"mode": "val", "epoch": 3, "iter": 144, "lr": 0.00333, "bbox_mAP": 0.212, "bbox_mAP_50": 0.438, "bbox_mAP_75": 0.17, "bbox_mAP_s": 0.137, "bbox_mAP_m": 0.133, "bbox_mAP_l": 0.408, "bbox_mAP_copypaste": "0.212 0.438 0.170 0.137 0.133 0.408"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00333, "memory": 7984, "data_time": 0.06534, "loss_cls": 0.22068, "loss_bbox": 0.28745, "loss_centerness": 0.59026, "loss": 1.09839, "grad_norm": 4.35666, "time": 0.69658}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.00333, "memory": 7985, "data_time": 0.01509, "loss_cls": 0.21731, "loss_bbox": 0.27635, "loss_centerness": 0.58995, "loss": 1.08361, "grad_norm": 4.20356, "time": 0.64008}
{"mode": "val", "epoch": 4, "iter": 144, "lr": 0.00333, "bbox_mAP": 0.253, "bbox_mAP_50": 0.482, "bbox_mAP_75": 0.224, "bbox_mAP_s": 0.282, "bbox_mAP_m": 0.184, "bbox_mAP_l": 0.349, "bbox_mAP_copypaste": "0.253 0.482 0.224 0.282 0.184 0.349"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.01, "memory": 7985, "data_time": 0.065, "loss_cls": 0.21388, "loss_bbox": 0.2928, "loss_centerness": 0.58959, "loss": 1.09627, "grad_norm": 4.45525, "time": 0.6903}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.01, "memory": 7985, "data_time": 0.01739, "loss_cls": 0.28003, "loss_bbox": 0.39387, "loss_centerness": 0.59971, "loss": 1.27361, "grad_norm": 4.69264, "time": 0.64664}
{"mode": "val", "epoch": 5, "iter": 144, "lr": 0.01, "bbox_mAP": 0.129, "bbox_mAP_50": 0.285, "bbox_mAP_75": 0.119, "bbox_mAP_s": 0.058, "bbox_mAP_m": 0.065, "bbox_mAP_l": 0.181, "bbox_mAP_copypaste": "0.129 0.285 0.119 0.058 0.065 0.181"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01, "memory": 7985, "data_time": 0.06721, "loss_cls": 0.31399, "loss_bbox": 0.39988, "loss_centerness": 0.6, "loss": 1.31387, "grad_norm": 4.80223, "time": 0.69914}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.01, "memory": 7985, "data_time": 0.01847, "loss_cls": 0.26693, "loss_bbox": 0.37718, "loss_centerness": 0.59944, "loss": 1.24356, "grad_norm": 3.963, "time": 0.64814}
{"mode": "val", "epoch": 6, "iter": 144, "lr": 0.01, "bbox_mAP": 0.151, "bbox_mAP_50": 0.408, "bbox_mAP_75": 0.084, "bbox_mAP_s": 0.236, "bbox_mAP_m": 0.147, "bbox_mAP_l": 0.155, "bbox_mAP_copypaste": "0.151 0.408 0.084 0.236 0.147 0.155"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 7985, "data_time": 0.06732, "loss_cls": 0.22854, "loss_bbox": 0.36429, "loss_centerness": 0.59429, "loss": 1.18711, "grad_norm": 3.71858, "time": 0.69625}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.01, "memory": 7985, "data_time": 0.01892, "loss_cls": 0.25738, "loss_bbox": 0.33542, "loss_centerness": 0.59433, "loss": 1.18713, "grad_norm": 4.10271, "time": 0.64668}
{"mode": "val", "epoch": 7, "iter": 144, "lr": 0.01, "bbox_mAP": 0.205, "bbox_mAP_50": 0.429, "bbox_mAP_75": 0.168, "bbox_mAP_s": 0.169, "bbox_mAP_m": 0.172, "bbox_mAP_l": 0.258, "bbox_mAP_copypaste": "0.205 0.429 0.168 0.169 0.172 0.258"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 7985, "data_time": 0.06677, "loss_cls": 0.21562, "loss_bbox": 0.34295, "loss_centerness": 0.59027, "loss": 1.14883, "grad_norm": 3.73898, "time": 0.69273}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.01, "memory": 7985, "data_time": 0.01909, "loss_cls": 0.21142, "loss_bbox": 0.354, "loss_centerness": 0.59043, "loss": 1.15585, "grad_norm": 3.97187, "time": 0.64467}
{"mode": "val", "epoch": 8, "iter": 144, "lr": 0.01, "bbox_mAP": 0.192, "bbox_mAP_50": 0.461, "bbox_mAP_75": 0.112, "bbox_mAP_s": 0.205, "bbox_mAP_m": 0.152, "bbox_mAP_l": 0.207, "bbox_mAP_copypaste": "0.192 0.461 0.112 0.205 0.152 0.207"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.001, "memory": 7985, "data_time": 0.06597, "loss_cls": 0.16595, "loss_bbox": 0.26436, "loss_centerness": 0.58451, "loss": 1.01482, "grad_norm": 2.96594, "time": 0.69542}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.001, "memory": 7985, "data_time": 0.01838, "loss_cls": 0.15006, "loss_bbox": 0.23911, "loss_centerness": 0.5834, "loss": 0.97257, "grad_norm": 2.70453, "time": 0.64863}
{"mode": "val", "epoch": 9, "iter": 144, "lr": 0.001, "bbox_mAP": 0.281, "bbox_mAP_50": 0.518, "bbox_mAP_75": 0.266, "bbox_mAP_s": 0.266, "bbox_mAP_m": 0.227, "bbox_mAP_l": 0.342, "bbox_mAP_copypaste": "0.281 0.518 0.266 0.266 0.227 0.342"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.001, "memory": 7985, "data_time": 0.06633, "loss_cls": 0.13565, "loss_bbox": 0.21582, "loss_centerness": 0.57847, "loss": 0.92994, "grad_norm": 2.62085, "time": 0.69116}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.001, "memory": 7985, "data_time": 0.01751, "loss_cls": 0.13315, "loss_bbox": 0.22417, "loss_centerness": 0.58066, "loss": 0.93798, "grad_norm": 2.54222, "time": 0.64346}
{"mode": "val", "epoch": 10, "iter": 144, "lr": 0.001, "bbox_mAP": 0.283, "bbox_mAP_50": 0.523, "bbox_mAP_75": 0.26, "bbox_mAP_s": 0.249, "bbox_mAP_m": 0.222, "bbox_mAP_l": 0.349, "bbox_mAP_copypaste": "0.283 0.523 0.260 0.249 0.222 0.349"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.001, "memory": 7985, "data_time": 0.06711, "loss_cls": 0.12995, "loss_bbox": 0.20553, "loss_centerness": 0.57792, "loss": 0.9134, "grad_norm": 2.48833, "time": 0.69345}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.001, "memory": 7985, "data_time": 0.01978, "loss_cls": 0.12013, "loss_bbox": 0.20021, "loss_centerness": 0.5785, "loss": 0.89884, "grad_norm": 2.44886, "time": 0.65188}
{"mode": "val", "epoch": 11, "iter": 144, "lr": 0.001, "bbox_mAP": 0.284, "bbox_mAP_50": 0.52, "bbox_mAP_75": 0.268, "bbox_mAP_s": 0.255, "bbox_mAP_m": 0.23, "bbox_mAP_l": 0.354, "bbox_mAP_copypaste": "0.284 0.520 0.268 0.255 0.230 0.354"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0001, "memory": 7985, "data_time": 0.06254, "loss_cls": 0.1199, "loss_bbox": 0.1985, "loss_centerness": 0.57781, "loss": 0.89621, "grad_norm": 2.50211, "time": 0.6818}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0001, "memory": 7985, "data_time": 0.01462, "loss_cls": 0.11984, "loss_bbox": 0.19524, "loss_centerness": 0.57822, "loss": 0.8933, "grad_norm": 2.42109, "time": 0.63514}
{"mode": "val", "epoch": 12, "iter": 144, "lr": 0.0001, "bbox_mAP": 0.291, "bbox_mAP_50": 0.526, "bbox_mAP_75": 0.269, "bbox_mAP_s": 0.292, "bbox_mAP_m": 0.243, "bbox_mAP_l": 0.358, "bbox_mAP_copypaste": "0.291 0.526 0.269 0.292 0.243 0.358"}
