{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/gfl_r50_fpn_1x_coco_20200629_121244-25944287.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='GFL',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5),\n    bbox_head=dict(\n        type='GFLHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            octave_base_scale=8,\n            scales_per_octave=1,\n            strides=[8, 16, 32, 64, 128]),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_dfl=dict(type='DistributionFocalLoss', loss_weight=0.25),\n        reg_max=16,\n        loss_bbox=dict(type='GIoULoss', loss_weight=2.0)),\n    train_cfg=dict(\n        assigner=dict(type='ATSSAssigner', topk=9),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.6),\n        max_per_img=100))\nwork_dir = './work_dirs/gfl_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 4)\n", "seed": 0, "exp_name": "gfl_r50_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 8560, "data_time": 0.06056, "loss_cls": 1.217, "loss_bbox": 0.71676, "loss_dfl": 0.34889, "loss": 2.28266, "time": 0.65066}
{"mode": "val", "epoch": 1, "iter": 72, "lr": 0.00115, "bbox_mAP": 0.123, "bbox_mAP_50": 0.227, "bbox_mAP_75": 0.101, "bbox_mAP_s": 0.084, "bbox_mAP_m": 0.112, "bbox_mAP_l": 0.096, "bbox_mAP_copypaste": "0.123 0.227 0.101 0.084 0.112 0.096"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00215, "memory": 8560, "data_time": 0.06003, "loss_cls": 0.56355, "loss_bbox": 0.5034, "loss_dfl": 0.24357, "loss": 1.31052, "time": 0.65115}
{"mode": "val", "epoch": 2, "iter": 72, "lr": 0.00231, "bbox_mAP": 0.205, "bbox_mAP_50": 0.371, "bbox_mAP_75": 0.18, "bbox_mAP_s": 0.118, "bbox_mAP_m": 0.2, "bbox_mAP_l": 0.176, "bbox_mAP_copypaste": "0.205 0.371 0.180 0.118 0.200 0.176"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00331, "memory": 8560, "data_time": 0.06064, "loss_cls": 0.49867, "loss_bbox": 0.46497, "loss_dfl": 0.23045, "loss": 1.19409, "time": 0.6523}
{"mode": "val", "epoch": 3, "iter": 72, "lr": 0.00347, "bbox_mAP": 0.254, "bbox_mAP_50": 0.445, "bbox_mAP_75": 0.243, "bbox_mAP_s": 0.165, "bbox_mAP_m": 0.223, "bbox_mAP_l": 0.222, "bbox_mAP_copypaste": "0.254 0.445 0.243 0.165 0.223 0.222"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00447, "memory": 8560, "data_time": 0.05849, "loss_cls": 0.44076, "loss_bbox": 0.44474, "loss_dfl": 0.22324, "loss": 1.10875, "time": 0.65085}
{"mode": "val", "epoch": 4, "iter": 72, "lr": 0.00463, "bbox_mAP": 0.263, "bbox_mAP_50": 0.457, "bbox_mAP_75": 0.248, "bbox_mAP_s": 0.145, "bbox_mAP_m": 0.221, "bbox_mAP_l": 0.268, "bbox_mAP_copypaste": "0.263 0.457 0.248 0.145 0.221 0.268"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00562, "memory": 8560, "data_time": 0.06098, "loss_cls": 0.40826, "loss_bbox": 0.424, "loss_dfl": 0.21769, "loss": 1.04995, "time": 0.65159}
{"mode": "val", "epoch": 5, "iter": 72, "lr": 0.00578, "bbox_mAP": 0.288, "bbox_mAP_50": 0.493, "bbox_mAP_75": 0.292, "bbox_mAP_s": 0.215, "bbox_mAP_m": 0.218, "bbox_mAP_l": 0.248, "bbox_mAP_copypaste": "0.288 0.493 0.292 0.215 0.218 0.248"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.00678, "memory": 8560, "data_time": 0.05945, "loss_cls": 0.40821, "loss_bbox": 0.40937, "loss_dfl": 0.2142, "loss": 1.03179, "time": 0.65216}
{"mode": "val", "epoch": 6, "iter": 72, "lr": 0.00694, "bbox_mAP": 0.268, "bbox_mAP_50": 0.474, "bbox_mAP_75": 0.261, "bbox_mAP_s": 0.212, "bbox_mAP_m": 0.245, "bbox_mAP_l": 0.289, "bbox_mAP_copypaste": "0.268 0.474 0.261 0.212 0.245 0.289"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.00794, "memory": 8560, "data_time": 0.05942, "loss_cls": 0.3953, "loss_bbox": 0.41116, "loss_dfl": 0.21465, "loss": 1.02111, "time": 0.65111}
{"mode": "val", "epoch": 7, "iter": 72, "lr": 0.0081, "bbox_mAP": 0.294, "bbox_mAP_50": 0.524, "bbox_mAP_75": 0.285, "bbox_mAP_s": 0.183, "bbox_mAP_m": 0.247, "bbox_mAP_l": 0.27, "bbox_mAP_copypaste": "0.294 0.524 0.285 0.183 0.247 0.270"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.0091, "memory": 8560, "data_time": 0.05965, "loss_cls": 0.36084, "loss_bbox": 0.39834, "loss_dfl": 0.2083, "loss": 0.96748, "time": 0.65336}
{"mode": "val", "epoch": 8, "iter": 72, "lr": 0.00926, "bbox_mAP": 0.277, "bbox_mAP_50": 0.486, "bbox_mAP_75": 0.268, "bbox_mAP_s": 0.23, "bbox_mAP_m": 0.264, "bbox_mAP_l": 0.256, "bbox_mAP_copypaste": "0.277 0.486 0.268 0.230 0.264 0.256"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.001, "memory": 8560, "data_time": 0.06032, "loss_cls": 0.30286, "loss_bbox": 0.37111, "loss_dfl": 0.20071, "loss": 0.87469, "time": 0.65221}
{"mode": "val", "epoch": 9, "iter": 72, "lr": 0.001, "bbox_mAP": 0.353, "bbox_mAP_50": 0.617, "bbox_mAP_75": 0.334, "bbox_mAP_s": 0.304, "bbox_mAP_m": 0.283, "bbox_mAP_l": 0.349, "bbox_mAP_copypaste": "0.353 0.617 0.334 0.304 0.283 0.349"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.001, "memory": 8560, "data_time": 0.06008, "loss_cls": 0.2527, "loss_bbox": 0.33259, "loss_dfl": 0.19051, "loss": 0.7758, "time": 0.65118}
{"mode": "val", "epoch": 10, "iter": 72, "lr": 0.001, "bbox_mAP": 0.374, "bbox_mAP_50": 0.657, "bbox_mAP_75": 0.316, "bbox_mAP_s": 0.287, "bbox_mAP_m": 0.275, "bbox_mAP_l": 0.375, "bbox_mAP_copypaste": "0.374 0.657 0.316 0.287 0.275 0.375"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.001, "memory": 8560, "data_time": 0.05983, "loss_cls": 0.23385, "loss_bbox": 0.32312, "loss_dfl": 0.18695, "loss": 0.74392, "time": 0.6532}
{"mode": "val", "epoch": 11, "iter": 72, "lr": 0.001, "bbox_mAP": 0.375, "bbox_mAP_50": 0.656, "bbox_mAP_75": 0.338, "bbox_mAP_s": 0.284, "bbox_mAP_m": 0.289, "bbox_mAP_l": 0.382, "bbox_mAP_copypaste": "0.375 0.656 0.338 0.284 0.289 0.382"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0001, "memory": 8560, "data_time": 0.06094, "loss_cls": 0.21586, "loss_bbox": 0.30936, "loss_dfl": 0.18365, "loss": 0.70886, "time": 0.65317}
{"mode": "val", "epoch": 12, "iter": 72, "lr": 0.0001, "bbox_mAP": 0.372, "bbox_mAP_50": 0.645, "bbox_mAP_75": 0.341, "bbox_mAP_s": 0.28, "bbox_mAP_m": 0.285, "bbox_mAP_l": 0.385, "bbox_mAP_copypaste": "0.372 0.645 0.341 0.280 0.285 0.385"}
