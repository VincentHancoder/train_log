{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/train4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/val4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/val4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/gfl_r50_fpn_1x_coco_20200629_121244-25944287.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='GFL',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5),\n    bbox_head=dict(\n        type='GFLHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            octave_base_scale=8,\n            scales_per_octave=1,\n            strides=[8, 16, 32, 64, 128]),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_dfl=dict(type='DistributionFocalLoss', loss_weight=0.25),\n        reg_max=16,\n        loss_bbox=dict(type='GIoULoss', loss_weight=2.0)),\n    train_cfg=dict(\n        assigner=dict(type='ATSSAssigner', topk=9),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.6),\n        max_per_img=100))\nwork_dir = './work_dirs/gfl_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 4)\n", "seed": 0, "exp_name": "gfl_r50_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 8560, "data_time": 0.06013, "loss_cls": 1.17572, "loss_bbox": 0.60962, "loss_dfl": 0.34001, "loss": 2.12536, "time": 0.6557}
{"mode": "val", "epoch": 1, "iter": 77, "lr": 0.00105, "bbox_mAP": 0.125, "bbox_mAP_50": 0.162, "bbox_mAP_75": 0.136, "bbox_mAP_s": 0.009, "bbox_mAP_m": 0.153, "bbox_mAP_l": 0.147, "bbox_mAP_copypaste": "0.125 0.162 0.136 0.009 0.153 0.147"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00205, "memory": 8560, "data_time": 0.06019, "loss_cls": 0.63877, "loss_bbox": 0.39958, "loss_dfl": 0.2544, "loss": 1.29275, "time": 0.65524}
{"mode": "val", "epoch": 2, "iter": 77, "lr": 0.00211, "bbox_mAP": 0.167, "bbox_mAP_50": 0.226, "bbox_mAP_75": 0.17, "bbox_mAP_s": 0.049, "bbox_mAP_m": 0.186, "bbox_mAP_l": 0.188, "bbox_mAP_copypaste": "0.167 0.226 0.170 0.049 0.186 0.188"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00311, "memory": 8560, "data_time": 0.05966, "loss_cls": 0.50784, "loss_bbox": 0.36577, "loss_dfl": 0.23417, "loss": 1.10779, "time": 0.65881}
{"mode": "val", "epoch": 3, "iter": 77, "lr": 0.00317, "bbox_mAP": 0.217, "bbox_mAP_50": 0.327, "bbox_mAP_75": 0.214, "bbox_mAP_s": 0.083, "bbox_mAP_m": 0.245, "bbox_mAP_l": 0.245, "bbox_mAP_copypaste": "0.217 0.327 0.214 0.083 0.245 0.245"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00417, "memory": 8560, "data_time": 0.05967, "loss_cls": 0.45122, "loss_bbox": 0.35473, "loss_dfl": 0.22961, "loss": 1.03555, "time": 0.66464}
{"mode": "val", "epoch": 4, "iter": 77, "lr": 0.00423, "bbox_mAP": 0.233, "bbox_mAP_50": 0.372, "bbox_mAP_75": 0.224, "bbox_mAP_s": 0.108, "bbox_mAP_m": 0.274, "bbox_mAP_l": 0.247, "bbox_mAP_copypaste": "0.233 0.372 0.224 0.108 0.274 0.247"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00522, "memory": 8560, "data_time": 0.06031, "loss_cls": 0.42238, "loss_bbox": 0.35479, "loss_dfl": 0.22922, "loss": 1.0064, "time": 0.65685}
{"mode": "val", "epoch": 5, "iter": 77, "lr": 0.00528, "bbox_mAP": 0.245, "bbox_mAP_50": 0.43, "bbox_mAP_75": 0.231, "bbox_mAP_s": 0.107, "bbox_mAP_m": 0.277, "bbox_mAP_l": 0.268, "bbox_mAP_copypaste": "0.245 0.430 0.231 0.107 0.277 0.268"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.00628, "memory": 8560, "data_time": 0.05979, "loss_cls": 0.40002, "loss_bbox": 0.33485, "loss_dfl": 0.21924, "loss": 0.95412, "time": 0.65922}
{"mode": "val", "epoch": 6, "iter": 77, "lr": 0.00634, "bbox_mAP": 0.246, "bbox_mAP_50": 0.427, "bbox_mAP_75": 0.237, "bbox_mAP_s": 0.132, "bbox_mAP_m": 0.283, "bbox_mAP_l": 0.256, "bbox_mAP_copypaste": "0.246 0.427 0.237 0.132 0.283 0.256"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.00734, "memory": 8560, "data_time": 0.05872, "loss_cls": 0.46272, "loss_bbox": 0.32594, "loss_dfl": 0.21471, "loss": 1.00338, "time": 0.65658}
{"mode": "val", "epoch": 7, "iter": 77, "lr": 0.0074, "bbox_mAP": 0.232, "bbox_mAP_50": 0.433, "bbox_mAP_75": 0.211, "bbox_mAP_s": 0.118, "bbox_mAP_m": 0.295, "bbox_mAP_l": 0.239, "bbox_mAP_copypaste": "0.232 0.433 0.211 0.118 0.295 0.239"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.0084, "memory": 8560, "data_time": 0.05982, "loss_cls": 0.38491, "loss_bbox": 0.32223, "loss_dfl": 0.21283, "loss": 0.91996, "time": 0.65917}
{"mode": "val", "epoch": 8, "iter": 77, "lr": 0.00846, "bbox_mAP": 0.258, "bbox_mAP_50": 0.44, "bbox_mAP_75": 0.24, "bbox_mAP_s": 0.152, "bbox_mAP_m": 0.273, "bbox_mAP_l": 0.272, "bbox_mAP_copypaste": "0.258 0.440 0.240 0.152 0.273 0.272"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.00095, "memory": 8560, "data_time": 0.05921, "loss_cls": 0.30683, "loss_bbox": 0.2757, "loss_dfl": 0.1954, "loss": 0.77793, "time": 0.65962}
{"mode": "val", "epoch": 9, "iter": 77, "lr": 0.00095, "bbox_mAP": 0.265, "bbox_mAP_50": 0.483, "bbox_mAP_75": 0.222, "bbox_mAP_s": 0.13, "bbox_mAP_m": 0.283, "bbox_mAP_l": 0.286, "bbox_mAP_copypaste": "0.265 0.483 0.222 0.130 0.283 0.286"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.001, "memory": 8560, "data_time": 0.05956, "loss_cls": 0.2598, "loss_bbox": 0.24911, "loss_dfl": 0.18811, "loss": 0.69701, "time": 0.65912}
{"mode": "val", "epoch": 10, "iter": 77, "lr": 0.001, "bbox_mAP": 0.266, "bbox_mAP_50": 0.489, "bbox_mAP_75": 0.219, "bbox_mAP_s": 0.131, "bbox_mAP_m": 0.286, "bbox_mAP_l": 0.285, "bbox_mAP_copypaste": "0.266 0.489 0.219 0.131 0.286 0.285"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.001, "memory": 8560, "data_time": 0.05892, "loss_cls": 0.23697, "loss_bbox": 0.23411, "loss_dfl": 0.18357, "loss": 0.65464, "time": 0.65794}
{"mode": "val", "epoch": 11, "iter": 77, "lr": 0.001, "bbox_mAP": 0.268, "bbox_mAP_50": 0.509, "bbox_mAP_75": 0.228, "bbox_mAP_s": 0.137, "bbox_mAP_m": 0.295, "bbox_mAP_l": 0.288, "bbox_mAP_copypaste": "0.268 0.509 0.228 0.137 0.295 0.288"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0001, "memory": 8560, "data_time": 0.05971, "loss_cls": 0.21147, "loss_bbox": 0.21198, "loss_dfl": 0.17694, "loss": 0.6004, "time": 0.65917}
{"mode": "val", "epoch": 12, "iter": 77, "lr": 0.0001, "bbox_mAP": 0.271, "bbox_mAP_50": 0.501, "bbox_mAP_75": 0.236, "bbox_mAP_s": 0.14, "bbox_mAP_m": 0.294, "bbox_mAP_l": 0.291, "bbox_mAP_copypaste": "0.271 0.501 0.236 0.140 0.294 0.291"}
