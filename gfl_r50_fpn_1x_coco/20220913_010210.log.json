{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/train2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/gfl_r50_fpn_1x_coco_20200629_121244-25944287.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='GFL',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5),\n    bbox_head=dict(\n        type='GFLHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            octave_base_scale=8,\n            scales_per_octave=1,\n            strides=[8, 16, 32, 64, 128]),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_dfl=dict(type='DistributionFocalLoss', loss_weight=0.25),\n        reg_max=16,\n        loss_bbox=dict(type='GIoULoss', loss_weight=2.0)),\n    train_cfg=dict(\n        assigner=dict(type='ATSSAssigner', topk=9),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.6),\n        max_per_img=100))\nwork_dir = './work_dirs/gfl_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 4)\n", "seed": 0, "exp_name": "gfl_r50_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 8560, "data_time": 0.06221, "loss_cls": 1.18713, "loss_bbox": 0.59273, "loss_dfl": 0.33242, "loss": 2.11228, "time": 0.66416}
{"mode": "val", "epoch": 1, "iter": 77, "lr": 0.00107, "bbox_mAP": 0.105, "bbox_mAP_50": 0.14, "bbox_mAP_75": 0.114, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.021, "bbox_mAP_l": 0.139, "bbox_mAP_copypaste": "0.105 0.140 0.114 0.003 0.021 0.139"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00207, "memory": 8560, "data_time": 0.06053, "loss_cls": 0.62178, "loss_bbox": 0.39073, "loss_dfl": 0.25303, "loss": 1.26553, "time": 0.65953}
{"mode": "val", "epoch": 2, "iter": 77, "lr": 0.00215, "bbox_mAP": 0.149, "bbox_mAP_50": 0.207, "bbox_mAP_75": 0.152, "bbox_mAP_s": 0.046, "bbox_mAP_m": 0.058, "bbox_mAP_l": 0.176, "bbox_mAP_copypaste": "0.149 0.207 0.152 0.046 0.058 0.176"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00315, "memory": 8560, "data_time": 0.06129, "loss_cls": 0.51494, "loss_bbox": 0.37249, "loss_dfl": 0.23859, "loss": 1.12601, "time": 0.65954}
{"mode": "val", "epoch": 3, "iter": 77, "lr": 0.00323, "bbox_mAP": 0.198, "bbox_mAP_50": 0.311, "bbox_mAP_75": 0.187, "bbox_mAP_s": 0.09, "bbox_mAP_m": 0.121, "bbox_mAP_l": 0.265, "bbox_mAP_copypaste": "0.198 0.311 0.187 0.090 0.121 0.265"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00423, "memory": 8560, "data_time": 0.06246, "loss_cls": 0.48902, "loss_bbox": 0.34573, "loss_dfl": 0.22685, "loss": 1.06159, "time": 0.66466}
{"mode": "val", "epoch": 4, "iter": 77, "lr": 0.00431, "bbox_mAP": 0.212, "bbox_mAP_50": 0.34, "bbox_mAP_75": 0.21, "bbox_mAP_s": 0.092, "bbox_mAP_m": 0.129, "bbox_mAP_l": 0.286, "bbox_mAP_copypaste": "0.212 0.340 0.210 0.092 0.129 0.286"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.0053, "memory": 8560, "data_time": 0.06217, "loss_cls": 0.43401, "loss_bbox": 0.3494, "loss_dfl": 0.22606, "loss": 1.00947, "time": 0.66074}
{"mode": "val", "epoch": 5, "iter": 77, "lr": 0.00538, "bbox_mAP": 0.23, "bbox_mAP_50": 0.375, "bbox_mAP_75": 0.225, "bbox_mAP_s": 0.128, "bbox_mAP_m": 0.147, "bbox_mAP_l": 0.274, "bbox_mAP_copypaste": "0.230 0.375 0.225 0.128 0.147 0.274"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.00638, "memory": 8560, "data_time": 0.06152, "loss_cls": 0.40885, "loss_bbox": 0.33664, "loss_dfl": 0.22184, "loss": 0.96732, "time": 0.66079}
{"mode": "val", "epoch": 6, "iter": 77, "lr": 0.00646, "bbox_mAP": 0.226, "bbox_mAP_50": 0.364, "bbox_mAP_75": 0.233, "bbox_mAP_s": 0.136, "bbox_mAP_m": 0.158, "bbox_mAP_l": 0.299, "bbox_mAP_copypaste": "0.226 0.364 0.233 0.136 0.158 0.299"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.00746, "memory": 8560, "data_time": 0.06136, "loss_cls": 0.39677, "loss_bbox": 0.32018, "loss_dfl": 0.21367, "loss": 0.93062, "time": 0.66211}
{"mode": "val", "epoch": 7, "iter": 77, "lr": 0.00754, "bbox_mAP": 0.222, "bbox_mAP_50": 0.377, "bbox_mAP_75": 0.214, "bbox_mAP_s": 0.155, "bbox_mAP_m": 0.174, "bbox_mAP_l": 0.236, "bbox_mAP_copypaste": "0.222 0.377 0.214 0.155 0.174 0.236"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.00854, "memory": 8560, "data_time": 0.06281, "loss_cls": 0.4122, "loss_bbox": 0.31709, "loss_dfl": 0.21159, "loss": 0.94088, "time": 0.66347}
{"mode": "val", "epoch": 8, "iter": 77, "lr": 0.00862, "bbox_mAP": 0.217, "bbox_mAP_50": 0.37, "bbox_mAP_75": 0.194, "bbox_mAP_s": 0.136, "bbox_mAP_m": 0.158, "bbox_mAP_l": 0.244, "bbox_mAP_copypaste": "0.217 0.370 0.194 0.136 0.158 0.244"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.00096, "memory": 8560, "data_time": 0.06209, "loss_cls": 0.32834, "loss_bbox": 0.28601, "loss_dfl": 0.20137, "loss": 0.81572, "time": 0.66211}
{"mode": "val", "epoch": 9, "iter": 77, "lr": 0.00097, "bbox_mAP": 0.257, "bbox_mAP_50": 0.421, "bbox_mAP_75": 0.253, "bbox_mAP_s": 0.158, "bbox_mAP_m": 0.184, "bbox_mAP_l": 0.305, "bbox_mAP_copypaste": "0.257 0.421 0.253 0.158 0.184 0.305"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.001, "memory": 8560, "data_time": 0.06336, "loss_cls": 0.2717, "loss_bbox": 0.25217, "loss_dfl": 0.19066, "loss": 0.71453, "time": 0.6615}
{"mode": "val", "epoch": 10, "iter": 77, "lr": 0.001, "bbox_mAP": 0.269, "bbox_mAP_50": 0.439, "bbox_mAP_75": 0.263, "bbox_mAP_s": 0.163, "bbox_mAP_m": 0.197, "bbox_mAP_l": 0.321, "bbox_mAP_copypaste": "0.269 0.439 0.263 0.163 0.197 0.321"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.001, "memory": 8560, "data_time": 0.0621, "loss_cls": 0.24574, "loss_bbox": 0.23101, "loss_dfl": 0.18429, "loss": 0.66105, "time": 0.66252}
{"mode": "val", "epoch": 11, "iter": 77, "lr": 0.001, "bbox_mAP": 0.28, "bbox_mAP_50": 0.454, "bbox_mAP_75": 0.267, "bbox_mAP_s": 0.168, "bbox_mAP_m": 0.2, "bbox_mAP_l": 0.351, "bbox_mAP_copypaste": "0.280 0.454 0.267 0.168 0.200 0.351"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0001, "memory": 8560, "data_time": 0.06037, "loss_cls": 0.2236, "loss_bbox": 0.22312, "loss_dfl": 0.18128, "loss": 0.628, "time": 0.65723}
{"mode": "val", "epoch": 12, "iter": 77, "lr": 0.0001, "bbox_mAP": 0.281, "bbox_mAP_50": 0.454, "bbox_mAP_75": 0.275, "bbox_mAP_s": 0.169, "bbox_mAP_m": 0.199, "bbox_mAP_l": 0.351, "bbox_mAP_copypaste": "0.281 0.454 0.275 0.169 0.199 0.351"}
