{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/train3.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/val3.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/val3.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/gfl_r50_fpn_1x_coco_20200629_121244-25944287.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='GFL',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5),\n    bbox_head=dict(\n        type='GFLHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            octave_base_scale=8,\n            scales_per_octave=1,\n            strides=[8, 16, 32, 64, 128]),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_dfl=dict(type='DistributionFocalLoss', loss_weight=0.25),\n        reg_max=16,\n        loss_bbox=dict(type='GIoULoss', loss_weight=2.0)),\n    train_cfg=dict(\n        assigner=dict(type='ATSSAssigner', topk=9),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.6),\n        max_per_img=100))\nwork_dir = './work_dirs/gfl_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 4)\n", "seed": 0, "exp_name": "gfl_r50_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 8560, "data_time": 0.06038, "loss_cls": 1.19835, "loss_bbox": 0.60103, "loss_dfl": 0.33894, "loss": 2.13831, "time": 0.66038}
{"mode": "val", "epoch": 1, "iter": 77, "lr": 0.00105, "bbox_mAP": 0.115, "bbox_mAP_50": 0.157, "bbox_mAP_75": 0.125, "bbox_mAP_s": 0.019, "bbox_mAP_m": 0.037, "bbox_mAP_l": 0.135, "bbox_mAP_copypaste": "0.115 0.157 0.125 0.019 0.037 0.135"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00205, "memory": 8560, "data_time": 0.05947, "loss_cls": 0.62681, "loss_bbox": 0.39487, "loss_dfl": 0.2543, "loss": 1.27599, "time": 0.65867}
{"mode": "val", "epoch": 2, "iter": 77, "lr": 0.00211, "bbox_mAP": 0.167, "bbox_mAP_50": 0.238, "bbox_mAP_75": 0.174, "bbox_mAP_s": 0.059, "bbox_mAP_m": 0.093, "bbox_mAP_l": 0.198, "bbox_mAP_copypaste": "0.167 0.238 0.174 0.059 0.093 0.198"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00311, "memory": 8560, "data_time": 0.06087, "loss_cls": 0.52852, "loss_bbox": 0.36643, "loss_dfl": 0.23798, "loss": 1.13293, "time": 0.66155}
{"mode": "val", "epoch": 3, "iter": 77, "lr": 0.00317, "bbox_mAP": 0.21, "bbox_mAP_50": 0.326, "bbox_mAP_75": 0.209, "bbox_mAP_s": 0.081, "bbox_mAP_m": 0.135, "bbox_mAP_l": 0.253, "bbox_mAP_copypaste": "0.210 0.326 0.209 0.081 0.135 0.253"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00417, "memory": 8560, "data_time": 0.06019, "loss_cls": 0.4894, "loss_bbox": 0.3572, "loss_dfl": 0.23119, "loss": 1.07779, "time": 0.66086}
{"mode": "val", "epoch": 4, "iter": 77, "lr": 0.00423, "bbox_mAP": 0.235, "bbox_mAP_50": 0.385, "bbox_mAP_75": 0.217, "bbox_mAP_s": 0.125, "bbox_mAP_m": 0.214, "bbox_mAP_l": 0.281, "bbox_mAP_copypaste": "0.235 0.385 0.217 0.125 0.214 0.281"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00522, "memory": 8560, "data_time": 0.06121, "loss_cls": 0.45923, "loss_bbox": 0.3523, "loss_dfl": 0.22777, "loss": 1.0393, "time": 0.66144}
{"mode": "val", "epoch": 5, "iter": 77, "lr": 0.00528, "bbox_mAP": 0.263, "bbox_mAP_50": 0.437, "bbox_mAP_75": 0.232, "bbox_mAP_s": 0.131, "bbox_mAP_m": 0.207, "bbox_mAP_l": 0.3, "bbox_mAP_copypaste": "0.263 0.437 0.232 0.131 0.207 0.300"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.00628, "memory": 8560, "data_time": 0.06039, "loss_cls": 0.44717, "loss_bbox": 0.33666, "loss_dfl": 0.22158, "loss": 1.00542, "time": 0.6606}
{"mode": "val", "epoch": 6, "iter": 77, "lr": 0.00634, "bbox_mAP": 0.274, "bbox_mAP_50": 0.456, "bbox_mAP_75": 0.274, "bbox_mAP_s": 0.107, "bbox_mAP_m": 0.233, "bbox_mAP_l": 0.321, "bbox_mAP_copypaste": "0.274 0.456 0.274 0.107 0.233 0.321"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.00734, "memory": 8560, "data_time": 0.06, "loss_cls": 0.39741, "loss_bbox": 0.3268, "loss_dfl": 0.21504, "loss": 0.93926, "time": 0.66021}
{"mode": "val", "epoch": 7, "iter": 77, "lr": 0.0074, "bbox_mAP": 0.264, "bbox_mAP_50": 0.446, "bbox_mAP_75": 0.239, "bbox_mAP_s": 0.13, "bbox_mAP_m": 0.214, "bbox_mAP_l": 0.316, "bbox_mAP_copypaste": "0.264 0.446 0.239 0.130 0.214 0.316"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.0084, "memory": 8560, "data_time": 0.06071, "loss_cls": 0.455, "loss_bbox": 0.31945, "loss_dfl": 0.21606, "loss": 0.99052, "time": 0.65875}
{"mode": "val", "epoch": 8, "iter": 77, "lr": 0.00846, "bbox_mAP": 0.26, "bbox_mAP_50": 0.444, "bbox_mAP_75": 0.242, "bbox_mAP_s": 0.128, "bbox_mAP_m": 0.235, "bbox_mAP_l": 0.324, "bbox_mAP_copypaste": "0.260 0.444 0.242 0.128 0.235 0.324"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.00095, "memory": 8560, "data_time": 0.05985, "loss_cls": 0.34902, "loss_bbox": 0.28875, "loss_dfl": 0.20336, "loss": 0.84113, "time": 0.65917}
{"mode": "val", "epoch": 9, "iter": 77, "lr": 0.00095, "bbox_mAP": 0.293, "bbox_mAP_50": 0.475, "bbox_mAP_75": 0.272, "bbox_mAP_s": 0.137, "bbox_mAP_m": 0.267, "bbox_mAP_l": 0.361, "bbox_mAP_copypaste": "0.293 0.475 0.272 0.137 0.267 0.361"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.001, "memory": 8560, "data_time": 0.05991, "loss_cls": 0.30019, "loss_bbox": 0.26169, "loss_dfl": 0.19532, "loss": 0.75719, "time": 0.65944}
{"mode": "val", "epoch": 10, "iter": 77, "lr": 0.001, "bbox_mAP": 0.295, "bbox_mAP_50": 0.482, "bbox_mAP_75": 0.283, "bbox_mAP_s": 0.142, "bbox_mAP_m": 0.274, "bbox_mAP_l": 0.359, "bbox_mAP_copypaste": "0.295 0.482 0.283 0.142 0.274 0.359"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.001, "memory": 8560, "data_time": 0.05976, "loss_cls": 0.26977, "loss_bbox": 0.24503, "loss_dfl": 0.18977, "loss": 0.70457, "time": 0.6586}
{"mode": "val", "epoch": 11, "iter": 77, "lr": 0.001, "bbox_mAP": 0.299, "bbox_mAP_50": 0.49, "bbox_mAP_75": 0.282, "bbox_mAP_s": 0.128, "bbox_mAP_m": 0.274, "bbox_mAP_l": 0.362, "bbox_mAP_copypaste": "0.299 0.490 0.282 0.128 0.274 0.362"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0001, "memory": 8560, "data_time": 0.06031, "loss_cls": 0.24119, "loss_bbox": 0.22488, "loss_dfl": 0.18264, "loss": 0.64871, "time": 0.66}
{"mode": "val", "epoch": 12, "iter": 77, "lr": 0.0001, "bbox_mAP": 0.301, "bbox_mAP_50": 0.497, "bbox_mAP_75": 0.283, "bbox_mAP_s": 0.137, "bbox_mAP_m": 0.278, "bbox_mAP_l": 0.37, "bbox_mAP_copypaste": "0.301 0.497 0.283 0.137 0.278 0.370"}
