{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train5.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val5.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val5.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/cascade_rcnn_r50_fpn_1x_coco_20200316-3dc56deb.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=8,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=8,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=8,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn'\nauto_resume = False\ngpu_ids = range(0, 3)\n", "seed": 0, "exp_name": "cascade_rcnn_r50_fpn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 10512, "data_time": 0.06406, "loss_rpn_cls": 0.09373, "loss_rpn_bbox": 0.02085, "s0.loss_cls": 0.62551, "s0.acc": 84.22526, "s0.loss_bbox": 0.07895, "s1.loss_cls": 0.34204, "s1.acc": 82.06934, "s1.loss_bbox": 0.06651, "s2.loss_cls": 0.17042, "s2.acc": 80.86947, "s2.loss_bbox": 0.02429, "loss": 1.42231, "time": 0.76282}
{"mode": "val", "epoch": 1, "iter": 96, "lr": 0.0031, "bbox_mAP": 0.093, "bbox_mAP_50": 0.189, "bbox_mAP_75": 0.07, "bbox_mAP_s": 0.143, "bbox_mAP_m": 0.074, "bbox_mAP_l": 0.084, "bbox_mAP_copypaste": "0.093 0.189 0.070 0.143 0.074 0.084"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00509, "memory": 10512, "data_time": 0.06201, "loss_rpn_cls": 0.00973, "loss_rpn_bbox": 0.01576, "s0.loss_cls": 0.15722, "s0.acc": 94.93392, "s0.loss_bbox": 0.07354, "s1.loss_cls": 0.09738, "s1.acc": 93.5973, "s1.loss_bbox": 0.08938, "s2.loss_cls": 0.05505, "s2.acc": 93.76495, "s2.loss_bbox": 0.04373, "loss": 0.54179, "time": 0.77331}
{"mode": "val", "epoch": 2, "iter": 96, "lr": 0.00621, "bbox_mAP": 0.181, "bbox_mAP_50": 0.323, "bbox_mAP_75": 0.162, "bbox_mAP_s": 0.282, "bbox_mAP_m": 0.108, "bbox_mAP_l": 0.172, "bbox_mAP_copypaste": "0.181 0.323 0.162 0.282 0.108 0.172"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00821, "memory": 10512, "data_time": 0.06269, "loss_rpn_cls": 0.00668, "loss_rpn_bbox": 0.0147, "s0.loss_cls": 0.11875, "s0.acc": 95.78353, "s0.loss_bbox": 0.07015, "s1.loss_cls": 0.06992, "s1.acc": 95.07162, "s1.loss_bbox": 0.0877, "s2.loss_cls": 0.03846, "s2.acc": 94.72351, "s2.loss_bbox": 0.04295, "loss": 0.4493, "time": 0.77226}
{"mode": "val", "epoch": 3, "iter": 96, "lr": 0.00933, "bbox_mAP": 0.214, "bbox_mAP_50": 0.379, "bbox_mAP_75": 0.184, "bbox_mAP_s": 0.242, "bbox_mAP_m": 0.177, "bbox_mAP_l": 0.228, "bbox_mAP_copypaste": "0.214 0.379 0.184 0.242 0.177 0.228"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.01133, "memory": 10512, "data_time": 0.06373, "loss_rpn_cls": 0.00553, "loss_rpn_bbox": 0.01359, "s0.loss_cls": 0.11393, "s0.acc": 95.88868, "s0.loss_bbox": 0.06647, "s1.loss_cls": 0.06722, "s1.acc": 95.07312, "s1.loss_bbox": 0.08454, "s2.loss_cls": 0.03607, "s2.acc": 94.71453, "s2.loss_bbox": 0.0461, "loss": 0.43344, "time": 0.77594}
{"mode": "val", "epoch": 4, "iter": 96, "lr": 0.01245, "bbox_mAP": 0.222, "bbox_mAP_50": 0.394, "bbox_mAP_75": 0.207, "bbox_mAP_s": 0.291, "bbox_mAP_m": 0.199, "bbox_mAP_l": 0.239, "bbox_mAP_copypaste": "0.222 0.394 0.207 0.291 0.199 0.239"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.01445, "memory": 10512, "data_time": 0.06493, "loss_rpn_cls": 0.00557, "loss_rpn_bbox": 0.01275, "s0.loss_cls": 0.09641, "s0.acc": 96.34961, "s0.loss_bbox": 0.06234, "s1.loss_cls": 0.05722, "s1.acc": 95.63866, "s1.loss_bbox": 0.08522, "s2.loss_cls": 0.03123, "s2.acc": 95.16714, "s2.loss_bbox": 0.04616, "loss": 0.39692, "time": 0.77135}
{"mode": "val", "epoch": 5, "iter": 96, "lr": 0.01556, "bbox_mAP": 0.251, "bbox_mAP_50": 0.451, "bbox_mAP_75": 0.23, "bbox_mAP_s": 0.177, "bbox_mAP_m": 0.233, "bbox_mAP_l": 0.289, "bbox_mAP_copypaste": "0.251 0.451 0.230 0.177 0.233 0.289"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01756, "memory": 10512, "data_time": 0.06771, "loss_rpn_cls": 0.00469, "loss_rpn_bbox": 0.01156, "s0.loss_cls": 0.08649, "s0.acc": 96.76595, "s0.loss_bbox": 0.06048, "s1.loss_cls": 0.05268, "s1.acc": 95.97453, "s1.loss_bbox": 0.08447, "s2.loss_cls": 0.029, "s2.acc": 95.41944, "s2.loss_bbox": 0.04877, "loss": 0.37813, "time": 0.77428}
{"mode": "val", "epoch": 6, "iter": 96, "lr": 0.01868, "bbox_mAP": 0.259, "bbox_mAP_50": 0.458, "bbox_mAP_75": 0.234, "bbox_mAP_s": 0.225, "bbox_mAP_m": 0.16, "bbox_mAP_l": 0.32, "bbox_mAP_copypaste": "0.259 0.458 0.234 0.225 0.160 0.320"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 10512, "data_time": 0.0636, "loss_rpn_cls": 0.00484, "loss_rpn_bbox": 0.01221, "s0.loss_cls": 0.08517, "s0.acc": 96.7474, "s0.loss_bbox": 0.05873, "s1.loss_cls": 0.04951, "s1.acc": 96.22197, "s1.loss_bbox": 0.08198, "s2.loss_cls": 0.02706, "s2.acc": 95.73368, "s2.loss_bbox": 0.0475, "loss": 0.367, "time": 0.77335}
{"mode": "val", "epoch": 7, "iter": 96, "lr": 0.02, "bbox_mAP": 0.264, "bbox_mAP_50": 0.472, "bbox_mAP_75": 0.227, "bbox_mAP_s": 0.248, "bbox_mAP_m": 0.228, "bbox_mAP_l": 0.322, "bbox_mAP_copypaste": "0.264 0.472 0.227 0.248 0.228 0.322"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 10512, "data_time": 0.06736, "loss_rpn_cls": 0.0038, "loss_rpn_bbox": 0.01171, "s0.loss_cls": 0.07962, "s0.acc": 96.84603, "s0.loss_bbox": 0.05629, "s1.loss_cls": 0.04691, "s1.acc": 96.2257, "s1.loss_bbox": 0.08079, "s2.loss_cls": 0.02653, "s2.acc": 95.60662, "s2.loss_bbox": 0.04981, "loss": 0.35546, "time": 0.77003}
{"mode": "val", "epoch": 8, "iter": 96, "lr": 0.02, "bbox_mAP": 0.28, "bbox_mAP_50": 0.485, "bbox_mAP_75": 0.274, "bbox_mAP_s": 0.283, "bbox_mAP_m": 0.19, "bbox_mAP_l": 0.36, "bbox_mAP_copypaste": "0.280 0.485 0.274 0.283 0.190 0.360"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 10512, "data_time": 0.06186, "loss_rpn_cls": 0.00343, "loss_rpn_bbox": 0.01066, "s0.loss_cls": 0.06346, "s0.acc": 97.4489, "s0.loss_bbox": 0.04854, "s1.loss_cls": 0.0382, "s1.acc": 96.96025, "s1.loss_bbox": 0.07777, "s2.loss_cls": 0.02321, "s2.acc": 96.10509, "s2.loss_bbox": 0.04897, "loss": 0.31425, "time": 0.76942}
{"mode": "val", "epoch": 9, "iter": 96, "lr": 0.002, "bbox_mAP": 0.32, "bbox_mAP_50": 0.544, "bbox_mAP_75": 0.299, "bbox_mAP_s": 0.25, "bbox_mAP_m": 0.237, "bbox_mAP_l": 0.412, "bbox_mAP_copypaste": "0.320 0.544 0.299 0.250 0.237 0.412"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 10512, "data_time": 0.06338, "loss_rpn_cls": 0.00215, "loss_rpn_bbox": 0.0092, "s0.loss_cls": 0.05503, "s0.acc": 97.77051, "s0.loss_bbox": 0.04422, "s1.loss_cls": 0.03336, "s1.acc": 97.33607, "s1.loss_bbox": 0.07333, "s2.loss_cls": 0.02086, "s2.acc": 96.36792, "s2.loss_bbox": 0.04725, "loss": 0.2854, "time": 0.77306}
{"mode": "val", "epoch": 10, "iter": 96, "lr": 0.002, "bbox_mAP": 0.327, "bbox_mAP_50": 0.539, "bbox_mAP_75": 0.299, "bbox_mAP_s": 0.263, "bbox_mAP_m": 0.223, "bbox_mAP_l": 0.421, "bbox_mAP_copypaste": "0.327 0.539 0.299 0.263 0.223 0.421"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 10512, "data_time": 0.06338, "loss_rpn_cls": 0.00263, "loss_rpn_bbox": 0.01, "s0.loss_cls": 0.05454, "s0.acc": 97.79297, "s0.loss_bbox": 0.04343, "s1.loss_cls": 0.03241, "s1.acc": 97.34755, "s1.loss_bbox": 0.07057, "s2.loss_cls": 0.02031, "s2.acc": 96.59965, "s2.loss_bbox": 0.04709, "loss": 0.28098, "time": 0.77318}
{"mode": "val", "epoch": 11, "iter": 96, "lr": 0.002, "bbox_mAP": 0.33, "bbox_mAP_50": 0.545, "bbox_mAP_75": 0.303, "bbox_mAP_s": 0.24, "bbox_mAP_m": 0.243, "bbox_mAP_l": 0.423, "bbox_mAP_copypaste": "0.330 0.545 0.303 0.240 0.243 0.423"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 10512, "data_time": 0.06521, "loss_rpn_cls": 0.00249, "loss_rpn_bbox": 0.00913, "s0.loss_cls": 0.05252, "s0.acc": 97.86296, "s0.loss_bbox": 0.04228, "s1.loss_cls": 0.0313, "s1.acc": 97.45977, "s1.loss_bbox": 0.07027, "s2.loss_cls": 0.01992, "s2.acc": 96.56636, "s2.loss_bbox": 0.0469, "loss": 0.27481, "time": 0.77477}
{"mode": "val", "epoch": 12, "iter": 96, "lr": 0.0002, "bbox_mAP": 0.326, "bbox_mAP_50": 0.544, "bbox_mAP_75": 0.301, "bbox_mAP_s": 0.232, "bbox_mAP_m": 0.241, "bbox_mAP_l": 0.415, "bbox_mAP_copypaste": "0.326 0.544 0.301 0.232 0.241 0.415"}
