{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train3.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val3.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val3.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/cascade_rcnn_r50_fpn_1x_coco_20200316-3dc56deb.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=8,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=8,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=8,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn'\nauto_resume = False\ngpu_ids = range(0, 4)\n", "seed": 0, "exp_name": "cascade_rcnn_r50_fpn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 10510, "data_time": 0.06299, "loss_rpn_cls": 0.0868, "loss_rpn_bbox": 0.02125, "s0.loss_cls": 0.6261, "s0.acc": 84.26147, "s0.loss_bbox": 0.07961, "s1.loss_cls": 0.33786, "s1.acc": 82.57349, "s1.loss_bbox": 0.06589, "s2.loss_cls": 0.1666, "s2.acc": 81.08678, "s2.loss_bbox": 0.02344, "loss": 1.40755, "time": 1.33951}
{"mode": "val", "epoch": 1, "iter": 72, "lr": 0.0023, "bbox_mAP": 0.039, "bbox_mAP_50": 0.103, "bbox_mAP_75": 0.019, "bbox_mAP_s": 0.066, "bbox_mAP_m": 0.056, "bbox_mAP_l": 0.054, "bbox_mAP_copypaste": "0.039 0.103 0.019 0.066 0.056 0.054"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.0043, "memory": 10510, "data_time": 0.06395, "loss_rpn_cls": 0.01106, "loss_rpn_bbox": 0.01559, "s0.loss_cls": 0.18074, "s0.acc": 94.37598, "s0.loss_bbox": 0.07478, "s1.loss_cls": 0.11228, "s1.acc": 93.06225, "s1.loss_bbox": 0.0872, "s2.loss_cls": 0.05837, "s2.acc": 94.20439, "s2.loss_bbox": 0.04075, "loss": 0.58076, "time": 1.3688}
{"mode": "val", "epoch": 2, "iter": 72, "lr": 0.00462, "bbox_mAP": 0.177, "bbox_mAP_50": 0.308, "bbox_mAP_75": 0.149, "bbox_mAP_s": 0.159, "bbox_mAP_m": 0.095, "bbox_mAP_l": 0.182, "bbox_mAP_copypaste": "0.177 0.308 0.149 0.159 0.095 0.182"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00661, "memory": 10510, "data_time": 0.059, "loss_rpn_cls": 0.00807, "loss_rpn_bbox": 0.01445, "s0.loss_cls": 0.13369, "s0.acc": 95.46826, "s0.loss_bbox": 0.07009, "s1.loss_cls": 0.07852, "s1.acc": 94.76065, "s1.loss_bbox": 0.08359, "s2.loss_cls": 0.04471, "s2.acc": 94.10084, "s2.loss_bbox": 0.04177, "loss": 0.47489, "time": 1.26783}
{"mode": "val", "epoch": 3, "iter": 72, "lr": 0.00693, "bbox_mAP": 0.216, "bbox_mAP_50": 0.372, "bbox_mAP_75": 0.196, "bbox_mAP_s": 0.158, "bbox_mAP_m": 0.136, "bbox_mAP_l": 0.242, "bbox_mAP_copypaste": "0.216 0.372 0.196 0.158 0.136 0.242"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00893, "memory": 10510, "data_time": 0.06057, "loss_rpn_cls": 0.00649, "loss_rpn_bbox": 0.01364, "s0.loss_cls": 0.1175, "s0.acc": 95.82422, "s0.loss_bbox": 0.06658, "s1.loss_cls": 0.06808, "s1.acc": 95.13583, "s1.loss_bbox": 0.08587, "s2.loss_cls": 0.0365, "s2.acc": 94.98274, "s2.loss_bbox": 0.04478, "loss": 0.43942, "time": 1.27128}
{"mode": "val", "epoch": 4, "iter": 72, "lr": 0.00925, "bbox_mAP": 0.244, "bbox_mAP_50": 0.435, "bbox_mAP_75": 0.217, "bbox_mAP_s": 0.179, "bbox_mAP_m": 0.137, "bbox_mAP_l": 0.288, "bbox_mAP_copypaste": "0.244 0.435 0.217 0.179 0.137 0.288"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.01125, "memory": 10510, "data_time": 0.06107, "loss_rpn_cls": 0.00477, "loss_rpn_bbox": 0.01332, "s0.loss_cls": 0.10511, "s0.acc": 96.11401, "s0.loss_bbox": 0.06493, "s1.loss_cls": 0.06102, "s1.acc": 95.44641, "s1.loss_bbox": 0.08514, "s2.loss_cls": 0.03353, "s2.acc": 94.90724, "s2.loss_bbox": 0.04561, "loss": 0.41342, "time": 1.28068}
{"mode": "val", "epoch": 5, "iter": 72, "lr": 0.01157, "bbox_mAP": 0.255, "bbox_mAP_50": 0.442, "bbox_mAP_75": 0.238, "bbox_mAP_s": 0.266, "bbox_mAP_m": 0.178, "bbox_mAP_l": 0.29, "bbox_mAP_copypaste": "0.255 0.442 0.238 0.266 0.178 0.290"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.01357, "memory": 10510, "data_time": 0.06133, "loss_rpn_cls": 0.00471, "loss_rpn_bbox": 0.0132, "s0.loss_cls": 0.09329, "s0.acc": 96.47754, "s0.loss_bbox": 0.06202, "s1.loss_cls": 0.05609, "s1.acc": 95.75536, "s1.loss_bbox": 0.08568, "s2.loss_cls": 0.03169, "s2.acc": 95.13571, "s2.loss_bbox": 0.04771, "loss": 0.3944, "time": 1.27462}
{"mode": "val", "epoch": 6, "iter": 72, "lr": 0.01389, "bbox_mAP": 0.261, "bbox_mAP_50": 0.463, "bbox_mAP_75": 0.227, "bbox_mAP_s": 0.203, "bbox_mAP_m": 0.163, "bbox_mAP_l": 0.292, "bbox_mAP_copypaste": "0.261 0.463 0.227 0.203 0.163 0.292"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01588, "memory": 10510, "data_time": 0.06084, "loss_rpn_cls": 0.00439, "loss_rpn_bbox": 0.01271, "s0.loss_cls": 0.08888, "s0.acc": 96.5979, "s0.loss_bbox": 0.05821, "s1.loss_cls": 0.05329, "s1.acc": 95.85823, "s1.loss_bbox": 0.08278, "s2.loss_cls": 0.03013, "s2.acc": 95.20786, "s2.loss_bbox": 0.04753, "loss": 0.37791, "time": 1.27629}
{"mode": "val", "epoch": 7, "iter": 72, "lr": 0.0162, "bbox_mAP": 0.272, "bbox_mAP_50": 0.48, "bbox_mAP_75": 0.255, "bbox_mAP_s": 0.26, "bbox_mAP_m": 0.183, "bbox_mAP_l": 0.334, "bbox_mAP_copypaste": "0.272 0.480 0.255 0.260 0.183 0.334"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.0182, "memory": 10510, "data_time": 0.06071, "loss_rpn_cls": 0.00386, "loss_rpn_bbox": 0.01233, "s0.loss_cls": 0.07803, "s0.acc": 96.98975, "s0.loss_bbox": 0.05578, "s1.loss_cls": 0.04594, "s1.acc": 96.45736, "s1.loss_bbox": 0.07951, "s2.loss_cls": 0.02653, "s2.acc": 95.77387, "s2.loss_bbox": 0.04782, "loss": 0.3498, "time": 1.28548}
{"mode": "val", "epoch": 8, "iter": 72, "lr": 0.01852, "bbox_mAP": 0.269, "bbox_mAP_50": 0.481, "bbox_mAP_75": 0.235, "bbox_mAP_s": 0.214, "bbox_mAP_m": 0.177, "bbox_mAP_l": 0.314, "bbox_mAP_copypaste": "0.269 0.481 0.235 0.214 0.177 0.314"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 10510, "data_time": 0.05937, "loss_rpn_cls": 0.00266, "loss_rpn_bbox": 0.01066, "s0.loss_cls": 0.06592, "s0.acc": 97.38232, "s0.loss_bbox": 0.04957, "s1.loss_cls": 0.03878, "s1.acc": 96.9683, "s1.loss_bbox": 0.0762, "s2.loss_cls": 0.02329, "s2.acc": 96.22776, "s2.loss_bbox": 0.04886, "loss": 0.31595, "time": 1.27451}
{"mode": "val", "epoch": 9, "iter": 72, "lr": 0.002, "bbox_mAP": 0.293, "bbox_mAP_50": 0.507, "bbox_mAP_75": 0.266, "bbox_mAP_s": 0.299, "bbox_mAP_m": 0.226, "bbox_mAP_l": 0.355, "bbox_mAP_copypaste": "0.293 0.507 0.266 0.299 0.226 0.355"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 10510, "data_time": 0.05991, "loss_rpn_cls": 0.00245, "loss_rpn_bbox": 0.00977, "s0.loss_cls": 0.05867, "s0.acc": 97.67651, "s0.loss_bbox": 0.04593, "s1.loss_cls": 0.03438, "s1.acc": 97.35099, "s1.loss_bbox": 0.07302, "s2.loss_cls": 0.02117, "s2.acc": 96.54428, "s2.loss_bbox": 0.04823, "loss": 0.29362, "time": 1.27107}
{"mode": "val", "epoch": 10, "iter": 72, "lr": 0.002, "bbox_mAP": 0.301, "bbox_mAP_50": 0.508, "bbox_mAP_75": 0.282, "bbox_mAP_s": 0.298, "bbox_mAP_m": 0.222, "bbox_mAP_l": 0.359, "bbox_mAP_copypaste": "0.301 0.508 0.282 0.298 0.222 0.359"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 10510, "data_time": 0.06091, "loss_rpn_cls": 0.00258, "loss_rpn_bbox": 0.00958, "s0.loss_cls": 0.05584, "s0.acc": 97.77271, "s0.loss_bbox": 0.04475, "s1.loss_cls": 0.03305, "s1.acc": 97.41959, "s1.loss_bbox": 0.07184, "s2.loss_cls": 0.0207, "s2.acc": 96.58231, "s2.loss_bbox": 0.04742, "loss": 0.28575, "time": 1.27424}
{"mode": "val", "epoch": 11, "iter": 72, "lr": 0.002, "bbox_mAP": 0.298, "bbox_mAP_50": 0.517, "bbox_mAP_75": 0.273, "bbox_mAP_s": 0.299, "bbox_mAP_m": 0.224, "bbox_mAP_l": 0.355, "bbox_mAP_copypaste": "0.298 0.517 0.273 0.299 0.224 0.355"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 10510, "data_time": 0.06013, "loss_rpn_cls": 0.0023, "loss_rpn_bbox": 0.00932, "s0.loss_cls": 0.05312, "s0.acc": 97.87061, "s0.loss_bbox": 0.0433, "s1.loss_cls": 0.03128, "s1.acc": 97.49372, "s1.loss_bbox": 0.06933, "s2.loss_cls": 0.0195, "s2.acc": 96.78226, "s2.loss_bbox": 0.04644, "loss": 0.2746, "time": 1.27723}
{"mode": "val", "epoch": 12, "iter": 72, "lr": 0.0002, "bbox_mAP": 0.299, "bbox_mAP_50": 0.517, "bbox_mAP_75": 0.277, "bbox_mAP_s": 0.288, "bbox_mAP_m": 0.219, "bbox_mAP_l": 0.36, "bbox_mAP_copypaste": "0.299 0.517 0.277 0.288 0.219 0.360"}
