{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=9,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=9,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=9,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 0, "exp_name": "cascade_rcnn_r50_fpn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 12966, "data_time": 0.07103, "loss_rpn_cls": 0.31604, "loss_rpn_bbox": 0.03234, "s0.loss_cls": 0.44674, "s0.acc": 96.24316, "s0.loss_bbox": 0.02907, "s1.loss_cls": 0.23482, "s1.acc": 89.51172, "s1.loss_bbox": 0.0086, "s2.loss_cls": 0.13608, "s2.acc": 83.87012, "s2.loss_bbox": 0.00117, "loss": 1.20487, "time": 0.9797}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 12966, "data_time": 0.01633, "loss_rpn_cls": 0.07397, "loss_rpn_bbox": 0.02418, "s0.loss_cls": 0.13371, "s0.acc": 97.61182, "s0.loss_bbox": 0.0538, "s1.loss_cls": 0.03784, "s1.acc": 98.89893, "s1.loss_bbox": 0.01541, "s2.loss_cls": 0.01243, "s2.acc": 99.36475, "s2.loss_bbox": 0.00246, "loss": 0.35378, "time": 0.9386}
{"mode": "val", "epoch": 1, "iter": 288, "lr": 0.00462, "bbox_mAP": 0.009, "bbox_mAP_50": 0.028, "bbox_mAP_75": 0.002, "bbox_mAP_s": 0.015, "bbox_mAP_m": 0.013, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.009 0.028 0.002 0.015 0.013 0.000"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00661, "memory": 12966, "data_time": 0.07053, "loss_rpn_cls": 0.04379, "loss_rpn_bbox": 0.02011, "s0.loss_cls": 0.12435, "s0.acc": 96.93848, "s0.loss_bbox": 0.07052, "s1.loss_cls": 0.04052, "s1.acc": 98.41602, "s1.loss_bbox": 0.02575, "s2.loss_cls": 0.01268, "s2.acc": 99.21289, "s2.loss_bbox": 0.00383, "loss": 0.34157, "time": 0.9777}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00861, "memory": 12966, "data_time": 0.01707, "loss_rpn_cls": 0.03994, "loss_rpn_bbox": 0.02177, "s0.loss_cls": 0.12588, "s0.acc": 96.71973, "s0.loss_bbox": 0.07333, "s1.loss_cls": 0.04421, "s1.acc": 98.02686, "s1.loss_bbox": 0.03461, "s2.loss_cls": 0.01426, "s2.acc": 99.06689, "s2.loss_bbox": 0.00596, "loss": 0.35995, "time": 0.9199}
{"mode": "val", "epoch": 2, "iter": 288, "lr": 0.00925, "bbox_mAP": 0.059, "bbox_mAP_50": 0.18, "bbox_mAP_75": 0.013, "bbox_mAP_s": 0.06, "bbox_mAP_m": 0.024, "bbox_mAP_l": 0.036, "bbox_mAP_copypaste": "0.059 0.180 0.013 0.060 0.024 0.036"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.01125, "memory": 12966, "data_time": 0.07048, "loss_rpn_cls": 0.02324, "loss_rpn_bbox": 0.01966, "s0.loss_cls": 0.11794, "s0.acc": 96.6665, "s0.loss_bbox": 0.07037, "s1.loss_cls": 0.05162, "s1.acc": 97.01318, "s1.loss_bbox": 0.05188, "s2.loss_cls": 0.01867, "s2.acc": 98.36621, "s2.loss_bbox": 0.0135, "loss": 0.36688, "time": 0.97579}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01325, "memory": 12966, "data_time": 0.0171, "loss_rpn_cls": 0.02573, "loss_rpn_bbox": 0.02154, "s0.loss_cls": 0.11485, "s0.acc": 96.68164, "s0.loss_bbox": 0.06929, "s1.loss_cls": 0.05208, "s1.acc": 96.92871, "s1.loss_bbox": 0.05217, "s2.loss_cls": 0.01911, "s2.acc": 98.15771, "s2.loss_bbox": 0.01485, "loss": 0.36962, "time": 0.91726}
{"mode": "val", "epoch": 3, "iter": 288, "lr": 0.01389, "bbox_mAP": 0.086, "bbox_mAP_50": 0.19, "bbox_mAP_75": 0.06, "bbox_mAP_s": 0.034, "bbox_mAP_m": 0.032, "bbox_mAP_l": 0.093, "bbox_mAP_copypaste": "0.086 0.190 0.060 0.034 0.032 0.093"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.01588, "memory": 12966, "data_time": 0.07196, "loss_rpn_cls": 0.01993, "loss_rpn_bbox": 0.01992, "s0.loss_cls": 0.11237, "s0.acc": 96.70068, "s0.loss_bbox": 0.06955, "s1.loss_cls": 0.05483, "s1.acc": 96.6167, "s1.loss_bbox": 0.06031, "s2.loss_cls": 0.0204, "s2.acc": 97.87354, "s2.loss_bbox": 0.01789, "loss": 0.3752, "time": 1.008}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.01788, "memory": 12966, "data_time": 0.0173, "loss_rpn_cls": 0.01671, "loss_rpn_bbox": 0.01799, "s0.loss_cls": 0.10739, "s0.acc": 96.55615, "s0.loss_bbox": 0.06884, "s1.loss_cls": 0.0558, "s1.acc": 96.23779, "s1.loss_bbox": 0.06571, "s2.loss_cls": 0.02318, "s2.acc": 97.30469, "s2.loss_bbox": 0.02366, "loss": 0.37927, "time": 0.90837}
{"mode": "val", "epoch": 4, "iter": 288, "lr": 0.01852, "bbox_mAP": 0.104, "bbox_mAP_50": 0.236, "bbox_mAP_75": 0.092, "bbox_mAP_s": 0.04, "bbox_mAP_m": 0.042, "bbox_mAP_l": 0.101, "bbox_mAP_copypaste": "0.104 0.236 0.092 0.040 0.042 0.101"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 12966, "data_time": 0.07193, "loss_rpn_cls": 0.01899, "loss_rpn_bbox": 0.01965, "s0.loss_cls": 0.12141, "s0.acc": 96.27441, "s0.loss_bbox": 0.07397, "s1.loss_cls": 0.05963, "s1.acc": 96.18312, "s1.loss_bbox": 0.06881, "s2.loss_cls": 0.02534, "s2.acc": 97.08362, "s2.loss_bbox": 0.02656, "loss": 0.41437, "time": 0.95485}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 12966, "data_time": 0.01658, "loss_rpn_cls": 0.02412, "loss_rpn_bbox": 0.01732, "s0.loss_cls": 0.11923, "s0.acc": 96.42139, "s0.loss_bbox": 0.07006, "s1.loss_cls": 0.05758, "s1.acc": 96.29639, "s1.loss_bbox": 0.06641, "s2.loss_cls": 0.02437, "s2.acc": 96.99316, "s2.loss_bbox": 0.02632, "loss": 0.4054, "time": 0.92598}
{"mode": "val", "epoch": 5, "iter": 288, "lr": 0.02, "bbox_mAP": 0.146, "bbox_mAP_50": 0.329, "bbox_mAP_75": 0.097, "bbox_mAP_s": 0.125, "bbox_mAP_m": 0.079, "bbox_mAP_l": 0.127, "bbox_mAP_copypaste": "0.146 0.329 0.097 0.125 0.079 0.127"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 12966, "data_time": 0.07022, "loss_rpn_cls": 0.01832, "loss_rpn_bbox": 0.01711, "s0.loss_cls": 0.10932, "s0.acc": 96.35693, "s0.loss_bbox": 0.07275, "s1.loss_cls": 0.05821, "s1.acc": 95.94482, "s1.loss_bbox": 0.07729, "s2.loss_cls": 0.02703, "s2.acc": 96.35645, "s2.loss_bbox": 0.03411, "loss": 0.41415, "time": 0.98269}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 12966, "data_time": 0.01606, "loss_rpn_cls": 0.01579, "loss_rpn_bbox": 0.01496, "s0.loss_cls": 0.10894, "s0.acc": 96.26416, "s0.loss_bbox": 0.07148, "s1.loss_cls": 0.06071, "s1.acc": 95.6833, "s1.loss_bbox": 0.07984, "s2.loss_cls": 0.02839, "s2.acc": 96.08758, "s2.loss_bbox": 0.03656, "loss": 0.41667, "time": 0.92697}
{"mode": "val", "epoch": 6, "iter": 288, "lr": 0.02, "bbox_mAP": 0.156, "bbox_mAP_50": 0.344, "bbox_mAP_75": 0.092, "bbox_mAP_s": 0.171, "bbox_mAP_m": 0.101, "bbox_mAP_l": 0.115, "bbox_mAP_copypaste": "0.156 0.344 0.092 0.171 0.101 0.115"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 12966, "data_time": 0.07134, "loss_rpn_cls": 0.0144, "loss_rpn_bbox": 0.01509, "s0.loss_cls": 0.10433, "s0.acc": 96.39209, "s0.loss_bbox": 0.0716, "s1.loss_cls": 0.05673, "s1.acc": 95.95026, "s1.loss_bbox": 0.07951, "s2.loss_cls": 0.02733, "s2.acc": 96.18568, "s2.loss_bbox": 0.03737, "loss": 0.40637, "time": 0.96569}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 12966, "data_time": 0.01705, "loss_rpn_cls": 0.01297, "loss_rpn_bbox": 0.01555, "s0.loss_cls": 0.11262, "s0.acc": 96.21973, "s0.loss_bbox": 0.07317, "s1.loss_cls": 0.06184, "s1.acc": 95.65195, "s1.loss_bbox": 0.08304, "s2.loss_cls": 0.02943, "s2.acc": 95.89367, "s2.loss_bbox": 0.03976, "loss": 0.42837, "time": 0.91957}
{"mode": "val", "epoch": 7, "iter": 288, "lr": 0.02, "bbox_mAP": 0.183, "bbox_mAP_50": 0.372, "bbox_mAP_75": 0.145, "bbox_mAP_s": 0.181, "bbox_mAP_m": 0.112, "bbox_mAP_l": 0.166, "bbox_mAP_copypaste": "0.183 0.372 0.145 0.181 0.112 0.166"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 12966, "data_time": 0.07026, "loss_rpn_cls": 0.01055, "loss_rpn_bbox": 0.01362, "s0.loss_cls": 0.09352, "s0.acc": 96.5625, "s0.loss_bbox": 0.06795, "s1.loss_cls": 0.05288, "s1.acc": 95.98472, "s1.loss_bbox": 0.08268, "s2.loss_cls": 0.02701, "s2.acc": 95.87434, "s2.loss_bbox": 0.0402, "loss": 0.38842, "time": 0.95043}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 12966, "data_time": 0.01635, "loss_rpn_cls": 0.01354, "loss_rpn_bbox": 0.0154, "s0.loss_cls": 0.1057, "s0.acc": 96.354, "s0.loss_bbox": 0.0711, "s1.loss_cls": 0.05741, "s1.acc": 95.9456, "s1.loss_bbox": 0.07984, "s2.loss_cls": 0.0283, "s2.acc": 96.05945, "s2.loss_bbox": 0.03761, "loss": 0.4089, "time": 0.90381}
{"mode": "val", "epoch": 8, "iter": 288, "lr": 0.02, "bbox_mAP": 0.202, "bbox_mAP_50": 0.412, "bbox_mAP_75": 0.159, "bbox_mAP_s": 0.165, "bbox_mAP_m": 0.103, "bbox_mAP_l": 0.183, "bbox_mAP_copypaste": "0.202 0.412 0.159 0.165 0.103 0.183"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 12966, "data_time": 0.07028, "loss_rpn_cls": 0.00992, "loss_rpn_bbox": 0.01216, "s0.loss_cls": 0.0856, "s0.acc": 96.84717, "s0.loss_bbox": 0.06224, "s1.loss_cls": 0.05136, "s1.acc": 96.22368, "s1.loss_bbox": 0.08043, "s2.loss_cls": 0.027, "s2.acc": 95.74502, "s2.loss_bbox": 0.04493, "loss": 0.37364, "time": 0.94895}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.002, "memory": 12966, "data_time": 0.01657, "loss_rpn_cls": 0.00831, "loss_rpn_bbox": 0.01135, "s0.loss_cls": 0.0866, "s0.acc": 96.64746, "s0.loss_bbox": 0.06821, "s1.loss_cls": 0.05206, "s1.acc": 96.00829, "s1.loss_bbox": 0.08873, "s2.loss_cls": 0.02799, "s2.acc": 95.68901, "s2.loss_bbox": 0.04876, "loss": 0.39201, "time": 0.89507}
{"mode": "val", "epoch": 9, "iter": 288, "lr": 0.002, "bbox_mAP": 0.235, "bbox_mAP_50": 0.452, "bbox_mAP_75": 0.187, "bbox_mAP_s": 0.179, "bbox_mAP_m": 0.139, "bbox_mAP_l": 0.231, "bbox_mAP_copypaste": "0.235 0.452 0.187 0.179 0.139 0.231"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 12966, "data_time": 0.07034, "loss_rpn_cls": 0.00875, "loss_rpn_bbox": 0.01148, "s0.loss_cls": 0.08167, "s0.acc": 96.90088, "s0.loss_bbox": 0.06347, "s1.loss_cls": 0.0485, "s1.acc": 96.33982, "s1.loss_bbox": 0.08352, "s2.loss_cls": 0.02663, "s2.acc": 95.91841, "s2.loss_bbox": 0.04845, "loss": 0.37246, "time": 0.95217}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.002, "memory": 12966, "data_time": 0.01692, "loss_rpn_cls": 0.0076, "loss_rpn_bbox": 0.01011, "s0.loss_cls": 0.07931, "s0.acc": 96.88721, "s0.loss_bbox": 0.06317, "s1.loss_cls": 0.04859, "s1.acc": 96.22056, "s1.loss_bbox": 0.0849, "s2.loss_cls": 0.02701, "s2.acc": 95.64875, "s2.loss_bbox": 0.04768, "loss": 0.36837, "time": 0.90718}
{"mode": "val", "epoch": 10, "iter": 288, "lr": 0.002, "bbox_mAP": 0.239, "bbox_mAP_50": 0.452, "bbox_mAP_75": 0.193, "bbox_mAP_s": 0.183, "bbox_mAP_m": 0.142, "bbox_mAP_l": 0.237, "bbox_mAP_copypaste": "0.239 0.452 0.193 0.183 0.142 0.237"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 12966, "data_time": 0.07037, "loss_rpn_cls": 0.00702, "loss_rpn_bbox": 0.00962, "s0.loss_cls": 0.07693, "s0.acc": 97.0127, "s0.loss_bbox": 0.06427, "s1.loss_cls": 0.04581, "s1.acc": 96.36064, "s1.loss_bbox": 0.08411, "s2.loss_cls": 0.02622, "s2.acc": 95.89722, "s2.loss_bbox": 0.04878, "loss": 0.36275, "time": 0.95445}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.002, "memory": 12966, "data_time": 0.01613, "loss_rpn_cls": 0.00791, "loss_rpn_bbox": 0.01067, "s0.loss_cls": 0.08126, "s0.acc": 96.86182, "s0.loss_bbox": 0.0629, "s1.loss_cls": 0.04923, "s1.acc": 96.22351, "s1.loss_bbox": 0.0842, "s2.loss_cls": 0.02759, "s2.acc": 95.70517, "s2.loss_bbox": 0.04962, "loss": 0.37338, "time": 0.90289}
{"mode": "val", "epoch": 11, "iter": 288, "lr": 0.002, "bbox_mAP": 0.246, "bbox_mAP_50": 0.462, "bbox_mAP_75": 0.197, "bbox_mAP_s": 0.153, "bbox_mAP_m": 0.147, "bbox_mAP_l": 0.25, "bbox_mAP_copypaste": "0.246 0.462 0.197 0.153 0.147 0.250"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 12966, "data_time": 0.07083, "loss_rpn_cls": 0.00704, "loss_rpn_bbox": 0.01126, "s0.loss_cls": 0.07488, "s0.acc": 97.04932, "s0.loss_bbox": 0.06181, "s1.loss_cls": 0.0447, "s1.acc": 96.53056, "s1.loss_bbox": 0.08119, "s2.loss_cls": 0.02589, "s2.acc": 95.93924, "s2.loss_bbox": 0.04737, "loss": 0.35415, "time": 0.96122}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0002, "memory": 12966, "data_time": 0.01567, "loss_rpn_cls": 0.00719, "loss_rpn_bbox": 0.00991, "s0.loss_cls": 0.07503, "s0.acc": 97.03955, "s0.loss_bbox": 0.06154, "s1.loss_cls": 0.04476, "s1.acc": 96.42336, "s1.loss_bbox": 0.08122, "s2.loss_cls": 0.02551, "s2.acc": 95.9286, "s2.loss_bbox": 0.04895, "loss": 0.35412, "time": 0.90155}
{"mode": "val", "epoch": 12, "iter": 288, "lr": 0.0002, "bbox_mAP": 0.252, "bbox_mAP_50": 0.468, "bbox_mAP_75": 0.202, "bbox_mAP_s": 0.184, "bbox_mAP_m": 0.153, "bbox_mAP_l": 0.256, "bbox_mAP_copypaste": "0.252 0.468 0.202 0.184 0.153 0.256"}
