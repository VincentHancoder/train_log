{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=9,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=9,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=9,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 0, "exp_name": "cascade_rcnn_r50_fpn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 12967, "data_time": 0.07086, "loss_rpn_cls": 0.31407, "loss_rpn_bbox": 0.03204, "s0.loss_cls": 0.43598, "s0.acc": 96.5, "s0.loss_bbox": 0.02987, "s1.loss_cls": 0.2321, "s1.acc": 89.36963, "s1.loss_bbox": 0.00861, "s2.loss_cls": 0.13706, "s2.acc": 83.95459, "s2.loss_bbox": 0.00134, "loss": 1.19108, "time": 0.97256}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 12967, "data_time": 0.016, "loss_rpn_cls": 0.06971, "loss_rpn_bbox": 0.0235, "s0.loss_cls": 0.1331, "s0.acc": 97.54053, "s0.loss_bbox": 0.05614, "s1.loss_cls": 0.03859, "s1.acc": 98.86475, "s1.loss_bbox": 0.0167, "s2.loss_cls": 0.01203, "s2.acc": 99.38037, "s2.loss_bbox": 0.00238, "loss": 0.35215, "time": 0.93598}
{"mode": "val", "epoch": 1, "iter": 288, "lr": 0.0047, "bbox_mAP": 0.0, "bbox_mAP_50": 0.0, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.000 0.000 0.000 0.000 0.000 0.000"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00669, "memory": 12967, "data_time": 0.07061, "loss_rpn_cls": 0.04243, "loss_rpn_bbox": 0.01954, "s0.loss_cls": 0.12673, "s0.acc": 96.87695, "s0.loss_bbox": 0.07142, "s1.loss_cls": 0.04041, "s1.acc": 98.43066, "s1.loss_bbox": 0.02561, "s2.loss_cls": 0.01272, "s2.acc": 99.21973, "s2.loss_bbox": 0.00403, "loss": 0.3429, "time": 0.98306}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00869, "memory": 12967, "data_time": 0.01588, "loss_rpn_cls": 0.0357, "loss_rpn_bbox": 0.02268, "s0.loss_cls": 0.1268, "s0.acc": 96.60107, "s0.loss_bbox": 0.07757, "s1.loss_cls": 0.048, "s1.acc": 97.72266, "s1.loss_bbox": 0.03995, "s2.loss_cls": 0.01506, "s2.acc": 98.93018, "s2.loss_bbox": 0.00708, "loss": 0.37284, "time": 0.92662}
{"mode": "val", "epoch": 2, "iter": 288, "lr": 0.00941, "bbox_mAP": 0.055, "bbox_mAP_50": 0.158, "bbox_mAP_75": 0.013, "bbox_mAP_s": 0.056, "bbox_mAP_m": 0.027, "bbox_mAP_l": 0.034, "bbox_mAP_copypaste": "0.055 0.158 0.013 0.056 0.027 0.034"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.01141, "memory": 12967, "data_time": 0.07016, "loss_rpn_cls": 0.02524, "loss_rpn_bbox": 0.02014, "s0.loss_cls": 0.11523, "s0.acc": 96.71533, "s0.loss_bbox": 0.06841, "s1.loss_cls": 0.05205, "s1.acc": 96.93945, "s1.loss_bbox": 0.0527, "s2.loss_cls": 0.01906, "s2.acc": 98.30225, "s2.loss_bbox": 0.01375, "loss": 0.36659, "time": 0.97566}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01341, "memory": 12967, "data_time": 0.01602, "loss_rpn_cls": 0.02, "loss_rpn_bbox": 0.0184, "s0.loss_cls": 0.12237, "s0.acc": 96.21045, "s0.loss_bbox": 0.08266, "s1.loss_cls": 0.06071, "s1.acc": 96.08887, "s1.loss_bbox": 0.06873, "s2.loss_cls": 0.0222, "s2.acc": 97.69922, "s2.loss_bbox": 0.01961, "loss": 0.41468, "time": 0.89868}
{"mode": "val", "epoch": 3, "iter": 288, "lr": 0.01413, "bbox_mAP": 0.087, "bbox_mAP_50": 0.218, "bbox_mAP_75": 0.057, "bbox_mAP_s": 0.061, "bbox_mAP_m": 0.043, "bbox_mAP_l": 0.063, "bbox_mAP_copypaste": "0.087 0.218 0.057 0.061 0.043 0.063"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.01612, "memory": 12967, "data_time": 0.07024, "loss_rpn_cls": 0.01982, "loss_rpn_bbox": 0.01801, "s0.loss_cls": 0.1187, "s0.acc": 96.375, "s0.loss_bbox": 0.07719, "s1.loss_cls": 0.05857, "s1.acc": 96.25526, "s1.loss_bbox": 0.06457, "s2.loss_cls": 0.02296, "s2.acc": 97.44522, "s2.loss_bbox": 0.02199, "loss": 0.40181, "time": 0.97202}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.01812, "memory": 12967, "data_time": 0.01598, "loss_rpn_cls": 0.01784, "loss_rpn_bbox": 0.01824, "s0.loss_cls": 0.11465, "s0.acc": 96.2041, "s0.loss_bbox": 0.07806, "s1.loss_cls": 0.0611, "s1.acc": 95.7334, "s1.loss_bbox": 0.07439, "s2.loss_cls": 0.02528, "s2.acc": 96.9165, "s2.loss_bbox": 0.02762, "loss": 0.41717, "time": 0.91162}
{"mode": "val", "epoch": 4, "iter": 288, "lr": 0.01884, "bbox_mAP": 0.119, "bbox_mAP_50": 0.264, "bbox_mAP_75": 0.095, "bbox_mAP_s": 0.12, "bbox_mAP_m": 0.068, "bbox_mAP_l": 0.077, "bbox_mAP_copypaste": "0.119 0.264 0.095 0.120 0.068 0.077"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 12967, "data_time": 0.07108, "loss_rpn_cls": 0.02138, "loss_rpn_bbox": 0.01645, "s0.loss_cls": 0.11069, "s0.acc": 96.35449, "s0.loss_bbox": 0.07314, "s1.loss_cls": 0.05758, "s1.acc": 95.93608, "s1.loss_bbox": 0.07358, "s2.loss_cls": 0.02482, "s2.acc": 96.80239, "s2.loss_bbox": 0.02923, "loss": 0.40688, "time": 0.97917}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 12967, "data_time": 0.01585, "loss_rpn_cls": 0.01997, "loss_rpn_bbox": 0.01795, "s0.loss_cls": 0.11918, "s0.acc": 96.29834, "s0.loss_bbox": 0.07372, "s1.loss_cls": 0.0587, "s1.acc": 96.09863, "s1.loss_bbox": 0.07028, "s2.loss_cls": 0.02454, "s2.acc": 96.95312, "s2.loss_bbox": 0.02805, "loss": 0.41238, "time": 0.90703}
{"mode": "val", "epoch": 5, "iter": 288, "lr": 0.02, "bbox_mAP": 0.136, "bbox_mAP_50": 0.305, "bbox_mAP_75": 0.104, "bbox_mAP_s": 0.131, "bbox_mAP_m": 0.095, "bbox_mAP_l": 0.088, "bbox_mAP_copypaste": "0.136 0.305 0.104 0.131 0.095 0.088"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 12967, "data_time": 0.07028, "loss_rpn_cls": 0.01525, "loss_rpn_bbox": 0.01709, "s0.loss_cls": 0.11175, "s0.acc": 96.38232, "s0.loss_bbox": 0.06955, "s1.loss_cls": 0.06153, "s1.acc": 95.80859, "s1.loss_bbox": 0.07822, "s2.loss_cls": 0.02761, "s2.acc": 96.45605, "s2.loss_bbox": 0.03444, "loss": 0.41544, "time": 0.95527}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 12967, "data_time": 0.01592, "loss_rpn_cls": 0.01397, "loss_rpn_bbox": 0.01578, "s0.loss_cls": 0.11281, "s0.acc": 96.12646, "s0.loss_bbox": 0.07531, "s1.loss_cls": 0.05919, "s1.acc": 95.6833, "s1.loss_bbox": 0.08219, "s2.loss_cls": 0.02726, "s2.acc": 96.24344, "s2.loss_bbox": 0.03556, "loss": 0.42208, "time": 0.9114}
{"mode": "val", "epoch": 6, "iter": 288, "lr": 0.02, "bbox_mAP": 0.177, "bbox_mAP_50": 0.347, "bbox_mAP_75": 0.15, "bbox_mAP_s": 0.183, "bbox_mAP_m": 0.102, "bbox_mAP_l": 0.118, "bbox_mAP_copypaste": "0.177 0.347 0.150 0.183 0.102 0.118"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 12967, "data_time": 0.07011, "loss_rpn_cls": 0.01061, "loss_rpn_bbox": 0.01421, "s0.loss_cls": 0.10007, "s0.acc": 96.48291, "s0.loss_bbox": 0.06987, "s1.loss_cls": 0.0568, "s1.acc": 95.8057, "s1.loss_bbox": 0.08124, "s2.loss_cls": 0.02752, "s2.acc": 95.9434, "s2.loss_bbox": 0.03891, "loss": 0.39923, "time": 0.96114}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 12967, "data_time": 0.01589, "loss_rpn_cls": 0.01267, "loss_rpn_bbox": 0.01501, "s0.loss_cls": 0.09942, "s0.acc": 96.52588, "s0.loss_bbox": 0.07007, "s1.loss_cls": 0.05487, "s1.acc": 96.03027, "s1.loss_bbox": 0.08025, "s2.loss_cls": 0.02602, "s2.acc": 96.36816, "s2.loss_bbox": 0.0375, "loss": 0.39582, "time": 0.88451}
{"mode": "val", "epoch": 7, "iter": 288, "lr": 0.02, "bbox_mAP": 0.178, "bbox_mAP_50": 0.375, "bbox_mAP_75": 0.174, "bbox_mAP_s": 0.135, "bbox_mAP_m": 0.098, "bbox_mAP_l": 0.147, "bbox_mAP_copypaste": "0.178 0.375 0.174 0.135 0.098 0.147"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 12967, "data_time": 0.07132, "loss_rpn_cls": 0.0108, "loss_rpn_bbox": 0.01414, "s0.loss_cls": 0.09756, "s0.acc": 96.42188, "s0.loss_bbox": 0.07451, "s1.loss_cls": 0.0552, "s1.acc": 95.7167, "s1.loss_bbox": 0.08831, "s2.loss_cls": 0.02749, "s2.acc": 95.68156, "s2.loss_bbox": 0.04224, "loss": 0.41025, "time": 0.96715}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 12967, "data_time": 0.01682, "loss_rpn_cls": 0.00948, "loss_rpn_bbox": 0.01508, "s0.loss_cls": 0.08635, "s0.acc": 96.8125, "s0.loss_bbox": 0.06573, "s1.loss_cls": 0.05083, "s1.acc": 96.11377, "s1.loss_bbox": 0.07851, "s2.loss_cls": 0.026, "s2.acc": 96.09717, "s2.loss_bbox": 0.03958, "loss": 0.37156, "time": 0.87866}
{"mode": "val", "epoch": 8, "iter": 288, "lr": 0.02, "bbox_mAP": 0.184, "bbox_mAP_50": 0.382, "bbox_mAP_75": 0.161, "bbox_mAP_s": 0.183, "bbox_mAP_m": 0.07, "bbox_mAP_l": 0.167, "bbox_mAP_copypaste": "0.184 0.382 0.161 0.183 0.070 0.167"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 12967, "data_time": 0.06993, "loss_rpn_cls": 0.00889, "loss_rpn_bbox": 0.01302, "s0.loss_cls": 0.08484, "s0.acc": 96.79053, "s0.loss_bbox": 0.06281, "s1.loss_cls": 0.05026, "s1.acc": 96.18505, "s1.loss_bbox": 0.08086, "s2.loss_cls": 0.02612, "s2.acc": 95.99663, "s2.loss_bbox": 0.04285, "loss": 0.36964, "time": 0.92916}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.002, "memory": 12967, "data_time": 0.01584, "loss_rpn_cls": 0.00752, "loss_rpn_bbox": 0.01098, "s0.loss_cls": 0.07732, "s0.acc": 96.90479, "s0.loss_bbox": 0.06391, "s1.loss_cls": 0.04672, "s1.acc": 96.25267, "s1.loss_bbox": 0.08249, "s2.loss_cls": 0.02575, "s2.acc": 95.79165, "s2.loss_bbox": 0.04601, "loss": 0.36069, "time": 0.88007}
{"mode": "val", "epoch": 9, "iter": 288, "lr": 0.002, "bbox_mAP": 0.24, "bbox_mAP_50": 0.431, "bbox_mAP_75": 0.221, "bbox_mAP_s": 0.232, "bbox_mAP_m": 0.146, "bbox_mAP_l": 0.191, "bbox_mAP_copypaste": "0.240 0.431 0.221 0.232 0.146 0.191"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 12967, "data_time": 0.06957, "loss_rpn_cls": 0.00646, "loss_rpn_bbox": 0.01032, "s0.loss_cls": 0.06715, "s0.acc": 97.43896, "s0.loss_bbox": 0.05374, "s1.loss_cls": 0.041, "s1.acc": 96.81278, "s1.loss_bbox": 0.07328, "s2.loss_cls": 0.02335, "s2.acc": 96.23665, "s2.loss_bbox": 0.0423, "loss": 0.31761, "time": 0.9391}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.002, "memory": 12967, "data_time": 0.01612, "loss_rpn_cls": 0.00744, "loss_rpn_bbox": 0.01066, "s0.loss_cls": 0.07888, "s0.acc": 96.85938, "s0.loss_bbox": 0.06586, "s1.loss_cls": 0.04827, "s1.acc": 96.13152, "s1.loss_bbox": 0.08544, "s2.loss_cls": 0.02662, "s2.acc": 95.67515, "s2.loss_bbox": 0.04673, "loss": 0.3699, "time": 0.88565}
{"mode": "val", "epoch": 10, "iter": 288, "lr": 0.002, "bbox_mAP": 0.247, "bbox_mAP_50": 0.435, "bbox_mAP_75": 0.246, "bbox_mAP_s": 0.211, "bbox_mAP_m": 0.135, "bbox_mAP_l": 0.211, "bbox_mAP_copypaste": "0.247 0.435 0.246 0.211 0.135 0.211"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 12967, "data_time": 0.07097, "loss_rpn_cls": 0.00692, "loss_rpn_bbox": 0.01078, "s0.loss_cls": 0.07167, "s0.acc": 97.21338, "s0.loss_bbox": 0.0608, "s1.loss_cls": 0.04481, "s1.acc": 96.47533, "s1.loss_bbox": 0.08131, "s2.loss_cls": 0.02539, "s2.acc": 95.90397, "s2.loss_bbox": 0.04657, "loss": 0.34827, "time": 0.94003}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.002, "memory": 12967, "data_time": 0.01637, "loss_rpn_cls": 0.0073, "loss_rpn_bbox": 0.01037, "s0.loss_cls": 0.07098, "s0.acc": 97.19141, "s0.loss_bbox": 0.06026, "s1.loss_cls": 0.04444, "s1.acc": 96.46636, "s1.loss_bbox": 0.07969, "s2.loss_cls": 0.02558, "s2.acc": 95.92173, "s2.loss_bbox": 0.0459, "loss": 0.34452, "time": 0.88427}
{"mode": "val", "epoch": 11, "iter": 288, "lr": 0.002, "bbox_mAP": 0.25, "bbox_mAP_50": 0.435, "bbox_mAP_75": 0.248, "bbox_mAP_s": 0.219, "bbox_mAP_m": 0.138, "bbox_mAP_l": 0.209, "bbox_mAP_copypaste": "0.250 0.435 0.248 0.219 0.138 0.209"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 12967, "data_time": 0.07091, "loss_rpn_cls": 0.00574, "loss_rpn_bbox": 0.01008, "s0.loss_cls": 0.0666, "s0.acc": 97.34863, "s0.loss_bbox": 0.05754, "s1.loss_cls": 0.04198, "s1.acc": 96.7153, "s1.loss_bbox": 0.0797, "s2.loss_cls": 0.02444, "s2.acc": 96.00563, "s2.loss_bbox": 0.04803, "loss": 0.33412, "time": 0.93803}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0002, "memory": 12967, "data_time": 0.01546, "loss_rpn_cls": 0.00726, "loss_rpn_bbox": 0.01024, "s0.loss_cls": 0.06986, "s0.acc": 97.20947, "s0.loss_bbox": 0.05789, "s1.loss_cls": 0.04368, "s1.acc": 96.55636, "s1.loss_bbox": 0.07738, "s2.loss_cls": 0.02484, "s2.acc": 95.8983, "s2.loss_bbox": 0.04472, "loss": 0.33588, "time": 0.88362}
{"mode": "val", "epoch": 12, "iter": 288, "lr": 0.0002, "bbox_mAP": 0.249, "bbox_mAP_50": 0.436, "bbox_mAP_75": 0.244, "bbox_mAP_s": 0.217, "bbox_mAP_m": 0.142, "bbox_mAP_l": 0.206, "bbox_mAP_copypaste": "0.249 0.436 0.244 0.217 0.142 0.206"}
