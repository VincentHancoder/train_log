{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val1.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/cascade_rcnn_r50_fpn_1x_coco_20200316-3dc56deb.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=8,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=8,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=8,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1103172735, "exp_name": "cascade_rcnn_r50_fpn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 10249, "data_time": 0.06259, "loss_rpn_cls": 0.08556, "loss_rpn_bbox": 0.0187, "s0.loss_cls": 0.56947, "s0.acc": 88.51367, "s0.loss_bbox": 0.07635, "s1.loss_cls": 0.33038, "s1.acc": 84.14258, "s1.loss_bbox": 0.06481, "s2.loss_cls": 0.16212, "s2.acc": 82.53906, "s2.loss_bbox": 0.02261, "loss": 1.32999, "time": 0.70621}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 10249, "data_time": 0.01493, "loss_rpn_cls": 0.01379, "loss_rpn_bbox": 0.01599, "s0.loss_cls": 0.22069, "s0.acc": 93.25977, "s0.loss_bbox": 0.08622, "s1.loss_cls": 0.13148, "s1.acc": 92.20782, "s1.loss_bbox": 0.09897, "s2.loss_cls": 0.06479, "s2.acc": 93.62531, "s2.loss_bbox": 0.04545, "loss": 0.67738, "time": 0.66341}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 10249, "data_time": 0.01658, "loss_rpn_cls": 0.01283, "loss_rpn_bbox": 0.01861, "s0.loss_cls": 0.18085, "s0.acc": 94.35645, "s0.loss_bbox": 0.08321, "s1.loss_cls": 0.1009, "s1.acc": 93.48111, "s1.loss_bbox": 0.09383, "s2.loss_cls": 0.05259, "s2.acc": 93.71031, "s2.loss_bbox": 0.0433, "loss": 0.58613, "time": 0.67207}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 10249, "data_time": 0.01648, "loss_rpn_cls": 0.01028, "loss_rpn_bbox": 0.01763, "s0.loss_cls": 0.14626, "s0.acc": 95.47852, "s0.loss_bbox": 0.07236, "s1.loss_cls": 0.08302, "s1.acc": 94.88086, "s1.loss_bbox": 0.08218, "s2.loss_cls": 0.04159, "s2.acc": 95.19824, "s2.loss_bbox": 0.0379, "loss": 0.49123, "time": 0.67877}
{"mode": "val", "epoch": 1, "iter": 288, "lr": 0.00921, "bbox_mAP": 0.213, "bbox_mAP_50": 0.377, "bbox_mAP_75": 0.196, "bbox_mAP_s": 0.163, "bbox_mAP_m": 0.116, "bbox_mAP_l": 0.218, "bbox_mAP_copypaste": "0.213 0.377 0.196 0.163 0.116 0.218"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01121, "memory": 10249, "data_time": 0.06206, "loss_rpn_cls": 0.01375, "loss_rpn_bbox": 0.01795, "s0.loss_cls": 0.13437, "s0.acc": 95.47168, "s0.loss_bbox": 0.08027, "s1.loss_cls": 0.07269, "s1.acc": 94.90398, "s1.loss_bbox": 0.09047, "s2.loss_cls": 0.03676, "s2.acc": 94.62768, "s2.loss_bbox": 0.04127, "loss": 0.48753, "time": 0.71107}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01321, "memory": 10249, "data_time": 0.01643, "loss_rpn_cls": 0.01104, "loss_rpn_bbox": 0.0202, "s0.loss_cls": 0.12347, "s0.acc": 95.53027, "s0.loss_bbox": 0.07471, "s1.loss_cls": 0.06828, "s1.acc": 94.89163, "s1.loss_bbox": 0.0903, "s2.loss_cls": 0.03354, "s2.acc": 95.05449, "s2.loss_bbox": 0.04236, "loss": 0.4639, "time": 0.67649}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0152, "memory": 10249, "data_time": 0.01631, "loss_rpn_cls": 0.01333, "loss_rpn_bbox": 0.01867, "s0.loss_cls": 0.1217, "s0.acc": 95.8125, "s0.loss_bbox": 0.0717, "s1.loss_cls": 0.06319, "s1.acc": 95.49967, "s1.loss_bbox": 0.07991, "s2.loss_cls": 0.0309, "s2.acc": 95.8429, "s2.loss_bbox": 0.03717, "loss": 0.43656, "time": 0.66191}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0172, "memory": 10249, "data_time": 0.01683, "loss_rpn_cls": 0.01468, "loss_rpn_bbox": 0.01467, "s0.loss_cls": 0.11412, "s0.acc": 96.28223, "s0.loss_bbox": 0.06417, "s1.loss_cls": 0.06085, "s1.acc": 95.86523, "s1.loss_bbox": 0.0692, "s2.loss_cls": 0.02935, "s2.acc": 96.17773, "s2.loss_bbox": 0.03335, "loss": 0.40039, "time": 0.659}
{"mode": "val", "epoch": 2, "iter": 288, "lr": 0.01844, "bbox_mAP": 0.227, "bbox_mAP_50": 0.405, "bbox_mAP_75": 0.212, "bbox_mAP_s": 0.094, "bbox_mAP_m": 0.127, "bbox_mAP_l": 0.24, "bbox_mAP_copypaste": "0.227 0.405 0.212 0.094 0.127 0.240"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02, "memory": 10249, "data_time": 0.06339, "loss_rpn_cls": 0.00757, "loss_rpn_bbox": 0.01828, "s0.loss_cls": 0.11309, "s0.acc": 95.9541, "s0.loss_bbox": 0.0686, "s1.loss_cls": 0.06422, "s1.acc": 95.23875, "s1.loss_bbox": 0.08804, "s2.loss_cls": 0.03269, "s2.acc": 95.27601, "s2.loss_bbox": 0.04427, "loss": 0.43675, "time": 0.71197}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.02, "memory": 10249, "data_time": 0.01655, "loss_rpn_cls": 0.01274, "loss_rpn_bbox": 0.0185, "s0.loss_cls": 0.12027, "s0.acc": 95.73242, "s0.loss_bbox": 0.07489, "s1.loss_cls": 0.06628, "s1.acc": 94.99469, "s1.loss_bbox": 0.08908, "s2.loss_cls": 0.0312, "s2.acc": 95.47817, "s2.loss_bbox": 0.04266, "loss": 0.45563, "time": 0.66601}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 10249, "data_time": 0.01635, "loss_rpn_cls": 0.01076, "loss_rpn_bbox": 0.01563, "s0.loss_cls": 0.12392, "s0.acc": 95.78125, "s0.loss_bbox": 0.06921, "s1.loss_cls": 0.06597, "s1.acc": 95.3201, "s1.loss_bbox": 0.0783, "s2.loss_cls": 0.03099, "s2.acc": 95.63004, "s2.loss_bbox": 0.04155, "loss": 0.43632, "time": 0.66681}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.02, "memory": 10249, "data_time": 0.01627, "loss_rpn_cls": 0.01004, "loss_rpn_bbox": 0.01733, "s0.loss_cls": 0.12563, "s0.acc": 95.65918, "s0.loss_bbox": 0.07252, "s1.loss_cls": 0.06716, "s1.acc": 95.22953, "s1.loss_bbox": 0.08812, "s2.loss_cls": 0.03201, "s2.acc": 95.12489, "s2.loss_bbox": 0.04264, "loss": 0.45545, "time": 0.66663}
{"mode": "val", "epoch": 3, "iter": 288, "lr": 0.02, "bbox_mAP": 0.267, "bbox_mAP_50": 0.469, "bbox_mAP_75": 0.251, "bbox_mAP_s": 0.201, "bbox_mAP_m": 0.145, "bbox_mAP_l": 0.299, "bbox_mAP_copypaste": "0.267 0.469 0.251 0.201 0.145 0.299"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 10249, "data_time": 0.06345, "loss_rpn_cls": 0.00877, "loss_rpn_bbox": 0.01686, "s0.loss_cls": 0.10461, "s0.acc": 96.08203, "s0.loss_bbox": 0.0679, "s1.loss_cls": 0.05717, "s1.acc": 95.55951, "s1.loss_bbox": 0.08407, "s2.loss_cls": 0.02958, "s2.acc": 95.37335, "s2.loss_bbox": 0.04411, "loss": 0.41307, "time": 0.71194}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 10249, "data_time": 0.01735, "loss_rpn_cls": 0.00893, "loss_rpn_bbox": 0.01738, "s0.loss_cls": 0.10546, "s0.acc": 96.125, "s0.loss_bbox": 0.07219, "s1.loss_cls": 0.06017, "s1.acc": 95.61465, "s1.loss_bbox": 0.09025, "s2.loss_cls": 0.03088, "s2.acc": 95.5686, "s2.loss_bbox": 0.04797, "loss": 0.43323, "time": 0.66886}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 10249, "data_time": 0.01786, "loss_rpn_cls": 0.00725, "loss_rpn_bbox": 0.01413, "s0.loss_cls": 0.10391, "s0.acc": 96.33496, "s0.loss_bbox": 0.06535, "s1.loss_cls": 0.05876, "s1.acc": 95.76953, "s1.loss_bbox": 0.07969, "s2.loss_cls": 0.02898, "s2.acc": 95.7666, "s2.loss_bbox": 0.04446, "loss": 0.40253, "time": 0.66279}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.02, "memory": 10249, "data_time": 0.01741, "loss_rpn_cls": 0.00753, "loss_rpn_bbox": 0.018, "s0.loss_cls": 0.10398, "s0.acc": 96.2959, "s0.loss_bbox": 0.06869, "s1.loss_cls": 0.06132, "s1.acc": 95.32658, "s1.loss_bbox": 0.08592, "s2.loss_cls": 0.03095, "s2.acc": 95.28886, "s2.loss_bbox": 0.04267, "loss": 0.41907, "time": 0.67997}
{"mode": "val", "epoch": 4, "iter": 288, "lr": 0.02, "bbox_mAP": 0.238, "bbox_mAP_50": 0.452, "bbox_mAP_75": 0.212, "bbox_mAP_s": 0.159, "bbox_mAP_m": 0.122, "bbox_mAP_l": 0.258, "bbox_mAP_copypaste": "0.238 0.452 0.212 0.159 0.122 0.258"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 10249, "data_time": 0.06278, "loss_rpn_cls": 0.008, "loss_rpn_bbox": 0.01617, "s0.loss_cls": 0.09056, "s0.acc": 96.69824, "s0.loss_bbox": 0.06203, "s1.loss_cls": 0.04976, "s1.acc": 96.31355, "s1.loss_bbox": 0.0794, "s2.loss_cls": 0.02605, "s2.acc": 96.10394, "s2.loss_bbox": 0.04361, "loss": 0.37558, "time": 0.72298}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 10249, "data_time": 0.01693, "loss_rpn_cls": 0.01008, "loss_rpn_bbox": 0.0183, "s0.loss_cls": 0.10202, "s0.acc": 96.05371, "s0.loss_bbox": 0.07189, "s1.loss_cls": 0.05821, "s1.acc": 95.38704, "s1.loss_bbox": 0.09124, "s2.loss_cls": 0.0302, "s2.acc": 95.16213, "s2.loss_bbox": 0.04776, "loss": 0.42969, "time": 0.67285}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.02, "memory": 10249, "data_time": 0.01813, "loss_rpn_cls": 0.00672, "loss_rpn_bbox": 0.01447, "s0.loss_cls": 0.08678, "s0.acc": 96.61816, "s0.loss_bbox": 0.06107, "s1.loss_cls": 0.0486, "s1.acc": 96.39429, "s1.loss_bbox": 0.08056, "s2.loss_cls": 0.02611, "s2.acc": 95.87881, "s2.loss_bbox": 0.0454, "loss": 0.36971, "time": 0.66392}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.02, "memory": 10249, "data_time": 0.01884, "loss_rpn_cls": 0.00653, "loss_rpn_bbox": 0.01473, "s0.loss_cls": 0.10326, "s0.acc": 96.25488, "s0.loss_bbox": 0.06661, "s1.loss_cls": 0.05836, "s1.acc": 95.65994, "s1.loss_bbox": 0.08864, "s2.loss_cls": 0.03043, "s2.acc": 95.20206, "s2.loss_bbox": 0.04659, "loss": 0.41516, "time": 0.67237}
{"mode": "val", "epoch": 5, "iter": 288, "lr": 0.02, "bbox_mAP": 0.344, "bbox_mAP_50": 0.579, "bbox_mAP_75": 0.331, "bbox_mAP_s": 0.285, "bbox_mAP_m": 0.16, "bbox_mAP_l": 0.392, "bbox_mAP_copypaste": "0.344 0.579 0.331 0.285 0.160 0.392"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 10249, "data_time": 0.06428, "loss_rpn_cls": 0.00637, "loss_rpn_bbox": 0.01564, "s0.loss_cls": 0.0963, "s0.acc": 96.35547, "s0.loss_bbox": 0.06832, "s1.loss_cls": 0.05541, "s1.acc": 95.65707, "s1.loss_bbox": 0.09581, "s2.loss_cls": 0.03035, "s2.acc": 94.94261, "s2.loss_bbox": 0.05415, "loss": 0.42234, "time": 0.71343}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 10249, "data_time": 0.01741, "loss_rpn_cls": 0.00611, "loss_rpn_bbox": 0.01758, "s0.loss_cls": 0.09149, "s0.acc": 96.63379, "s0.loss_bbox": 0.06163, "s1.loss_cls": 0.05377, "s1.acc": 96.01066, "s1.loss_bbox": 0.08423, "s2.loss_cls": 0.02878, "s2.acc": 95.48026, "s2.loss_bbox": 0.04529, "loss": 0.38888, "time": 0.66947}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.02, "memory": 10249, "data_time": 0.01725, "loss_rpn_cls": 0.00714, "loss_rpn_bbox": 0.01732, "s0.loss_cls": 0.09061, "s0.acc": 96.65234, "s0.loss_bbox": 0.06479, "s1.loss_cls": 0.0508, "s1.acc": 96.03473, "s1.loss_bbox": 0.08656, "s2.loss_cls": 0.02685, "s2.acc": 95.61217, "s2.loss_bbox": 0.04805, "loss": 0.39212, "time": 0.6722}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.02, "memory": 10249, "data_time": 0.01741, "loss_rpn_cls": 0.00784, "loss_rpn_bbox": 0.01432, "s0.loss_cls": 0.08803, "s0.acc": 96.64746, "s0.loss_bbox": 0.05794, "s1.loss_cls": 0.0499, "s1.acc": 96.17285, "s1.loss_bbox": 0.0775, "s2.loss_cls": 0.02597, "s2.acc": 95.89941, "s2.loss_bbox": 0.0428, "loss": 0.3643, "time": 0.66855}
{"mode": "val", "epoch": 6, "iter": 288, "lr": 0.02, "bbox_mAP": 0.305, "bbox_mAP_50": 0.558, "bbox_mAP_75": 0.274, "bbox_mAP_s": 0.31, "bbox_mAP_m": 0.165, "bbox_mAP_l": 0.319, "bbox_mAP_copypaste": "0.305 0.558 0.274 0.310 0.165 0.319"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 10249, "data_time": 0.06502, "loss_rpn_cls": 0.00632, "loss_rpn_bbox": 0.01562, "s0.loss_cls": 0.091, "s0.acc": 96.40527, "s0.loss_bbox": 0.06131, "s1.loss_cls": 0.05249, "s1.acc": 95.76775, "s1.loss_bbox": 0.08317, "s2.loss_cls": 0.02701, "s2.acc": 95.47643, "s2.loss_bbox": 0.04613, "loss": 0.38304, "time": 0.71674}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 10249, "data_time": 0.01763, "loss_rpn_cls": 0.00482, "loss_rpn_bbox": 0.01496, "s0.loss_cls": 0.07558, "s0.acc": 96.92969, "s0.loss_bbox": 0.06096, "s1.loss_cls": 0.04415, "s1.acc": 96.37977, "s1.loss_bbox": 0.08138, "s2.loss_cls": 0.02368, "s2.acc": 96.03784, "s2.loss_bbox": 0.04711, "loss": 0.35264, "time": 0.67603}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.02, "memory": 10249, "data_time": 0.01748, "loss_rpn_cls": 0.0069, "loss_rpn_bbox": 0.01348, "s0.loss_cls": 0.08815, "s0.acc": 96.54883, "s0.loss_bbox": 0.06299, "s1.loss_cls": 0.04885, "s1.acc": 96.14604, "s1.loss_bbox": 0.08125, "s2.loss_cls": 0.02569, "s2.acc": 95.69562, "s2.loss_bbox": 0.04952, "loss": 0.37682, "time": 0.6704}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.02, "memory": 10249, "data_time": 0.01736, "loss_rpn_cls": 0.00579, "loss_rpn_bbox": 0.01463, "s0.loss_cls": 0.07927, "s0.acc": 97.05078, "s0.loss_bbox": 0.05675, "s1.loss_cls": 0.04537, "s1.acc": 96.53522, "s1.loss_bbox": 0.07965, "s2.loss_cls": 0.02475, "s2.acc": 96.0462, "s2.loss_bbox": 0.04739, "loss": 0.35359, "time": 0.67256}
{"mode": "val", "epoch": 7, "iter": 288, "lr": 0.02, "bbox_mAP": 0.34, "bbox_mAP_50": 0.576, "bbox_mAP_75": 0.33, "bbox_mAP_s": 0.41, "bbox_mAP_m": 0.172, "bbox_mAP_l": 0.38, "bbox_mAP_copypaste": "0.340 0.576 0.330 0.410 0.172 0.380"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 10249, "data_time": 0.0694, "loss_rpn_cls": 0.00462, "loss_rpn_bbox": 0.01521, "s0.loss_cls": 0.07651, "s0.acc": 97.00195, "s0.loss_bbox": 0.05638, "s1.loss_cls": 0.04423, "s1.acc": 96.3261, "s1.loss_bbox": 0.08024, "s2.loss_cls": 0.02503, "s2.acc": 95.88583, "s2.loss_bbox": 0.04859, "loss": 0.35082, "time": 0.76848}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 10249, "data_time": 0.01702, "loss_rpn_cls": 0.00382, "loss_rpn_bbox": 0.01284, "s0.loss_cls": 0.07422, "s0.acc": 97.03418, "s0.loss_bbox": 0.06212, "s1.loss_cls": 0.04485, "s1.acc": 96.3439, "s1.loss_bbox": 0.08765, "s2.loss_cls": 0.02475, "s2.acc": 95.60655, "s2.loss_bbox": 0.04928, "loss": 0.35953, "time": 0.66653}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.02, "memory": 10249, "data_time": 0.01623, "loss_rpn_cls": 0.00663, "loss_rpn_bbox": 0.01596, "s0.loss_cls": 0.07625, "s0.acc": 96.94336, "s0.loss_bbox": 0.05776, "s1.loss_cls": 0.04409, "s1.acc": 96.32915, "s1.loss_bbox": 0.07878, "s2.loss_cls": 0.02442, "s2.acc": 95.9376, "s2.loss_bbox": 0.04725, "loss": 0.35115, "time": 0.67072}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.02, "memory": 10249, "data_time": 0.01704, "loss_rpn_cls": 0.0053, "loss_rpn_bbox": 0.01391, "s0.loss_cls": 0.08309, "s0.acc": 96.80469, "s0.loss_bbox": 0.05823, "s1.loss_cls": 0.04834, "s1.acc": 96.30927, "s1.loss_bbox": 0.08012, "s2.loss_cls": 0.02644, "s2.acc": 95.88153, "s2.loss_bbox": 0.04646, "loss": 0.36189, "time": 0.68281}
{"mode": "val", "epoch": 8, "iter": 288, "lr": 0.02, "bbox_mAP": 0.329, "bbox_mAP_50": 0.536, "bbox_mAP_75": 0.325, "bbox_mAP_s": 0.304, "bbox_mAP_m": 0.159, "bbox_mAP_l": 0.374, "bbox_mAP_copypaste": "0.329 0.536 0.325 0.304 0.159 0.374"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 10249, "data_time": 0.06253, "loss_rpn_cls": 0.00357, "loss_rpn_bbox": 0.00942, "s0.loss_cls": 0.06284, "s0.acc": 97.4375, "s0.loss_bbox": 0.04723, "s1.loss_cls": 0.03602, "s1.acc": 97.16953, "s1.loss_bbox": 0.06943, "s2.loss_cls": 0.02035, "s2.acc": 96.40369, "s2.loss_bbox": 0.04376, "loss": 0.29262, "time": 0.71332}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.002, "memory": 10249, "data_time": 0.01681, "loss_rpn_cls": 0.00344, "loss_rpn_bbox": 0.01061, "s0.loss_cls": 0.05676, "s0.acc": 97.65234, "s0.loss_bbox": 0.04663, "s1.loss_cls": 0.03245, "s1.acc": 97.34668, "s1.loss_bbox": 0.07209, "s2.loss_cls": 0.01913, "s2.acc": 96.67544, "s2.loss_bbox": 0.04847, "loss": 0.28957, "time": 0.66447}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.002, "memory": 10249, "data_time": 0.01652, "loss_rpn_cls": 0.00365, "loss_rpn_bbox": 0.01066, "s0.loss_cls": 0.05762, "s0.acc": 97.6748, "s0.loss_bbox": 0.04461, "s1.loss_cls": 0.03266, "s1.acc": 97.43065, "s1.loss_bbox": 0.06804, "s2.loss_cls": 0.01925, "s2.acc": 96.65038, "s2.loss_bbox": 0.04494, "loss": 0.28142, "time": 0.66832}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.002, "memory": 10249, "data_time": 0.01715, "loss_rpn_cls": 0.00447, "loss_rpn_bbox": 0.01113, "s0.loss_cls": 0.0578, "s0.acc": 97.69531, "s0.loss_bbox": 0.04644, "s1.loss_cls": 0.03298, "s1.acc": 97.44996, "s1.loss_bbox": 0.07029, "s2.loss_cls": 0.01913, "s2.acc": 96.88595, "s2.loss_bbox": 0.04732, "loss": 0.28956, "time": 0.67369}
{"mode": "val", "epoch": 9, "iter": 288, "lr": 0.002, "bbox_mAP": 0.38, "bbox_mAP_50": 0.607, "bbox_mAP_75": 0.383, "bbox_mAP_s": 0.333, "bbox_mAP_m": 0.221, "bbox_mAP_l": 0.429, "bbox_mAP_copypaste": "0.380 0.607 0.383 0.333 0.221 0.429"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 10249, "data_time": 0.06362, "loss_rpn_cls": 0.00295, "loss_rpn_bbox": 0.00927, "s0.loss_cls": 0.05155, "s0.acc": 97.89453, "s0.loss_bbox": 0.0431, "s1.loss_cls": 0.03092, "s1.acc": 97.51504, "s1.loss_bbox": 0.06755, "s2.loss_cls": 0.01855, "s2.acc": 96.83354, "s2.loss_bbox": 0.04625, "loss": 0.27013, "time": 0.71689}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.002, "memory": 10249, "data_time": 0.0183, "loss_rpn_cls": 0.003, "loss_rpn_bbox": 0.01004, "s0.loss_cls": 0.05033, "s0.acc": 97.94629, "s0.loss_bbox": 0.04223, "s1.loss_cls": 0.03026, "s1.acc": 97.52314, "s1.loss_bbox": 0.06561, "s2.loss_cls": 0.01783, "s2.acc": 96.87845, "s2.loss_bbox": 0.04373, "loss": 0.26302, "time": 0.67575}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.002, "memory": 10249, "data_time": 0.0176, "loss_rpn_cls": 0.00298, "loss_rpn_bbox": 0.00989, "s0.loss_cls": 0.05318, "s0.acc": 97.89062, "s0.loss_bbox": 0.04103, "s1.loss_cls": 0.02969, "s1.acc": 97.62682, "s1.loss_bbox": 0.06853, "s2.loss_cls": 0.01847, "s2.acc": 96.78136, "s2.loss_bbox": 0.04794, "loss": 0.27171, "time": 0.67081}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.002, "memory": 10249, "data_time": 0.01671, "loss_rpn_cls": 0.00379, "loss_rpn_bbox": 0.00991, "s0.loss_cls": 0.05233, "s0.acc": 97.88965, "s0.loss_bbox": 0.04484, "s1.loss_cls": 0.02968, "s1.acc": 97.62391, "s1.loss_bbox": 0.07135, "s2.loss_cls": 0.01753, "s2.acc": 96.84238, "s2.loss_bbox": 0.04741, "loss": 0.27683, "time": 0.67447}
{"mode": "val", "epoch": 10, "iter": 288, "lr": 0.002, "bbox_mAP": 0.399, "bbox_mAP_50": 0.619, "bbox_mAP_75": 0.385, "bbox_mAP_s": 0.374, "bbox_mAP_m": 0.218, "bbox_mAP_l": 0.45, "bbox_mAP_copypaste": "0.399 0.619 0.385 0.374 0.218 0.450"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 10249, "data_time": 0.06301, "loss_rpn_cls": 0.00267, "loss_rpn_bbox": 0.00943, "s0.loss_cls": 0.05058, "s0.acc": 97.95898, "s0.loss_bbox": 0.04066, "s1.loss_cls": 0.0297, "s1.acc": 97.61489, "s1.loss_bbox": 0.06432, "s2.loss_cls": 0.01788, "s2.acc": 96.99825, "s2.loss_bbox": 0.04775, "loss": 0.26297, "time": 0.72056}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.002, "memory": 10249, "data_time": 0.01724, "loss_rpn_cls": 0.0033, "loss_rpn_bbox": 0.00911, "s0.loss_cls": 0.04673, "s0.acc": 98.07617, "s0.loss_bbox": 0.03762, "s1.loss_cls": 0.02736, "s1.acc": 97.79475, "s1.loss_bbox": 0.06446, "s2.loss_cls": 0.01723, "s2.acc": 96.69557, "s2.loss_bbox": 0.04513, "loss": 0.25095, "time": 0.67652}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.002, "memory": 10249, "data_time": 0.01718, "loss_rpn_cls": 0.00332, "loss_rpn_bbox": 0.00936, "s0.loss_cls": 0.04507, "s0.acc": 98.16895, "s0.loss_bbox": 0.03891, "s1.loss_cls": 0.02732, "s1.acc": 97.78461, "s1.loss_bbox": 0.06115, "s2.loss_cls": 0.01617, "s2.acc": 97.11041, "s2.loss_bbox": 0.04243, "loss": 0.24373, "time": 0.67813}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.002, "memory": 10249, "data_time": 0.01819, "loss_rpn_cls": 0.00292, "loss_rpn_bbox": 0.0103, "s0.loss_cls": 0.05224, "s0.acc": 97.81738, "s0.loss_bbox": 0.04539, "s1.loss_cls": 0.0306, "s1.acc": 97.46672, "s1.loss_bbox": 0.07133, "s2.loss_cls": 0.01907, "s2.acc": 96.77273, "s2.loss_bbox": 0.04617, "loss": 0.27802, "time": 0.67199}
{"mode": "val", "epoch": 11, "iter": 288, "lr": 0.002, "bbox_mAP": 0.398, "bbox_mAP_50": 0.615, "bbox_mAP_75": 0.397, "bbox_mAP_s": 0.379, "bbox_mAP_m": 0.192, "bbox_mAP_l": 0.453, "bbox_mAP_copypaste": "0.398 0.615 0.397 0.379 0.192 0.453"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 10249, "data_time": 0.06265, "loss_rpn_cls": 0.00255, "loss_rpn_bbox": 0.01007, "s0.loss_cls": 0.04572, "s0.acc": 98.1543, "s0.loss_bbox": 0.03828, "s1.loss_cls": 0.02721, "s1.acc": 97.82632, "s1.loss_bbox": 0.0614, "s2.loss_cls": 0.01692, "s2.acc": 97.01914, "s2.loss_bbox": 0.0421, "loss": 0.24425, "time": 0.72174}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0002, "memory": 10249, "data_time": 0.01695, "loss_rpn_cls": 0.00243, "loss_rpn_bbox": 0.00911, "s0.loss_cls": 0.04818, "s0.acc": 98.09375, "s0.loss_bbox": 0.03851, "s1.loss_cls": 0.02764, "s1.acc": 97.73344, "s1.loss_bbox": 0.0609, "s2.loss_cls": 0.01658, "s2.acc": 97.09549, "s2.loss_bbox": 0.04179, "loss": 0.24513, "time": 0.66938}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0002, "memory": 10249, "data_time": 0.01668, "loss_rpn_cls": 0.00225, "loss_rpn_bbox": 0.00841, "s0.loss_cls": 0.04429, "s0.acc": 98.16504, "s0.loss_bbox": 0.03792, "s1.loss_cls": 0.02609, "s1.acc": 97.82006, "s1.loss_bbox": 0.06003, "s2.loss_cls": 0.01629, "s2.acc": 97.15092, "s2.loss_bbox": 0.04242, "loss": 0.2377, "time": 0.66958}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.0002, "memory": 10249, "data_time": 0.01683, "loss_rpn_cls": 0.00253, "loss_rpn_bbox": 0.00906, "s0.loss_cls": 0.04811, "s0.acc": 98.01758, "s0.loss_bbox": 0.04031, "s1.loss_cls": 0.02683, "s1.acc": 97.79804, "s1.loss_bbox": 0.06919, "s2.loss_cls": 0.01719, "s2.acc": 97.04181, "s2.loss_bbox": 0.04768, "loss": 0.26089, "time": 0.67344}
{"mode": "val", "epoch": 12, "iter": 288, "lr": 0.0002, "bbox_mAP": 0.396, "bbox_mAP_50": 0.616, "bbox_mAP_75": 0.394, "bbox_mAP_s": 0.373, "bbox_mAP_m": 0.19, "bbox_mAP_l": 0.453, "bbox_mAP_copypaste": "0.396 0.616 0.394 0.373 0.190 0.453"}
