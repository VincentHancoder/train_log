{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/cascade_rcnn_r50_fpn_1x_coco_20200316-3dc56deb.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nmodel = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=8,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=8,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=8,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn'\nauto_resume = False\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "cascade_rcnn_r50_fpn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 10514, "data_time": 0.06028, "loss_rpn_cls": 0.09078, "loss_rpn_bbox": 0.02096, "s0.loss_cls": 0.64302, "s0.acc": 83.86475, "s0.loss_bbox": 0.08112, "s1.loss_cls": 0.34768, "s1.acc": 82.19039, "s1.loss_bbox": 0.06821, "s2.loss_cls": 0.17152, "s2.acc": 81.07178, "s2.loss_bbox": 0.02511, "loss": 1.4484, "time": 1.21721}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 10514, "data_time": 0.01622, "loss_rpn_cls": 0.0129, "loss_rpn_bbox": 0.01574, "s0.loss_cls": 0.19596, "s0.acc": 94.03955, "s0.loss_bbox": 0.07604, "s1.loss_cls": 0.11993, "s1.acc": 92.90327, "s1.loss_bbox": 0.08665, "s2.loss_cls": 0.06205, "s2.acc": 94.0226, "s2.loss_bbox": 0.04122, "loss": 0.61051, "time": 1.22355}
{"mode": "val", "epoch": 1, "iter": 144, "lr": 0.0047, "bbox_mAP": 0.166, "bbox_mAP_50": 0.285, "bbox_mAP_75": 0.15, "bbox_mAP_s": 0.179, "bbox_mAP_m": 0.078, "bbox_mAP_l": 0.117, "bbox_mAP_copypaste": "0.166 0.285 0.150 0.179 0.078 0.117"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00669, "memory": 10514, "data_time": 0.06208, "loss_rpn_cls": 0.00729, "loss_rpn_bbox": 0.01478, "s0.loss_cls": 0.13527, "s0.acc": 95.3374, "s0.loss_bbox": 0.07376, "s1.loss_cls": 0.08167, "s1.acc": 94.37207, "s1.loss_bbox": 0.08629, "s2.loss_cls": 0.04617, "s2.acc": 93.85986, "s2.loss_bbox": 0.04224, "loss": 0.48745, "time": 1.26916}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00869, "memory": 10514, "data_time": 0.01516, "loss_rpn_cls": 0.01033, "loss_rpn_bbox": 0.01564, "s0.loss_cls": 0.12604, "s0.acc": 95.64258, "s0.loss_bbox": 0.0751, "s1.loss_cls": 0.0712, "s1.acc": 94.99678, "s1.loss_bbox": 0.0923, "s2.loss_cls": 0.03739, "s2.acc": 94.89984, "s2.loss_bbox": 0.04548, "loss": 0.47349, "time": 1.21214}
{"mode": "val", "epoch": 2, "iter": 144, "lr": 0.00941, "bbox_mAP": 0.217, "bbox_mAP_50": 0.356, "bbox_mAP_75": 0.213, "bbox_mAP_s": 0.16, "bbox_mAP_m": 0.113, "bbox_mAP_l": 0.192, "bbox_mAP_copypaste": "0.217 0.356 0.213 0.160 0.113 0.192"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.01141, "memory": 10514, "data_time": 0.06342, "loss_rpn_cls": 0.00615, "loss_rpn_bbox": 0.01564, "s0.loss_cls": 0.12208, "s0.acc": 95.52783, "s0.loss_bbox": 0.07506, "s1.loss_cls": 0.07162, "s1.acc": 94.65726, "s1.loss_bbox": 0.09536, "s2.loss_cls": 0.03786, "s2.acc": 94.53994, "s2.loss_bbox": 0.04756, "loss": 0.47133, "time": 1.26562}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01341, "memory": 10514, "data_time": 0.01474, "loss_rpn_cls": 0.00738, "loss_rpn_bbox": 0.01503, "s0.loss_cls": 0.10667, "s0.acc": 96.02686, "s0.loss_bbox": 0.06752, "s1.loss_cls": 0.05988, "s1.acc": 95.38759, "s1.loss_bbox": 0.08316, "s2.loss_cls": 0.03086, "s2.acc": 95.36508, "s2.loss_bbox": 0.04294, "loss": 0.41345, "time": 1.21413}
{"mode": "val", "epoch": 3, "iter": 144, "lr": 0.01413, "bbox_mAP": 0.28, "bbox_mAP_50": 0.449, "bbox_mAP_75": 0.275, "bbox_mAP_s": 0.099, "bbox_mAP_m": 0.124, "bbox_mAP_l": 0.263, "bbox_mAP_copypaste": "0.280 0.449 0.275 0.099 0.124 0.263"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.01612, "memory": 10514, "data_time": 0.06224, "loss_rpn_cls": 0.00578, "loss_rpn_bbox": 0.01325, "s0.loss_cls": 0.10022, "s0.acc": 96.16455, "s0.loss_bbox": 0.06655, "s1.loss_cls": 0.05879, "s1.acc": 95.40754, "s1.loss_bbox": 0.08669, "s2.loss_cls": 0.03083, "s2.acc": 95.19463, "s2.loss_bbox": 0.04444, "loss": 0.40655, "time": 1.25771}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.01812, "memory": 10514, "data_time": 0.01595, "loss_rpn_cls": 0.0057, "loss_rpn_bbox": 0.01444, "s0.loss_cls": 0.10618, "s0.acc": 96.09229, "s0.loss_bbox": 0.06657, "s1.loss_cls": 0.06408, "s1.acc": 95.27099, "s1.loss_bbox": 0.08784, "s2.loss_cls": 0.03355, "s2.acc": 94.9252, "s2.loss_bbox": 0.04693, "loss": 0.42529, "time": 1.21205}
{"mode": "val", "epoch": 4, "iter": 144, "lr": 0.01884, "bbox_mAP": 0.286, "bbox_mAP_50": 0.454, "bbox_mAP_75": 0.293, "bbox_mAP_s": 0.186, "bbox_mAP_m": 0.128, "bbox_mAP_l": 0.259, "bbox_mAP_copypaste": "0.286 0.454 0.293 0.186 0.128 0.259"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 10514, "data_time": 0.06179, "loss_rpn_cls": 0.00598, "loss_rpn_bbox": 0.0153, "s0.loss_cls": 0.10206, "s0.acc": 96.07129, "s0.loss_bbox": 0.0671, "s1.loss_cls": 0.05916, "s1.acc": 95.39757, "s1.loss_bbox": 0.08907, "s2.loss_cls": 0.03117, "s2.acc": 95.08642, "s2.loss_bbox": 0.04729, "loss": 0.41713, "time": 1.27478}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 10514, "data_time": 0.01455, "loss_rpn_cls": 0.00663, "loss_rpn_bbox": 0.01337, "s0.loss_cls": 0.09026, "s0.acc": 96.59082, "s0.loss_bbox": 0.06324, "s1.loss_cls": 0.05349, "s1.acc": 95.85284, "s1.loss_bbox": 0.08388, "s2.loss_cls": 0.02854, "s2.acc": 95.47529, "s2.loss_bbox": 0.04365, "loss": 0.38305, "time": 1.21232}
{"mode": "val", "epoch": 5, "iter": 144, "lr": 0.02, "bbox_mAP": 0.27, "bbox_mAP_50": 0.439, "bbox_mAP_75": 0.264, "bbox_mAP_s": 0.192, "bbox_mAP_m": 0.142, "bbox_mAP_l": 0.236, "bbox_mAP_copypaste": "0.270 0.439 0.264 0.192 0.142 0.236"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 10514, "data_time": 0.06239, "loss_rpn_cls": 0.00466, "loss_rpn_bbox": 0.01231, "s0.loss_cls": 0.09137, "s0.acc": 96.52979, "s0.loss_bbox": 0.06462, "s1.loss_cls": 0.05433, "s1.acc": 95.83567, "s1.loss_bbox": 0.08681, "s2.loss_cls": 0.03004, "s2.acc": 95.22873, "s2.loss_bbox": 0.05062, "loss": 0.39476, "time": 1.25574}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 10514, "data_time": 0.01484, "loss_rpn_cls": 0.00661, "loss_rpn_bbox": 0.01536, "s0.loss_cls": 0.09144, "s0.acc": 96.51904, "s0.loss_bbox": 0.06474, "s1.loss_cls": 0.05324, "s1.acc": 95.81179, "s1.loss_bbox": 0.0858, "s2.loss_cls": 0.02847, "s2.acc": 95.44608, "s2.loss_bbox": 0.04633, "loss": 0.39199, "time": 1.22223}
{"mode": "val", "epoch": 6, "iter": 144, "lr": 0.02, "bbox_mAP": 0.293, "bbox_mAP_50": 0.469, "bbox_mAP_75": 0.285, "bbox_mAP_s": 0.184, "bbox_mAP_m": 0.145, "bbox_mAP_l": 0.274, "bbox_mAP_copypaste": "0.293 0.469 0.285 0.184 0.145 0.274"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 10514, "data_time": 0.06182, "loss_rpn_cls": 0.00564, "loss_rpn_bbox": 0.01327, "s0.loss_cls": 0.07741, "s0.acc": 96.96289, "s0.loss_bbox": 0.05892, "s1.loss_cls": 0.04632, "s1.acc": 96.41637, "s1.loss_bbox": 0.0812, "s2.loss_cls": 0.02571, "s2.acc": 95.8566, "s2.loss_bbox": 0.0471, "loss": 0.35558, "time": 1.27188}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 10514, "data_time": 0.0152, "loss_rpn_cls": 0.00473, "loss_rpn_bbox": 0.0134, "s0.loss_cls": 0.08018, "s0.acc": 96.7666, "s0.loss_bbox": 0.06084, "s1.loss_cls": 0.04772, "s1.acc": 96.08275, "s1.loss_bbox": 0.08456, "s2.loss_cls": 0.02694, "s2.acc": 95.45938, "s2.loss_bbox": 0.04947, "loss": 0.36783, "time": 1.21137}
{"mode": "val", "epoch": 7, "iter": 144, "lr": 0.02, "bbox_mAP": 0.296, "bbox_mAP_50": 0.487, "bbox_mAP_75": 0.29, "bbox_mAP_s": 0.174, "bbox_mAP_m": 0.158, "bbox_mAP_l": 0.258, "bbox_mAP_copypaste": "0.296 0.487 0.290 0.174 0.158 0.258"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 10514, "data_time": 0.06297, "loss_rpn_cls": 0.00313, "loss_rpn_bbox": 0.01242, "s0.loss_cls": 0.07505, "s0.acc": 96.99463, "s0.loss_bbox": 0.05679, "s1.loss_cls": 0.04458, "s1.acc": 96.42425, "s1.loss_bbox": 0.08269, "s2.loss_cls": 0.02515, "s2.acc": 95.85133, "s2.loss_bbox": 0.05188, "loss": 0.3517, "time": 1.27768}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 10514, "data_time": 0.01591, "loss_rpn_cls": 0.00412, "loss_rpn_bbox": 0.01203, "s0.loss_cls": 0.07477, "s0.acc": 97.07275, "s0.loss_bbox": 0.0541, "s1.loss_cls": 0.04445, "s1.acc": 96.47761, "s1.loss_bbox": 0.07969, "s2.loss_cls": 0.02633, "s2.acc": 95.62434, "s2.loss_bbox": 0.05081, "loss": 0.34632, "time": 1.22523}
{"mode": "val", "epoch": 8, "iter": 144, "lr": 0.02, "bbox_mAP": 0.301, "bbox_mAP_50": 0.493, "bbox_mAP_75": 0.319, "bbox_mAP_s": 0.179, "bbox_mAP_m": 0.138, "bbox_mAP_l": 0.285, "bbox_mAP_copypaste": "0.301 0.493 0.319 0.179 0.138 0.285"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 10514, "data_time": 0.06275, "loss_rpn_cls": 0.00294, "loss_rpn_bbox": 0.01096, "s0.loss_cls": 0.06131, "s0.acc": 97.52148, "s0.loss_bbox": 0.0494, "s1.loss_cls": 0.03541, "s1.acc": 97.15441, "s1.loss_bbox": 0.07447, "s2.loss_cls": 0.02087, "s2.acc": 96.41927, "s2.loss_bbox": 0.04758, "loss": 0.30295, "time": 1.27355}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.002, "memory": 10514, "data_time": 0.01593, "loss_rpn_cls": 0.0031, "loss_rpn_bbox": 0.00943, "s0.loss_cls": 0.05739, "s0.acc": 97.67285, "s0.loss_bbox": 0.04498, "s1.loss_cls": 0.03481, "s1.acc": 97.16836, "s1.loss_bbox": 0.07137, "s2.loss_cls": 0.0209, "s2.acc": 96.46807, "s2.loss_bbox": 0.04605, "loss": 0.28804, "time": 1.22993}
{"mode": "val", "epoch": 9, "iter": 144, "lr": 0.002, "bbox_mAP": 0.337, "bbox_mAP_50": 0.523, "bbox_mAP_75": 0.343, "bbox_mAP_s": 0.213, "bbox_mAP_m": 0.164, "bbox_mAP_l": 0.321, "bbox_mAP_copypaste": "0.337 0.523 0.343 0.213 0.164 0.321"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 10514, "data_time": 0.06256, "loss_rpn_cls": 0.00257, "loss_rpn_bbox": 0.00938, "s0.loss_cls": 0.05258, "s0.acc": 97.80957, "s0.loss_bbox": 0.04181, "s1.loss_cls": 0.03124, "s1.acc": 97.43793, "s1.loss_bbox": 0.06972, "s2.loss_cls": 0.01972, "s2.acc": 96.62261, "s2.loss_bbox": 0.04929, "loss": 0.27631, "time": 1.26386}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.002, "memory": 10514, "data_time": 0.01635, "loss_rpn_cls": 0.00209, "loss_rpn_bbox": 0.00885, "s0.loss_cls": 0.05337, "s0.acc": 97.81055, "s0.loss_bbox": 0.04601, "s1.loss_cls": 0.03171, "s1.acc": 97.42864, "s1.loss_bbox": 0.0732, "s2.loss_cls": 0.01965, "s2.acc": 96.64998, "s2.loss_bbox": 0.04832, "loss": 0.2832, "time": 1.21873}
{"mode": "val", "epoch": 10, "iter": 144, "lr": 0.002, "bbox_mAP": 0.331, "bbox_mAP_50": 0.522, "bbox_mAP_75": 0.346, "bbox_mAP_s": 0.205, "bbox_mAP_m": 0.159, "bbox_mAP_l": 0.315, "bbox_mAP_copypaste": "0.331 0.522 0.346 0.205 0.159 0.315"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 10514, "data_time": 0.06229, "loss_rpn_cls": 0.00205, "loss_rpn_bbox": 0.00889, "s0.loss_cls": 0.05005, "s0.acc": 97.97998, "s0.loss_bbox": 0.04226, "s1.loss_cls": 0.02962, "s1.acc": 97.59637, "s1.loss_bbox": 0.06843, "s2.loss_cls": 0.01881, "s2.acc": 96.78392, "s2.loss_bbox": 0.0453, "loss": 0.26541, "time": 1.27087}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.002, "memory": 10514, "data_time": 0.01596, "loss_rpn_cls": 0.00234, "loss_rpn_bbox": 0.00876, "s0.loss_cls": 0.0526, "s0.acc": 97.87061, "s0.loss_bbox": 0.04287, "s1.loss_cls": 0.03161, "s1.acc": 97.45413, "s1.loss_bbox": 0.0699, "s2.loss_cls": 0.01957, "s2.acc": 96.68002, "s2.loss_bbox": 0.04828, "loss": 0.27593, "time": 1.21948}
{"mode": "val", "epoch": 11, "iter": 144, "lr": 0.002, "bbox_mAP": 0.324, "bbox_mAP_50": 0.522, "bbox_mAP_75": 0.327, "bbox_mAP_s": 0.196, "bbox_mAP_m": 0.156, "bbox_mAP_l": 0.311, "bbox_mAP_copypaste": "0.324 0.522 0.327 0.196 0.156 0.311"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 10514, "data_time": 0.06676, "loss_rpn_cls": 0.00257, "loss_rpn_bbox": 0.0085, "s0.loss_cls": 0.05082, "s0.acc": 97.93164, "s0.loss_bbox": 0.04115, "s1.loss_cls": 0.03024, "s1.acc": 97.50207, "s1.loss_bbox": 0.06717, "s2.loss_cls": 0.01883, "s2.acc": 96.76005, "s2.loss_bbox": 0.0485, "loss": 0.26778, "time": 1.26956}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0002, "memory": 10514, "data_time": 0.01971, "loss_rpn_cls": 0.00164, "loss_rpn_bbox": 0.00816, "s0.loss_cls": 0.04385, "s0.acc": 98.22559, "s0.loss_bbox": 0.03744, "s1.loss_cls": 0.02694, "s1.acc": 97.82714, "s1.loss_bbox": 0.06292, "s2.loss_cls": 0.01729, "s2.acc": 96.96601, "s2.loss_bbox": 0.04203, "loss": 0.24027, "time": 1.21018}
{"mode": "val", "epoch": 12, "iter": 144, "lr": 0.0002, "bbox_mAP": 0.33, "bbox_mAP_50": 0.525, "bbox_mAP_75": 0.329, "bbox_mAP_s": 0.217, "bbox_mAP_m": 0.161, "bbox_mAP_l": 0.314, "bbox_mAP_copypaste": "0.330 0.525 0.329 0.217 0.161 0.314"}
