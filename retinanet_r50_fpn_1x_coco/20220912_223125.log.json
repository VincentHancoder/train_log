{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/train2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations/val2.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb101/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/retinanet_r50_fpn_1x_coco_20200130-c2398f9e.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nwork_dir = './work_dirs/retinanet_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 4)\n", "seed": 0, "exp_name": "retinanet_r50_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 7810, "data_time": 0.06123, "loss_cls": 1.10308, "loss_bbox": 0.44337, "loss": 1.54645, "time": 0.64429}
{"mode": "val", "epoch": 1, "iter": 77, "lr": 0.00107, "bbox_mAP": 0.072, "bbox_mAP_50": 0.094, "bbox_mAP_75": 0.069, "bbox_mAP_s": 0.007, "bbox_mAP_m": 0.016, "bbox_mAP_l": 0.097, "bbox_mAP_copypaste": "0.072 0.094 0.069 0.007 0.016 0.097"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00207, "memory": 7810, "data_time": 0.06093, "loss_cls": 0.51923, "loss_bbox": 0.33503, "loss": 0.85425, "time": 0.64143}
{"mode": "val", "epoch": 2, "iter": 77, "lr": 0.00215, "bbox_mAP": 0.126, "bbox_mAP_50": 0.19, "bbox_mAP_75": 0.122, "bbox_mAP_s": 0.039, "bbox_mAP_m": 0.056, "bbox_mAP_l": 0.152, "bbox_mAP_copypaste": "0.126 0.190 0.122 0.039 0.056 0.152"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00315, "memory": 7810, "data_time": 0.06011, "loss_cls": 0.36013, "loss_bbox": 0.29605, "loss": 0.65618, "time": 0.64259}
{"mode": "val", "epoch": 3, "iter": 77, "lr": 0.00323, "bbox_mAP": 0.158, "bbox_mAP_50": 0.249, "bbox_mAP_75": 0.151, "bbox_mAP_s": 0.054, "bbox_mAP_m": 0.091, "bbox_mAP_l": 0.201, "bbox_mAP_copypaste": "0.158 0.249 0.151 0.054 0.091 0.201"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00423, "memory": 7810, "data_time": 0.05893, "loss_cls": 0.32235, "loss_bbox": 0.28775, "loss": 0.6101, "time": 0.64305}
{"mode": "val", "epoch": 4, "iter": 77, "lr": 0.00431, "bbox_mAP": 0.173, "bbox_mAP_50": 0.282, "bbox_mAP_75": 0.165, "bbox_mAP_s": 0.066, "bbox_mAP_m": 0.097, "bbox_mAP_l": 0.224, "bbox_mAP_copypaste": "0.173 0.282 0.165 0.066 0.097 0.224"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.0053, "memory": 7810, "data_time": 0.0604, "loss_cls": 0.32422, "loss_bbox": 0.27876, "loss": 0.60298, "time": 0.64262}
{"mode": "val", "epoch": 5, "iter": 77, "lr": 0.00538, "bbox_mAP": 0.174, "bbox_mAP_50": 0.275, "bbox_mAP_75": 0.174, "bbox_mAP_s": 0.084, "bbox_mAP_m": 0.103, "bbox_mAP_l": 0.212, "bbox_mAP_copypaste": "0.174 0.275 0.174 0.084 0.103 0.212"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.00638, "memory": 7810, "data_time": 0.06026, "loss_cls": 0.27363, "loss_bbox": 0.28464, "loss": 0.55826, "time": 0.6435}
{"mode": "val", "epoch": 6, "iter": 77, "lr": 0.00646, "bbox_mAP": 0.197, "bbox_mAP_50": 0.311, "bbox_mAP_75": 0.197, "bbox_mAP_s": 0.089, "bbox_mAP_m": 0.132, "bbox_mAP_l": 0.251, "bbox_mAP_copypaste": "0.197 0.311 0.197 0.089 0.132 0.251"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.00746, "memory": 7810, "data_time": 0.06019, "loss_cls": 0.26149, "loss_bbox": 0.26447, "loss": 0.52596, "time": 0.64469}
{"mode": "val", "epoch": 7, "iter": 77, "lr": 0.00754, "bbox_mAP": 0.189, "bbox_mAP_50": 0.349, "bbox_mAP_75": 0.163, "bbox_mAP_s": 0.119, "bbox_mAP_m": 0.129, "bbox_mAP_l": 0.238, "bbox_mAP_copypaste": "0.189 0.349 0.163 0.119 0.129 0.238"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.00854, "memory": 7810, "data_time": 0.06082, "loss_cls": 0.23331, "loss_bbox": 0.27004, "loss": 0.50336, "time": 0.64461}
{"mode": "val", "epoch": 8, "iter": 77, "lr": 0.00862, "bbox_mAP": 0.183, "bbox_mAP_50": 0.338, "bbox_mAP_75": 0.163, "bbox_mAP_s": 0.108, "bbox_mAP_m": 0.126, "bbox_mAP_l": 0.203, "bbox_mAP_copypaste": "0.183 0.338 0.163 0.108 0.126 0.203"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.00096, "memory": 7810, "data_time": 0.0601, "loss_cls": 0.19855, "loss_bbox": 0.22215, "loss": 0.4207, "time": 0.64255}
{"mode": "val", "epoch": 9, "iter": 77, "lr": 0.00097, "bbox_mAP": 0.216, "bbox_mAP_50": 0.378, "bbox_mAP_75": 0.196, "bbox_mAP_s": 0.133, "bbox_mAP_m": 0.138, "bbox_mAP_l": 0.281, "bbox_mAP_copypaste": "0.216 0.378 0.196 0.133 0.138 0.281"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.001, "memory": 7810, "data_time": 0.06053, "loss_cls": 0.16977, "loss_bbox": 0.20274, "loss": 0.37251, "time": 0.64385}
{"mode": "val", "epoch": 10, "iter": 77, "lr": 0.001, "bbox_mAP": 0.233, "bbox_mAP_50": 0.415, "bbox_mAP_75": 0.216, "bbox_mAP_s": 0.133, "bbox_mAP_m": 0.153, "bbox_mAP_l": 0.308, "bbox_mAP_copypaste": "0.233 0.415 0.216 0.133 0.153 0.308"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.001, "memory": 7810, "data_time": 0.06022, "loss_cls": 0.15435, "loss_bbox": 0.19172, "loss": 0.34607, "time": 0.64281}
{"mode": "val", "epoch": 11, "iter": 77, "lr": 0.001, "bbox_mAP": 0.232, "bbox_mAP_50": 0.414, "bbox_mAP_75": 0.221, "bbox_mAP_s": 0.128, "bbox_mAP_m": 0.161, "bbox_mAP_l": 0.297, "bbox_mAP_copypaste": "0.232 0.414 0.221 0.128 0.161 0.297"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0001, "memory": 7810, "data_time": 0.05999, "loss_cls": 0.14408, "loss_bbox": 0.17968, "loss": 0.32377, "time": 0.64196}
{"mode": "val", "epoch": 12, "iter": 77, "lr": 0.0001, "bbox_mAP": 0.233, "bbox_mAP_50": 0.415, "bbox_mAP_75": 0.219, "bbox_mAP_s": 0.13, "bbox_mAP_m": 0.162, "bbox_mAP_l": 0.316, "bbox_mAP_copypaste": "0.233 0.415 0.219 0.130 0.162 0.316"}
