{"env_info": "sys.platform: linux\nPython: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.0, V11.0.194\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.25.1+df28da9", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = '/home/hhn/mmdetection/20220830'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1500, 1000),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/train4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1500, 1000), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/hhn/mmdetection/20220830/annotations_lb201/val4.json',\n        img_prefix='/home/hhn/mmdetection/20220830/lb201/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1500, 1000),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/hhn/mmdetection/pretrained/retinanet_r50_fpn_1x_coco_20200130-c2398f9e.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=8)\nwork_dir = './work_dirs/retinanet_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 3)\n", "seed": 0, "exp_name": "retinanet_r50_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 7809, "data_time": 0.07559, "loss_cls": 1.12808, "loss_bbox": 0.4468, "loss": 1.57488, "time": 0.67746}
{"mode": "val", "epoch": 1, "iter": 96, "lr": 0.00155, "bbox_mAP": 0.093, "bbox_mAP_50": 0.202, "bbox_mAP_75": 0.065, "bbox_mAP_s": 0.103, "bbox_mAP_m": 0.108, "bbox_mAP_l": 0.076, "bbox_mAP_copypaste": "0.093 0.202 0.065 0.103 0.108 0.076"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00255, "memory": 7847, "data_time": 0.06559, "loss_cls": 0.49016, "loss_bbox": 0.32854, "loss": 0.8187, "time": 0.64455}
{"mode": "val", "epoch": 2, "iter": 96, "lr": 0.00311, "bbox_mAP": 0.176, "bbox_mAP_50": 0.35, "bbox_mAP_75": 0.138, "bbox_mAP_s": 0.139, "bbox_mAP_m": 0.179, "bbox_mAP_l": 0.152, "bbox_mAP_copypaste": "0.176 0.350 0.138 0.139 0.179 0.152"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00411, "memory": 7848, "data_time": 0.06473, "loss_cls": 0.41128, "loss_bbox": 0.31025, "loss": 0.72154, "time": 0.64183}
{"mode": "val", "epoch": 3, "iter": 96, "lr": 0.00467, "bbox_mAP": 0.194, "bbox_mAP_50": 0.397, "bbox_mAP_75": 0.154, "bbox_mAP_s": 0.16, "bbox_mAP_m": 0.213, "bbox_mAP_l": 0.26, "bbox_mAP_copypaste": "0.194 0.397 0.154 0.160 0.213 0.260"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00566, "memory": 7848, "data_time": 0.06416, "loss_cls": 0.32182, "loss_bbox": 0.28655, "loss": 0.60837, "time": 0.64279}
{"mode": "val", "epoch": 4, "iter": 96, "lr": 0.00622, "bbox_mAP": 0.208, "bbox_mAP_50": 0.408, "bbox_mAP_75": 0.166, "bbox_mAP_s": 0.17, "bbox_mAP_m": 0.214, "bbox_mAP_l": 0.218, "bbox_mAP_copypaste": "0.208 0.408 0.166 0.170 0.214 0.218"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00722, "memory": 7848, "data_time": 0.06432, "loss_cls": 0.36609, "loss_bbox": 0.2809, "loss": 0.64699, "time": 0.64154}
{"mode": "val", "epoch": 5, "iter": 96, "lr": 0.00778, "bbox_mAP": 0.19, "bbox_mAP_50": 0.382, "bbox_mAP_75": 0.162, "bbox_mAP_s": 0.174, "bbox_mAP_m": 0.231, "bbox_mAP_l": 0.162, "bbox_mAP_copypaste": "0.190 0.382 0.162 0.174 0.231 0.162"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.00878, "memory": 7848, "data_time": 0.06215, "loss_cls": 0.31272, "loss_bbox": 0.28275, "loss": 0.59548, "time": 0.64009}
{"mode": "val", "epoch": 6, "iter": 96, "lr": 0.00934, "bbox_mAP": 0.161, "bbox_mAP_50": 0.33, "bbox_mAP_75": 0.149, "bbox_mAP_s": 0.145, "bbox_mAP_m": 0.178, "bbox_mAP_l": 0.217, "bbox_mAP_copypaste": "0.161 0.330 0.149 0.145 0.178 0.217"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.01, "memory": 7848, "data_time": 0.06408, "loss_cls": 0.31831, "loss_bbox": 0.2928, "loss": 0.61111, "time": 0.90781}
{"mode": "val", "epoch": 7, "iter": 96, "lr": 0.01, "bbox_mAP": 0.217, "bbox_mAP_50": 0.453, "bbox_mAP_75": 0.151, "bbox_mAP_s": 0.172, "bbox_mAP_m": 0.261, "bbox_mAP_l": 0.183, "bbox_mAP_copypaste": "0.217 0.453 0.151 0.172 0.261 0.183"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.01, "memory": 7848, "data_time": 0.06403, "loss_cls": 0.32017, "loss_bbox": 0.28994, "loss": 0.61011, "time": 0.6429}
{"mode": "val", "epoch": 8, "iter": 96, "lr": 0.01, "bbox_mAP": 0.233, "bbox_mAP_50": 0.482, "bbox_mAP_75": 0.187, "bbox_mAP_s": 0.164, "bbox_mAP_m": 0.284, "bbox_mAP_l": 0.21, "bbox_mAP_copypaste": "0.233 0.482 0.187 0.164 0.284 0.210"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.001, "memory": 7848, "data_time": 0.06403, "loss_cls": 0.2074, "loss_bbox": 0.23935, "loss": 0.44675, "time": 0.64285}
{"mode": "val", "epoch": 9, "iter": 96, "lr": 0.001, "bbox_mAP": 0.314, "bbox_mAP_50": 0.582, "bbox_mAP_75": 0.274, "bbox_mAP_s": 0.231, "bbox_mAP_m": 0.318, "bbox_mAP_l": 0.413, "bbox_mAP_copypaste": "0.314 0.582 0.274 0.231 0.318 0.413"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.001, "memory": 7848, "data_time": 0.06374, "loss_cls": 0.18034, "loss_bbox": 0.21798, "loss": 0.39833, "time": 0.64409}
{"mode": "val", "epoch": 10, "iter": 96, "lr": 0.001, "bbox_mAP": 0.307, "bbox_mAP_50": 0.582, "bbox_mAP_75": 0.254, "bbox_mAP_s": 0.236, "bbox_mAP_m": 0.32, "bbox_mAP_l": 0.41, "bbox_mAP_copypaste": "0.307 0.582 0.254 0.236 0.320 0.410"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.001, "memory": 7849, "data_time": 0.06158, "loss_cls": 0.16999, "loss_bbox": 0.21396, "loss": 0.38396, "time": 0.90984}
{"mode": "val", "epoch": 11, "iter": 96, "lr": 0.001, "bbox_mAP": 0.305, "bbox_mAP_50": 0.577, "bbox_mAP_75": 0.265, "bbox_mAP_s": 0.245, "bbox_mAP_m": 0.333, "bbox_mAP_l": 0.405, "bbox_mAP_copypaste": "0.305 0.577 0.265 0.245 0.333 0.405"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0001, "memory": 7849, "data_time": 0.06233, "loss_cls": 0.15846, "loss_bbox": 0.1994, "loss": 0.35787, "time": 0.90262}
{"mode": "val", "epoch": 12, "iter": 96, "lr": 0.0001, "bbox_mAP": 0.31, "bbox_mAP_50": 0.578, "bbox_mAP_75": 0.268, "bbox_mAP_s": 0.255, "bbox_mAP_m": 0.331, "bbox_mAP_l": 0.409, "bbox_mAP_copypaste": "0.310 0.578 0.268 0.255 0.331 0.409"}
